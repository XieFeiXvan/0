.TH "E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.cpp" 3 "Sat Aug 13 2022" "Version Ver0.2(alpha)" "HiEasyX" \" -*- nroff -*-
.ad l
.nh
.SH NAME
E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.cpp
.SH SYNOPSIS
.br
.PP
\fC#include 'HiWindow\&.h'\fP
.br
\fC#include 'HiMacro\&.h'\fP
.br
\fC#include 'HiIcon\&.h'\fP
.br
\fC#include 'HiStart\&.h'\fP
.br
\fC#include 'HiCanvas\&.h'\fP
.br
\fC#include 'HiSysGUI/SysControlBase\&.h'\fP
.br

.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBHiEasyX\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBMSG_RESERVE_SIZE\fP   100"
.br
.ti -1c
.RI "#define \fBSYSCTRL_RESERVE_SIZE\fP   100"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "bool \fBHiEasyX::isValidWindowIndex\fP (int index)"
.br
.ti -1c
.RI "bool \fBHiEasyX::isFocusWindowExisted\fP ()"
.br
.ti -1c
.RI "EasyWindow & \fBHiEasyX::GetFocusWindow\fP ()"
.br
.ti -1c
.RI "int \fBHiEasyX::GetWindowIndex\fP (HWND hWnd)"
.br
.ti -1c
.RI "bool \fBHiEasyX::isAnyWindow\fP ()"
.br
.ti -1c
.RI "bool \fBHiEasyX::isAliveWindow\fP (HWND hWnd)"
.br
.ti -1c
.RI "bool \fBHiEasyX::isAliveWindow\fP (int index)"
.br
.ti -1c
.RI "void \fBHiEasyX::WaitForProcessing\fP (int index)"
.br
.ti -1c
.RI "void \fBHiEasyX::FlushDrawingToWnd\fP (IMAGE *pImg, HWND hWnd)"
.br
.ti -1c
.RI "void \fBHiEasyX::WaitForTask\fP (HWND hWnd)"
.br
.ti -1c
.RI "void \fBHiEasyX::FreeWindow\fP (int index)"
.br
.ti -1c
.RI "void \fBHiEasyX::closegraph_win32\fP (int index)"
.br
.ti -1c
.RI "void \fBHiEasyX::closegraph_win32\fP (HWND hWnd)"
.br
.ti -1c
.RI "void \fBHiEasyX::SetWndProcFunc\fP (HWND hWnd, WNDPROC WindowProcess)"
.br
.ti -1c
.RI "IMAGE * \fBHiEasyX::GetWindowImage\fP (HWND hWnd)"
.br
.ti -1c
.RI "Canvas * \fBHiEasyX::GetWindowCanvas\fP (HWND hWnd)"
.br
.ti -1c
.RI "void \fBHiEasyX::BindWindowCanvas\fP (Canvas *pCanvas, HWND hWnd)"
.br
.ti -1c
.RI "void \fBHiEasyX::init_end\fP (HWND hWnd)"
.br
.ti -1c
.RI "void \fBHiEasyX::AutoExit\fP ()"
.br
.ti -1c
.RI "HWND \fBHiEasyX::GetHWnd_win32\fP ()"
.br
.ti -1c
.RI "EasyWindow \fBHiEasyX::GetWorkingWindow\fP ()"
.br
.ti -1c
.RI "bool \fBHiEasyX::SetWorkingWindow\fP (HWND hWnd)"
.br
.ti -1c
.RI "void \fBHiEasyX::QuickDraw\fP (UINT nSkipPixels, HWND hWnd)"
.br
.ti -1c
.RI "DrawMode \fBHiEasyX::GetDrawMode\fP ()"
.br
.ti -1c
.RI "void \fBHiEasyX::SetDrawMode\fP (DrawMode mode)"
.br
.ti -1c
.RI "void \fBHiEasyX::SendUserRedrawMsg\fP (HWND hWnd)"
.br
.ti -1c
.RI "void \fBHiEasyX::EnforceRedraw\fP (HWND hWnd)"
.br
.ti -1c
.RI "void \fBHiEasyX::FlushDrawing\fP (int index)"
.br
.ti -1c
.RI "bool \fBHiEasyX::BeginTask\fP ()"
.br
.ti -1c
.RI "void \fBHiEasyX::EndTask\fP (bool flush)"
.br
.ti -1c
.RI "bool \fBHiEasyX::isInTask\fP (HWND hWnd)"
.br
.ti -1c
.RI "void \fBHiEasyX::ResizeWindowImage\fP (int index, RECT rct)"
.br
.ti -1c
.RI "void \fBHiEasyX::ShowTray\fP (NOTIFYICONDATA *nid)"
.br
.ti -1c
.RI "void \fBHiEasyX::CreateTray\fP (LPCTSTR lpszTrayName, HWND hWnd)"
.br
.ti -1c
.RI "void \fBHiEasyX::DeleteTray\fP (HWND hWnd)"
.br
.ti -1c
.RI "void \fBHiEasyX::SetTrayMenu\fP (HMENU hMenu, HWND hWnd)"
.br
.ti -1c
.RI "void \fBHiEasyX::SetTrayMenuProcFunc\fP (void(*pFunc)(UINT), HWND hWnd)"
.br
.ti -1c
.RI "bool \fBHiEasyX::isWindowSizeChanged\fP (HWND hWnd)"
.br
.ti -1c
.RI "bool \fBHiEasyX::GetCustomIconState\fP ()"
.br
.ti -1c
.RI "void \fBHiEasyX::SetCustomIcon\fP (int nIcon, int nIconSm)"
.br
.ti -1c
.RI "std::vector< ExMessage > & \fBHiEasyX::GetMsgVector\fP (HWND hWnd)"
.br
.ti -1c
.RI "void \fBHiEasyX::RemoveMessage\fP (HWND hWnd)"
.br
.ti -1c
.RI "void \fBHiEasyX::ClearMessage\fP (BYTE filter, HWND hWnd)"
.br
.ti -1c
.RI "bool \fBHiEasyX::isNewMessage\fP (BYTE filter, HWND hWnd)"
.br
.ti -1c
.RI "ExMessage \fBHiEasyX::GetNextMessage\fP (BYTE filter, HWND hWnd)"
.br
.ti -1c
.RI "ExMessage \fBHiEasyX::getmessage_win32\fP (BYTE filter, HWND hWnd)"
.br
.ti -1c
.RI "void \fBHiEasyX::getmessage_win32\fP (ExMessage *msg, BYTE filter, HWND hWnd)"
.br
.ti -1c
.RI "bool \fBHiEasyX::peekmessage_win32\fP (ExMessage *msg, BYTE filter, bool removemsg, HWND hWnd)"
.br
.ti -1c
.RI "void \fBHiEasyX::flushmessage_win32\fP (BYTE filter, HWND hWnd)"
.br
.ti -1c
.RI "bool \fBHiEasyX::MouseHit_win32\fP (HWND hWnd)"
.br
.ti -1c
.RI "MOUSEMSG \fBHiEasyX::GetMouseMsg_win32\fP (HWND hWnd)"
.br
.ti -1c
.RI "bool \fBHiEasyX::PeekMouseMsg_win32\fP (MOUSEMSG *pMsg, bool bRemoveMsg, HWND hWnd)"
.br
.ti -1c
.RI "void \fBHiEasyX::FlushMouseMsgBuffer_win32\fP (HWND hWnd)"
.br
.ti -1c
.RI "ExMessage \fBHiEasyX::To_ExMessage\fP (MOUSEMSG msg)"
.br
.ti -1c
.RI "MOUSEMSG \fBHiEasyX::To_MouseMsg\fP (ExMessage msgEx)"
.br
.ti -1c
.RI "void \fBHiEasyX::PreSetWindowStyle\fP (long lStyle)"
.br
.ti -1c
.RI "void \fBHiEasyX::PreSetWindowPos\fP (int x, int y)"
.br
.ti -1c
.RI "int \fBHiEasyX::SetWindowStyle\fP (long lNewStyle, HWND hWnd)"
.br
.ti -1c
.RI "int \fBHiEasyX::SetWindowExStyle\fP (long lNewExStyle, HWND hWnd)"
.br
.ti -1c
.RI "POINT \fBHiEasyX::GetWindowPos\fP (HWND hWnd)"
.br
.ti -1c
.RI "SIZE \fBHiEasyX::GetWindowSize\fP (HWND hWnd)"
.br
.ti -1c
.RI "void \fBHiEasyX::MoveWindow\fP (int x, int y, HWND hWnd)"
.br
.ti -1c
.RI "void \fBHiEasyX::MoveWindowRel\fP (int dx, int dy, HWND hWnd)"
.br
.ti -1c
.RI "void \fBHiEasyX::ResizeWindow\fP (int w, int h, HWND hWnd)"
.br
.ti -1c
.RI "HICON \fBHiEasyX::GetDefaultAppIcon\fP ()"
.br
.ti -1c
.RI "void \fBHiEasyX::OnSize\fP (int indexWnd)"
.br
.ti -1c
.RI "void \fBHiEasyX::OnTray\fP (int indexWnd, LPARAM lParam)"
.br
.ti -1c
.RI "void \fBHiEasyX::OnTaskBarCreated\fP (int indexWnd)"
.br
.ti -1c
.RI "void \fBHiEasyX::RegisterExMessage\fP (int indexWnd, UINT msg, WPARAM wParam, LPARAM lParam)"
.br
.ti -1c
.RI "void \fBHiEasyX::OnPaint\fP (int indexWnd, HWND hWnd)"
.br
.ti -1c
.RI "void \fBHiEasyX::OnMove\fP (HWND hWnd)"
.br
.ti -1c
.RI "void \fBHiEasyX::OnDestroy\fP (int indexWnd, WPARAM wParam)"
.br
.ti -1c
.RI "HWND \fBHiEasyX::OnSysCtrlCreate\fP (int indexWnd, WPARAM wParam, LPARAM lParam)"
.br
.ti -1c
.RI "LRESULT \fBHiEasyX::SysCtrlProc\fP (int indexWnd, UINT msg, WPARAM wParam, LPARAM lParam, bool &bRet)"
.br
.ti -1c
.RI "void \fBHiEasyX::OnCreate\fP (int indexWnd, HWND hWnd, LPARAM lParam)"
.br
.ti -1c
.RI "LRESULT CALLBACK \fBHiEasyX::WndProc\fP (HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)"
.br
.ti -1c
.RI "void \fBHiEasyX::RegisterWndClass\fP ()"
.br
.ti -1c
.RI "EasyWindow & \fBHiEasyX::InitWindowStruct\fP (EasyWindow &wnd, HWND hParent, int w, int h, WNDPROC WindowProcess)"
.br
.ti -1c
.RI "void \fBHiEasyX::InitWindow\fP (int w, int h, int flag, LPCTSTR lpszWndTitle, WNDPROC WindowProcess, HWND hParent, int *nDoneFlag, HWND *hWnd)"
.br
.ti -1c
.RI "HWND \fBHiEasyX::initgraph_win32\fP (int w, int h, int flag, LPCTSTR lpszWndTitle, WNDPROC WindowProcess, HWND hParent)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "WNDCLASSEX \fBHiEasyX::g_WndClassEx\fP"
.br
.ti -1c
.RI "wchar_t \fBHiEasyX::g_lpszClassName\fP [] = L'HiEasyX'"
.br
.ti -1c
.RI "\fBScreenSize\fP \fBHiEasyX::g_screenSize\fP"
.br
.ti -1c
.RI "HWND \fBHiEasyX::g_hConsole\fP"
.br
.ti -1c
.RI "HINSTANCE \fBHiEasyX::g_hInstance\fP = GetModuleHandle(0)"
.br
.ti -1c
.RI "std::vector< EasyWindow > \fBHiEasyX::g_vecWindows\fP"
.br
.ti -1c
.RI "int \fBHiEasyX::g_nFocusWindowIndex\fP = \fBNO_WINDOW_INDEX\fP"
.br
.ti -1c
.RI "const int \fBHiEasyX::g_nTypesNum\fP = 4"
.br
.ti -1c
.RI "BYTE \fBHiEasyX::g_pMsgTypes\fP [g_nTypesNum]"
.br
.ti -1c
.RI "bool \fBHiEasyX::g_isInTask\fP = false"
.br
.ti -1c
.RI "HICON \fBHiEasyX::g_hIconDefault\fP"
.br
.ti -1c
.RI "int \fBHiEasyX::g_nCustomIcon\fP = 0"
.br
.ti -1c
.RI "int \fBHiEasyX::g_nCustomIconSm\fP = 0"
.br
.ti -1c
.RI "HICON \fBHiEasyX::g_hCustomIcon\fP"
.br
.ti -1c
.RI "HICON \fBHiEasyX::g_hCustomIconSm\fP"
.br
.ti -1c
.RI "bool \fBHiEasyX::g_isPreStyle\fP = false"
.br
.ti -1c
.RI "bool \fBHiEasyX::g_isPrePos\fP = false"
.br
.ti -1c
.RI "long \fBHiEasyX::g_lPreStyle\fP"
.br
.ti -1c
.RI "POINT \fBHiEasyX::g_pPrePos\fP"
.br
.ti -1c
.RI "DrawMode \fBHiEasyX::g_fDrawMode\fP = DM_Normal"
.br
.ti -1c
.RI "UINT \fBHiEasyX::g_uWM_TASKBARCREATED\fP"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define MSG_RESERVE_SIZE   100"

.PP
Definition at line 11 of file HiWindow\&.cpp\&.
.SS "#define SYSCTRL_RESERVE_SIZE   100"

.PP
Definition at line 14 of file HiWindow\&.cpp\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for HiEasyX from the source code\&.
