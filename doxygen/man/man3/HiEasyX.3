.TH "HiEasyX" 3 "Sat Aug 13 2022" "Version Ver0.2(alpha)" "HiEasyX" \" -*- nroff -*-
.ad l
.nh
.SH NAME
HiEasyX
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBButton\fP"
.br
.ti -1c
.RI "class \fBCanvas\fP"
.br
.ti -1c
.RI "class \fBContainer\fP"
.br
.ti -1c
.RI "class \fBControlBase\fP"
.br
.ti -1c
.RI "class \fBDrawingProperty\fP"
.br
.ti -1c
.RI "struct \fBEasyWindow\fP"
.br
.ti -1c
.RI "class \fBGif\fP"
.br
.ti -1c
.RI "class \fBImageBlock\fP"
.br
.ti -1c
.RI "class \fBLayer\fP"
.br
.ti -1c
.RI "class \fBMouseDrag\fP"
.br
.ti -1c
.RI "class \fBMusicMCI\fP"
.br
.ti -1c
.RI "class \fBPage\fP"
.br
.ti -1c
.RI "class \fBProgressCtrl\fP"
.br
.ti -1c
.RI "class \fBScene\fP"
.br
.ti -1c
.RI "class \fBScrollBar\fP"
.br
.ti -1c
.RI "class \fBStatic\fP"
.br
.ti -1c
.RI "class \fBSysButton\fP"
.br
.ti -1c
.RI "class \fBSysCheckBox\fP"
.br
.ti -1c
.RI "class \fBSysComboBox\fP"
.br
.ti -1c
.RI "class \fBSysControlBase\fP"
.br
.ti -1c
.RI "class \fBSysEdit\fP"
.br
.ti -1c
.RI "class \fBSysGroup\fP"
.br
.ti -1c
.RI "class \fBSysGroupBox\fP"
.br
.ti -1c
.RI "class \fBSysRadioButton\fP"
.br
.ti -1c
.RI "class \fBSysStatic\fP"
.br
.ti -1c
.RI "class \fBWindow\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef void(* \fBMESSAGE_PROC_FUNC\fP) (\fBControlBase\fP *_Ctrl, int _MsgId, ExMessage _ExMsg)"
.br
.ti -1c
.RI "typedef void(* \fBMESSAGE_PROC_FUNC_CLASS\fP) (void *_This, \fBControlBase\fP *_Ctrl, int _MsgId, ExMessage _ExMsg)"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBLayerOrder\fP { \fBLAYERORDER_BOTTOM_MOST\fP, \fBLAYERORDER_BOTTOM\fP, \fBLAYERORDER_NORMAL\fP, \fBLAYERORDER_TOP\fP, \fBLAYERORDER_TOP_MOST\fP }"
.br
.ti -1c
.RI "enum \fBCtrlMessage\fP { \fBCM_OTHER\fP, \fBCM_HOVER\fP, \fBCM_HOVER_OVER\fP, \fBCM_PRESS\fP, \fBCM_PRESS_OVER\fP, \fBCM_CLICK\fP, \fBCM_DOUBLE_CLICK\fP, \fBCM_FOCUS\fP, \fBCM_FOCUS_OVER\fP }"
.br
.ti -1c
.RI "enum \fBSysControlType\fP { \fBSCT_Unknown\fP, \fBSCT_Group\fP, \fBSCT_GroupBox\fP, \fBSCT_Static\fP, \fBSCT_Button\fP, \fBSCT_CheckBox\fP, \fBSCT_RadioButton\fP, \fBSCT_Edit\fP, \fBSCT_ComboBox\fP }"
.br
.ti -1c
.RI "enum \fBDrawMode\fP { \fBDM_Real\fP, \fBDM_Normal\fP, \fBDM_Fast\fP, \fBDM_VeryFast\fP, \fBDM_Fastest\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "COLORREF \fBMixAlphaColor\fP (COLORREF cDst, COLORREF cSrc, bool isCalculated, BYTE alpha)"
.br
.ti -1c
.RI "void \fBCopyImage_Alpha\fP (int x, int y, DWORD *pDst, int wDst, int hDst, DWORD *pSrc, int wSrc, int hSrc, RECT crop, BYTE alpha, bool bUseSrcAlpha, bool isCalculated)"
.br
.ti -1c
.RI "IMAGE \fBRotateImage_Alpha\fP (IMAGE *pImg, double radian, COLORREF bkcolor)"
.br
.ti -1c
.RI "IMAGE \fBZoomImage_Alpha\fP (IMAGE *srcimg, int width, int height)"
.br
.ti -1c
.RI "IMAGE \fBZoomImage_Win32_Alpha\fP (IMAGE *pImg, int width, int height)"
.br
.ti -1c
.RI "void \fBDelayFPS\fP (int fps, bool wait_long)"
.br
.ti -1c
.RI "DWORD * \fBGetIconImageBuffer\fP ()"
.br
.ti -1c
.RI "IMAGE * \fBGetIconImage\fP ()"
.br
.ti -1c
.RI "void \fBRenderStartScene\fP ()"
.br
.ti -1c
.RI "int \fBAllocID\fP ()"
.br
.ti -1c
.RI "bool \fBisValidWindowIndex\fP (int index)"
.br
.ti -1c
.RI "bool \fBisFocusWindowExisted\fP ()"
.br
.ti -1c
.RI "\fBEasyWindow\fP & \fBGetFocusWindow\fP ()"
.br
.ti -1c
.RI "int \fBGetWindowIndex\fP (HWND hWnd)"
.br
.ti -1c
.RI "bool \fBisAnyWindow\fP ()"
.br
.ti -1c
.RI "bool \fBisAliveWindow\fP (HWND hWnd)"
.br
.ti -1c
.RI "bool \fBisAliveWindow\fP (int index)"
.br
.ti -1c
.RI "void \fBWaitForProcessing\fP (int index)"
.br
.ti -1c
.RI "void \fBFlushDrawingToWnd\fP (IMAGE *pImg, HWND hWnd)"
.br
.ti -1c
.RI "void \fBWaitForTask\fP (HWND hWnd)"
.br
.ti -1c
.RI "void \fBFreeWindow\fP (int index)"
.br
.ti -1c
.RI "void \fBclosegraph_win32\fP (int index)"
.br
.ti -1c
.RI "void \fBclosegraph_win32\fP (HWND hWnd)"
.br
.ti -1c
.RI "void \fBSetWndProcFunc\fP (HWND hWnd, WNDPROC WindowProcess)"
.br
.ti -1c
.RI "IMAGE * \fBGetWindowImage\fP (HWND hWnd)"
.br
.ti -1c
.RI "\fBCanvas\fP * \fBGetWindowCanvas\fP (HWND hWnd)"
.br
.ti -1c
.RI "void \fBBindWindowCanvas\fP (\fBCanvas\fP *pCanvas, HWND hWnd)"
.br
.ti -1c
.RI "void \fBinit_end\fP (HWND hWnd)"
.br
.ti -1c
.RI "void \fBAutoExit\fP ()"
.br
.ti -1c
.RI "HWND \fBGetHWnd_win32\fP ()"
.br
.ti -1c
.RI "\fBEasyWindow\fP \fBGetWorkingWindow\fP ()"
.br
.ti -1c
.RI "bool \fBSetWorkingWindow\fP (HWND hWnd)"
.br
.ti -1c
.RI "void \fBQuickDraw\fP (UINT nSkipPixels, HWND hWnd)"
.br
.ti -1c
.RI "\fBDrawMode\fP \fBGetDrawMode\fP ()"
.br
.ti -1c
.RI "void \fBSetDrawMode\fP (\fBDrawMode\fP mode)"
.br
.ti -1c
.RI "void \fBSendUserRedrawMsg\fP (HWND hWnd)"
.br
.ti -1c
.RI "void \fBEnforceRedraw\fP (HWND hWnd)"
.br
.ti -1c
.RI "void \fBFlushDrawing\fP (int index)"
.br
.ti -1c
.RI "bool \fBBeginTask\fP ()"
.br
.ti -1c
.RI "void \fBEndTask\fP (bool flush)"
.br
.ti -1c
.RI "bool \fBisInTask\fP (HWND hWnd)"
.br
.ti -1c
.RI "void \fBResizeWindowImage\fP (int index, RECT rct)"
.br
.ti -1c
.RI "void \fBShowTray\fP (NOTIFYICONDATA *nid)"
.br
.ti -1c
.RI "void \fBCreateTray\fP (LPCTSTR lpszTrayName, HWND hWnd)"
.br
.ti -1c
.RI "void \fBDeleteTray\fP (HWND hWnd)"
.br
.ti -1c
.RI "void \fBSetTrayMenu\fP (HMENU hMenu, HWND hWnd)"
.br
.ti -1c
.RI "void \fBSetTrayMenuProcFunc\fP (void(*pFunc)(UINT), HWND hWnd)"
.br
.ti -1c
.RI "bool \fBisWindowSizeChanged\fP (HWND hWnd)"
.br
.ti -1c
.RI "bool \fBGetCustomIconState\fP ()"
.br
.ti -1c
.RI "void \fBSetCustomIcon\fP (int nIcon, int nIconSm)"
.br
.ti -1c
.RI "std::vector< ExMessage > & \fBGetMsgVector\fP (HWND hWnd)"
.br
.ti -1c
.RI "void \fBRemoveMessage\fP (HWND hWnd)"
.br
.ti -1c
.RI "void \fBClearMessage\fP (BYTE filter, HWND hWnd)"
.br
.ti -1c
.RI "bool \fBisNewMessage\fP (BYTE filter, HWND hWnd)"
.br
.ti -1c
.RI "ExMessage \fBGetNextMessage\fP (BYTE filter, HWND hWnd)"
.br
.ti -1c
.RI "ExMessage \fBgetmessage_win32\fP (BYTE filter, HWND hWnd)"
.br
.ti -1c
.RI "void \fBgetmessage_win32\fP (ExMessage *msg, BYTE filter, HWND hWnd)"
.br
.ti -1c
.RI "bool \fBpeekmessage_win32\fP (ExMessage *msg, BYTE filter, bool removemsg, HWND hWnd)"
.br
.ti -1c
.RI "void \fBflushmessage_win32\fP (BYTE filter, HWND hWnd)"
.br
.ti -1c
.RI "bool \fBMouseHit_win32\fP (HWND hWnd)"
.br
.ti -1c
.RI "MOUSEMSG \fBGetMouseMsg_win32\fP (HWND hWnd)"
.br
.ti -1c
.RI "bool \fBPeekMouseMsg_win32\fP (MOUSEMSG *pMsg, bool bRemoveMsg, HWND hWnd)"
.br
.ti -1c
.RI "void \fBFlushMouseMsgBuffer_win32\fP (HWND hWnd)"
.br
.ti -1c
.RI "ExMessage \fBTo_ExMessage\fP (MOUSEMSG msg)"
.br
.ti -1c
.RI "MOUSEMSG \fBTo_MouseMsg\fP (ExMessage msgEx)"
.br
.ti -1c
.RI "void \fBPreSetWindowStyle\fP (long lStyle)"
.br
.ti -1c
.RI "void \fBPreSetWindowPos\fP (int x, int y)"
.br
.ti -1c
.RI "int \fBSetWindowStyle\fP (long lNewStyle, HWND hWnd)"
.br
.ti -1c
.RI "int \fBSetWindowExStyle\fP (long lNewExStyle, HWND hWnd)"
.br
.ti -1c
.RI "POINT \fBGetWindowPos\fP (HWND hWnd)"
.br
.ti -1c
.RI "SIZE \fBGetWindowSize\fP (HWND hWnd)"
.br
.ti -1c
.RI "void \fBMoveWindow\fP (int x, int y, HWND hWnd)"
.br
.ti -1c
.RI "void \fBMoveWindowRel\fP (int dx, int dy, HWND hWnd)"
.br
.ti -1c
.RI "void \fBResizeWindow\fP (int w, int h, HWND hWnd)"
.br
.ti -1c
.RI "HICON \fBGetDefaultAppIcon\fP ()"
.br
.ti -1c
.RI "void \fBOnSize\fP (int indexWnd)"
.br
.ti -1c
.RI "void \fBOnTray\fP (int indexWnd, LPARAM lParam)"
.br
.ti -1c
.RI "void \fBOnTaskBarCreated\fP (int indexWnd)"
.br
.ti -1c
.RI "void \fBRegisterExMessage\fP (int indexWnd, UINT msg, WPARAM wParam, LPARAM lParam)"
.br
.ti -1c
.RI "void \fBOnPaint\fP (int indexWnd, HWND hWnd)"
.br
.ti -1c
.RI "void \fBOnMove\fP (HWND hWnd)"
.br
.ti -1c
.RI "void \fBOnDestroy\fP (int indexWnd, WPARAM wParam)"
.br
.ti -1c
.RI "HWND \fBOnSysCtrlCreate\fP (int indexWnd, WPARAM wParam, LPARAM lParam)"
.br
.ti -1c
.RI "LRESULT \fBSysCtrlProc\fP (int indexWnd, UINT msg, WPARAM wParam, LPARAM lParam, bool &bRet)"
.br
.ti -1c
.RI "void \fBOnCreate\fP (int indexWnd, HWND hWnd, LPARAM lParam)"
.br
.ti -1c
.RI "LRESULT CALLBACK \fBWndProc\fP (HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)"
.br
.ti -1c
.RI "void \fBRegisterWndClass\fP ()"
.br
.ti -1c
.RI "\fBEasyWindow\fP & \fBInitWindowStruct\fP (\fBEasyWindow\fP &wnd, HWND hParent, int w, int h, WNDPROC WindowProcess)"
.br
.ti -1c
.RI "void \fBInitWindow\fP (int w, int h, int flag, LPCTSTR lpszWndTitle, WNDPROC WindowProcess, HWND hParent, int *nDoneFlag, HWND *hWnd)"
.br
.ti -1c
.RI "HWND \fBinitgraph_win32\fP (int w, int h, int flag, LPCTSTR lpszWndTitle, WNDPROC WindowProcess, HWND hParent)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "clock_t \fBtRecord\fP = 0"
.br
.ti -1c
.RI "WNDCLASSEX \fBg_WndClassEx\fP"
.br
.ti -1c
.RI "wchar_t \fBg_lpszClassName\fP [] = L'HiEasyX'"
.br
.ti -1c
.RI "\fBScreenSize\fP \fBg_screenSize\fP"
.br
.ti -1c
.RI "HWND \fBg_hConsole\fP"
.br
.ti -1c
.RI "HINSTANCE \fBg_hInstance\fP = GetModuleHandle(0)"
.br
.ti -1c
.RI "std::vector< \fBEasyWindow\fP > \fBg_vecWindows\fP"
.br
.ti -1c
.RI "int \fBg_nFocusWindowIndex\fP = \fBNO_WINDOW_INDEX\fP"
.br
.ti -1c
.RI "const int \fBg_nTypesNum\fP = 4"
.br
.ti -1c
.RI "BYTE \fBg_pMsgTypes\fP [\fBg_nTypesNum\fP]"
.br
.ti -1c
.RI "bool \fBg_isInTask\fP = false"
.br
.ti -1c
.RI "HICON \fBg_hIconDefault\fP"
.br
.ti -1c
.RI "int \fBg_nCustomIcon\fP = 0"
.br
.ti -1c
.RI "int \fBg_nCustomIconSm\fP = 0"
.br
.ti -1c
.RI "HICON \fBg_hCustomIcon\fP"
.br
.ti -1c
.RI "HICON \fBg_hCustomIconSm\fP"
.br
.ti -1c
.RI "bool \fBg_isPreStyle\fP = false"
.br
.ti -1c
.RI "bool \fBg_isPrePos\fP = false"
.br
.ti -1c
.RI "long \fBg_lPreStyle\fP"
.br
.ti -1c
.RI "POINT \fBg_pPrePos\fP"
.br
.ti -1c
.RI "\fBDrawMode\fP \fBg_fDrawMode\fP = \fBDM_Normal\fP"
.br
.ti -1c
.RI "UINT \fBg_uWM_TASKBARCREATED\fP"
.br
.in -1c
.SH "Typedef Documentation"
.PP 
.SS "typedef void(* HiEasyX::MESSAGE_PROC_FUNC) (\fBControlBase\fP *_Ctrl, int _MsgId, ExMessage _ExMsg)"

.PP
Definition at line 38 of file ControlBase\&.h\&.
.SS "typedef void(* HiEasyX::MESSAGE_PROC_FUNC_CLASS) (void *_This, \fBControlBase\fP *_Ctrl, int _MsgId, ExMessage _ExMsg)"

.PP
Definition at line 41 of file ControlBase\&.h\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBHiEasyX::CtrlMessage\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fICM_OTHER \fP\fP
.TP
\fB\fICM_HOVER \fP\fP
.TP
\fB\fICM_HOVER_OVER \fP\fP
.TP
\fB\fICM_PRESS \fP\fP
.TP
\fB\fICM_PRESS_OVER \fP\fP
.TP
\fB\fICM_CLICK \fP\fP
.TP
\fB\fICM_DOUBLE_CLICK \fP\fP
.TP
\fB\fICM_FOCUS \fP\fP
.TP
\fB\fICM_FOCUS_OVER \fP\fP
.PP
Definition at line 18 of file ControlBase\&.h\&.
.SS "enum \fBHiEasyX::DrawMode\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIDM_Real \fP\fP
.TP
\fB\fIDM_Normal \fP\fP
.TP
\fB\fIDM_Fast \fP\fP
.TP
\fB\fIDM_VeryFast \fP\fP
.TP
\fB\fIDM_Fastest \fP\fP
.PP
Definition at line 129 of file HiWindow\&.h\&.
.SS "enum \fBHiEasyX::LayerOrder\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILAYERORDER_BOTTOM_MOST \fP\fP
.TP
\fB\fILAYERORDER_BOTTOM \fP\fP
.TP
\fB\fILAYERORDER_NORMAL \fP\fP
.TP
\fB\fILAYERORDER_TOP \fP\fP
.TP
\fB\fILAYERORDER_TOP_MOST \fP\fP
.PP
Definition at line 568 of file HiCanvas\&.h\&.
.SS "enum \fBHiEasyX::SysControlType\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISCT_Unknown \fP\fP
.TP
\fB\fISCT_Group \fP\fP
.TP
\fB\fISCT_GroupBox \fP\fP
.TP
\fB\fISCT_Static \fP\fP
.TP
\fB\fISCT_Button \fP\fP
.TP
\fB\fISCT_CheckBox \fP\fP
.TP
\fB\fISCT_RadioButton \fP\fP
.TP
\fB\fISCT_Edit \fP\fP
.TP
\fB\fISCT_ComboBox \fP\fP
.PP
Definition at line 17 of file SysControlBase\&.h\&.
.SH "Function Documentation"
.PP 
.SS "int HiEasyX::AllocID ()"

.PP
Definition at line 162 of file SysControlBase\&.cpp\&.
.SS "void HiEasyX::AutoExit ()"

.PP
Definition at line 314 of file HiWindow\&.cpp\&.
.SS "bool HiEasyX::BeginTask ()"

.PP
Definition at line 453 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::BindWindowCanvas (\fBCanvas\fP * pCanvas, HWND hWnd)"

.PP
Definition at line 291 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::ClearMessage (BYTE filter, HWND hWnd)"

.PP
Definition at line 624 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::closegraph_win32 (HWND hWnd)"

.PP
Definition at line 235 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::closegraph_win32 (int index)"

.PP
Definition at line 199 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::CopyImage_Alpha (int x, int y, DWORD * pDst, int wDst, int hDst, DWORD * pSrc, int wSrc, int hSrc, RECT crop, BYTE alpha, bool bUseSrcAlpha, bool isCalculated)"

.PP
Definition at line 23 of file HiCanvas\&.cpp\&.
.SS "void HiEasyX::CreateTray (LPCTSTR lpszTrayName, HWND hWnd)"

.PP
Definition at line 498 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::DelayFPS (int fps, bool wait_long)"

.PP
Definition at line 11 of file HiFPS\&.cpp\&.
.SS "void HiEasyX::DeleteTray (HWND hWnd)"

.PP
Definition at line 521 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::EndTask (bool flush)"

.PP
Definition at line 464 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::EnforceRedraw (HWND hWnd)"

.PP
Definition at line 382 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::FlushDrawing (int index)"

.PP
Definition at line 416 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::FlushDrawingToWnd (IMAGE * pImg, HWND hWnd)"

.PP
Definition at line 148 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::flushmessage_win32 (BYTE filter, HWND hWnd)"

.PP
Definition at line 687 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::FlushMouseMsgBuffer_win32 (HWND hWnd)"

.PP
Definition at line 711 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::FreeWindow (int index)"

.PP
Definition at line 171 of file HiWindow\&.cpp\&.
.SS "bool HiEasyX::GetCustomIconState ()"

.PP
Definition at line 587 of file HiWindow\&.cpp\&.
.SS "HICON HiEasyX::GetDefaultAppIcon ()"

.PP
Definition at line 806 of file HiWindow\&.cpp\&.
.SS "\fBDrawMode\fP HiEasyX::GetDrawMode ()"

.PP
Definition at line 366 of file HiWindow\&.cpp\&.
.SS "\fBEasyWindow\fP& HiEasyX::GetFocusWindow ()"

.PP
Definition at line 67 of file HiWindow\&.cpp\&.
.SS "HWND HiEasyX::GetHWnd_win32 ()"

.PP
Definition at line 322 of file HiWindow\&.cpp\&.
.SS "IMAGE * HiEasyX::GetIconImage ()"

.PP
Definition at line 75 of file HiIcon\&.cpp\&.
.SS "DWORD * HiEasyX::GetIconImageBuffer ()"

.PP
Definition at line 70 of file HiIcon\&.cpp\&.
.SS "ExMessage HiEasyX::getmessage_win32 (BYTE filter, HWND hWnd)"

.PP
Definition at line 662 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::getmessage_win32 (ExMessage * msg, BYTE filter, HWND hWnd)"

.PP
Definition at line 670 of file HiWindow\&.cpp\&.
.SS "MOUSEMSG HiEasyX::GetMouseMsg_win32 (HWND hWnd)"

.PP
Definition at line 697 of file HiWindow\&.cpp\&.
.SS "std::vector<ExMessage>& HiEasyX::GetMsgVector (HWND hWnd)"

.PP
Definition at line 601 of file HiWindow\&.cpp\&.
.SS "ExMessage HiEasyX::GetNextMessage (BYTE filter, HWND hWnd)"

.PP
Definition at line 643 of file HiWindow\&.cpp\&.
.SS "\fBCanvas\fP * HiEasyX::GetWindowCanvas (HWND hWnd)"

.PP
Definition at line 278 of file HiWindow\&.cpp\&.
.SS "IMAGE * HiEasyX::GetWindowImage (HWND hWnd)"

.PP
Definition at line 265 of file HiWindow\&.cpp\&.
.SS "int HiEasyX::GetWindowIndex (HWND hWnd)"

.PP
Definition at line 84 of file HiWindow\&.cpp\&.
.SS "POINT HiEasyX::GetWindowPos (HWND hWnd)"

.PP
Definition at line 770 of file HiWindow\&.cpp\&.
.SS "SIZE HiEasyX::GetWindowSize (HWND hWnd)"

.PP
Definition at line 778 of file HiWindow\&.cpp\&.
.SS "\fBEasyWindow\fP HiEasyX::GetWorkingWindow ()"

.PP
Definition at line 327 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::init_end (HWND hWnd)"

.PP
Definition at line 301 of file HiWindow\&.cpp\&.
.SS "HWND HiEasyX::initgraph_win32 (int w, int h, int flag, LPCTSTR lpszWndTitle, WNDPROC WindowProcess, HWND hParent)"

.PP
Definition at line 1483 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::InitWindow (int w, int h, int flag, LPCTSTR lpszWndTitle, WNDPROC WindowProcess, HWND hParent, int * nDoneFlag, HWND * hWnd)"

.PP
Definition at line 1309 of file HiWindow\&.cpp\&.
.SS "\fBEasyWindow\fP& HiEasyX::InitWindowStruct (\fBEasyWindow\fP & wnd, HWND hParent, int w, int h, WNDPROC WindowProcess)"

.PP
Definition at line 1286 of file HiWindow\&.cpp\&.
.SS "bool HiEasyX::isAliveWindow (HWND hWnd)"

.PP
Definition at line 110 of file HiWindow\&.cpp\&.
.SS "bool HiEasyX::isAliveWindow (int index)"

.PP
Definition at line 130 of file HiWindow\&.cpp\&.
.SS "bool HiEasyX::isAnyWindow ()"

.PP
Definition at line 102 of file HiWindow\&.cpp\&.
.SS "bool HiEasyX::isFocusWindowExisted ()"

.PP
Definition at line 61 of file HiWindow\&.cpp\&.
.SS "bool HiEasyX::isInTask (HWND hWnd)"

.PP
Definition at line 477 of file HiWindow\&.cpp\&.
.SS "bool HiEasyX::isNewMessage (BYTE filter, HWND hWnd)"

.PP
Definition at line 633 of file HiWindow\&.cpp\&.
.SS "bool HiEasyX::isValidWindowIndex (int index)"

.PP
Definition at line 55 of file HiWindow\&.cpp\&.
.SS "bool HiEasyX::isWindowSizeChanged (HWND hWnd)"

.PP
Definition at line 572 of file HiWindow\&.cpp\&.
.SS "COLORREF HiEasyX::MixAlphaColor (COLORREF cDst, COLORREF cSrc, bool isCalculated, BYTE alpha)"

.PP
Definition at line 8 of file HiCanvas\&.cpp\&.
.SS "bool HiEasyX::MouseHit_win32 (HWND hWnd)"

.PP
Definition at line 692 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::MoveWindow (int x, int y, HWND hWnd)"

.PP
Definition at line 786 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::MoveWindowRel (int dx, int dy, HWND hWnd)"

.PP
Definition at line 792 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::OnCreate (int indexWnd, HWND hWnd, LPARAM lParam)"

.PP
Definition at line 1110 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::OnDestroy (int indexWnd, WPARAM wParam)"

.PP
Definition at line 1021 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::OnMove (HWND hWnd)"

.PP
Definition at line 1006 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::OnPaint (int indexWnd, HWND hWnd)"

.PP
Definition at line 1000 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::OnSize (int indexWnd)"

.PP
Definition at line 819 of file HiWindow\&.cpp\&.
.SS "HWND HiEasyX::OnSysCtrlCreate (int indexWnd, WPARAM wParam, LPARAM lParam)"

.PP
Definition at line 1033 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::OnTaskBarCreated (int indexWnd)"

.PP
Definition at line 875 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::OnTray (int indexWnd, LPARAM lParam)"

.PP
Definition at line 837 of file HiWindow\&.cpp\&.
.SS "bool HiEasyX::peekmessage_win32 (ExMessage * msg, BYTE filter, bool removemsg, HWND hWnd)"

.PP
Definition at line 676 of file HiWindow\&.cpp\&.
.SS "bool HiEasyX::PeekMouseMsg_win32 (MOUSEMSG * pMsg, bool bRemoveMsg, HWND hWnd)"

.PP
Definition at line 703 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::PreSetWindowPos (int x, int y)"

.PP
Definition at line 752 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::PreSetWindowStyle (long lStyle)"

.PP
Definition at line 746 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::QuickDraw (UINT nSkipPixels, HWND hWnd)"

.PP
Definition at line 359 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::RegisterExMessage (int indexWnd, UINT msg, WPARAM wParam, LPARAM lParam)"

.PP
Definition at line 884 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::RegisterWndClass ()"

.PP
Definition at line 1256 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::RemoveMessage (HWND hWnd)"

.PP
Definition at line 617 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::RenderStartScene ()"

.PP
Definition at line 107 of file HiStart\&.cpp\&.
.SS "void HiEasyX::ResizeWindow (int w, int h, HWND hWnd)"

.PP
Definition at line 799 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::ResizeWindowImage (int index, RECT rct)"

.PP
Definition at line 483 of file HiWindow\&.cpp\&.
.SS "IMAGE HiEasyX::RotateImage_Alpha (IMAGE * pImg, double radian, COLORREF bkcolor)"

.PP
Definition at line 70 of file HiCanvas\&.cpp\&.
.SS "void HiEasyX::SendUserRedrawMsg (HWND hWnd)"

.PP
Definition at line 377 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::SetCustomIcon (int nIcon, int nIconSm)"

.PP
Definition at line 592 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::SetDrawMode (\fBDrawMode\fP mode)"

.PP
Definition at line 371 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::SetTrayMenu (HMENU hMenu, HWND hWnd)"

.PP
Definition at line 553 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::SetTrayMenuProcFunc (void(*)(UINT) pFunc, HWND hWnd)"

.PP
Definition at line 563 of file HiWindow\&.cpp\&.
.SS "int HiEasyX::SetWindowExStyle (long lNewExStyle, HWND hWnd)"

.PP
Definition at line 764 of file HiWindow\&.cpp\&.
.SS "int HiEasyX::SetWindowStyle (long lNewStyle, HWND hWnd)"

.PP
Definition at line 758 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::SetWndProcFunc (HWND hWnd, WNDPROC WindowProcess)"

.PP
Definition at line 256 of file HiWindow\&.cpp\&.
.SS "bool HiEasyX::SetWorkingWindow (HWND hWnd)"

.PP
Definition at line 332 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::ShowTray (NOTIFYICONDATA * nid)"

.PP
Definition at line 493 of file HiWindow\&.cpp\&.
.SS "LRESULT HiEasyX::SysCtrlProc (int indexWnd, UINT msg, WPARAM wParam, LPARAM lParam, bool & bRet)"

.PP
Definition at line 1055 of file HiWindow\&.cpp\&.
.SS "ExMessage HiEasyX::To_ExMessage (MOUSEMSG msg)"

.PP
Definition at line 716 of file HiWindow\&.cpp\&.
.SS "MOUSEMSG HiEasyX::To_MouseMsg (ExMessage msgEx)"

.PP
Definition at line 731 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::WaitForProcessing (int index)"

.PP
Definition at line 136 of file HiWindow\&.cpp\&.
.SS "void HiEasyX::WaitForTask (HWND hWnd)"

.PP
Definition at line 158 of file HiWindow\&.cpp\&.
.SS "LRESULT CALLBACK HiEasyX::WndProc (HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)"

.PP
Definition at line 1115 of file HiWindow\&.cpp\&.
.SS "IMAGE HiEasyX::ZoomImage_Alpha (IMAGE * srcimg, int width, int height)"

.PP
Definition at line 117 of file HiCanvas\&.cpp\&.
.SS "IMAGE HiEasyX::ZoomImage_Win32_Alpha (IMAGE * pImg, int width, int height)"

.PP
Definition at line 158 of file HiCanvas\&.cpp\&.
.SH "Variable Documentation"
.PP 
.SS "\fBDrawMode\fP HiEasyX::g_fDrawMode = \fBDM_Normal\fP"

.PP
Definition at line 48 of file HiWindow\&.cpp\&.
.SS "HWND HiEasyX::g_hConsole"

.PP
Definition at line 24 of file HiWindow\&.cpp\&.
.SS "HICON HiEasyX::g_hCustomIcon"

.PP
Definition at line 40 of file HiWindow\&.cpp\&.
.SS "HICON HiEasyX::g_hCustomIconSm"

.PP
Definition at line 41 of file HiWindow\&.cpp\&.
.SS "HICON HiEasyX::g_hIconDefault"

.PP
Definition at line 37 of file HiWindow\&.cpp\&.
.SS "HINSTANCE HiEasyX::g_hInstance = GetModuleHandle(0)"

.PP
Definition at line 25 of file HiWindow\&.cpp\&.
.SS "bool HiEasyX::g_isInTask = false"

.PP
Definition at line 35 of file HiWindow\&.cpp\&.
.SS "bool HiEasyX::g_isPrePos = false"

.PP
Definition at line 44 of file HiWindow\&.cpp\&.
.SS "bool HiEasyX::g_isPreStyle = false"

.PP
Definition at line 43 of file HiWindow\&.cpp\&.
.SS "long HiEasyX::g_lPreStyle"

.PP
Definition at line 45 of file HiWindow\&.cpp\&.
.SS "wchar_t HiEasyX::g_lpszClassName[] = L'HiEasyX'"

.PP
Definition at line 22 of file HiWindow\&.cpp\&.
.SS "int HiEasyX::g_nCustomIcon = 0"

.PP
Definition at line 38 of file HiWindow\&.cpp\&.
.SS "int HiEasyX::g_nCustomIconSm = 0"

.PP
Definition at line 39 of file HiWindow\&.cpp\&.
.SS "int HiEasyX::g_nFocusWindowIndex = \fBNO_WINDOW_INDEX\fP"

.PP
Definition at line 28 of file HiWindow\&.cpp\&.
.SS "const int HiEasyX::g_nTypesNum = 4"

.PP
Definition at line 30 of file HiWindow\&.cpp\&.
.SS "BYTE HiEasyX::g_pMsgTypes[\fBg_nTypesNum\fP]"
\fBInitial value:\fP
.PP
.nf
= {              
        EM_MOUSE, EM_KEY, EM_CHAR, EM_WINDOW
    }
.fi
.PP
Definition at line 31 of file HiWindow\&.cpp\&.
.SS "POINT HiEasyX::g_pPrePos"

.PP
Definition at line 46 of file HiWindow\&.cpp\&.
.SS "\fBScreenSize\fP HiEasyX::g_screenSize"

.PP
Definition at line 23 of file HiWindow\&.cpp\&.
.SS "UINT HiEasyX::g_uWM_TASKBARCREATED"

.PP
Definition at line 50 of file HiWindow\&.cpp\&.
.SS "std::vector<\fBEasyWindow\fP> HiEasyX::g_vecWindows"

.PP
Definition at line 27 of file HiWindow\&.cpp\&.
.SS "WNDCLASSEX HiEasyX::g_WndClassEx"

.PP
Definition at line 21 of file HiWindow\&.cpp\&.
.SS "clock_t HiEasyX::tRecord = 0"

.PP
Definition at line 9 of file HiFPS\&.cpp\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for HiEasyX from the source code\&.
