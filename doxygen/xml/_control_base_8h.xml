<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="_control_base_8h" kind="file" language="C++">
    <compoundname>ControlBase.h</compoundname>
    <includes refid="_hi_container_8h" local="yes">../HiContainer.h</includes>
    <includes refid="_hi_macro_8h" local="yes">../HiMacro.h</includes>
    <includes refid="_hi_func_8h" local="yes">../HiFunc.h</includes>
    <includes refid="_hi_canvas_8h" local="yes">../HiCanvas.h</includes>
    <includedby refid="_button_8h" local="yes">E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiGUI/Button.h</includedby>
    <includedby refid="_control_base_8cpp" local="yes">E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiGUI/ControlBase.cpp</includedby>
    <includedby refid="_page_8h" local="yes">E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiGUI/Page.h</includedby>
    <includedby refid="_static_8h" local="yes">E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiGUI/Static.h</includedby>
    <includedby refid="_progress_ctrl_8h" local="yes">E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiGUI/ProgressCtrl.h</includedby>
    <incdepgraph>
      <node id="11">
        <label>list</label>
      </node>
      <node id="5">
        <label>graphics.h</label>
      </node>
      <node id="3">
        <label>Windows.h</label>
      </node>
      <node id="12">
        <label>string</label>
      </node>
      <node id="7">
        <label>WinUser.h</label>
      </node>
      <node id="2">
        <label>../HiContainer.h</label>
        <link refid="_hi_container_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>HiDrawingProperty.h</label>
        <link refid="_hi_drawing_property_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>vector</label>
      </node>
      <node id="6">
        <label>../HiFunc.h</label>
        <link refid="_hi_func_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>../HiCanvas.h</label>
        <link refid="_hi_canvas_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>../HiMacro.h</label>
        <link refid="_hi_macro_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiGUI/ControlBase.h</label>
        <link refid="_control_base_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="7">
        <label>E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiGUI/ScrollBar.h</label>
        <link refid="_scroll_bar_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiGUI/Static.h</label>
        <link refid="_static_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>E:/_MYC/_VS_Project/HiEasyX/HiEasyX/main.cpp</label>
        <link refid="main_8cpp"/>
      </node>
      <node id="11">
        <label>E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiGUI/Page.cpp</label>
        <link refid="_page_8cpp"/>
      </node>
      <node id="5">
        <label>E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX.h</label>
        <link refid="_hi_easy_x_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiGUI/HiGUI.h</label>
        <link refid="_hi_g_u_i_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiGUI/ProgressCtrl.h</label>
        <link refid="_progress_ctrl_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiGUI/Button.cpp</label>
        <link refid="_button_8cpp"/>
      </node>
      <node id="15">
        <label>E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiGUI/ProgressCtrl.cpp</label>
        <link refid="_progress_ctrl_8cpp"/>
      </node>
      <node id="9">
        <label>E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiGUI/ControlBase.cpp</label>
        <link refid="_control_base_8cpp"/>
      </node>
      <node id="10">
        <label>E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiGUI/Page.h</label>
        <link refid="_page_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiGUI/Button.h</label>
        <link refid="_button_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiGUI/ScrollBar.cpp</label>
        <link refid="_scroll_bar_8cpp"/>
      </node>
      <node id="1">
        <label>E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiGUI/ControlBase.h</label>
        <link refid="_control_base_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiGUI/Static.cpp</label>
        <link refid="_static_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="class_hi_easy_x_1_1_control_base" prot="public">HiEasyX::ControlBase</innerclass>
    <innernamespace refid="namespace_hi_easy_x">HiEasyX</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>ControlBase.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>HiGUI<sp/>控件分支：控件基础</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../HiContainer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../HiMacro.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../HiFunc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../HiCanvas.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_hi_easy_x" kindref="compound">HiEasyX</ref></highlight></codeline>
<codeline lineno="16"><highlight class="normal">{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>控件消息</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="namespace_hi_easy_x_1a6982c2e2c7378d6c138e2dd0df06650f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="namespace_hi_easy_x_1a6982c2e2c7378d6c138e2dd0df06650f" kindref="member">CtrlMessage</ref></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="20" refid="namespace_hi_easy_x_1a6982c2e2c7378d6c138e2dd0df06650fa8f02522c401802ac86d780bf6589b34b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_hi_easy_x_1a6982c2e2c7378d6c138e2dd0df06650fa8f02522c401802ac86d780bf6589b34b" kindref="member">CM_OTHER</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>未特殊标识的其它消息</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="namespace_hi_easy_x_1a6982c2e2c7378d6c138e2dd0df06650fae96ab5a65044d6eccd1e35b1c172e14b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_hi_easy_x_1a6982c2e2c7378d6c138e2dd0df06650fae96ab5a65044d6eccd1e35b1c172e14b" kindref="member">CM_HOVER</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>悬停</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="namespace_hi_easy_x_1a6982c2e2c7378d6c138e2dd0df06650fa17526370d3cd456cab639a6c8ce2c5f8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_hi_easy_x_1a6982c2e2c7378d6c138e2dd0df06650fa17526370d3cd456cab639a6c8ce2c5f8" kindref="member">CM_HOVER_OVER</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>悬停结束 <sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CM_PRESS,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>按下
<sp/><sp/><sp/><sp/><sp/>CM_PRESS_OVER,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>按下结束
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>CM_CLICK,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>单击
<sp/><sp/><sp/><sp/><sp/>CM_DOUBLE_CLICK,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>双击
<sp/><sp/><sp/><sp/><sp/><sp/>CM_FOCUS,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取焦点
<sp/><sp/><sp/><sp/><sp/><sp/>CM_FOCUS_OVER,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>丢失焦点

<sp/>};

<sp/><sp/><sp/><sp/>class<sp/>ControlBase;

<sp/><sp/><sp/><sp/>//<sp/>控件消息处理函数
<sp/>//<sp/>_Ctrl<sp/><sp/><sp/><sp/>传入控件指针
<sp/><sp/><sp/>//<sp/>_MsgId<sp/><sp/><sp/>传入消息标识代码
<sp/>//<sp/>_ExMsg<sp/><sp/><sp/>传入详细消息（坐标已变换到控件）
<sp/>typedef<sp/>void<sp/>(*MESSAGE_PROC_FUNC)(ControlBase*<sp/>_Ctrl,<sp/>int<sp/>_MsgId,<sp/>ExMessage<sp/>_ExMsg);

<sp/><sp/>//<sp/>支持静态类函数作为控件消息处理函数
<sp/><sp/>typedef<sp/>void<sp/>(*MESSAGE_PROC_FUNC_CLASS)(void*<sp/>_This,<sp/>ControlBase*<sp/>_Ctrl,<sp/>int<sp/>_MsgId,<sp/>ExMessage<sp/>_ExMsg);

<sp/><sp/><sp/>//<sp/>控件基础
<sp/><sp/>class<sp/>ControlBase<sp/>:<sp/>public<sp/>Container
<sp/><sp/><sp/>{
<sp/><sp/>protected:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bEnabled<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否可用
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bVisible<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否可见

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘和渲染标志
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bAutoRedrawWhenReceiveMsg<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>当默认消息处理函数接受到消息时，是否自动标识重绘和渲染
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bRedraw<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标识需要重绘
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bRender<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标识需要渲染
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bClear<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标识需要清空某区域
<sp/><sp/><sp/><sp/><sp/>RECT<sp/>m_rctClear<sp/>=<sp/>{<sp/>0<sp/>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>记录需要清空的区域
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bAlwaysRedrawAndRender<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>总是重绘和渲染（占用更高）

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::wstring<sp/>m_wstrText;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>控件文本

<sp/><sp/><sp/><sp/><sp/>Canvas<sp/>m_canvas;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>画布
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BYTE<sp/>m_alpha<sp/>=<sp/>255;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>透明度
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bUseCanvasAlpha<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否使用画布自身的透明度信息
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isAlphaCalculated<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>画布是否已经计算透明混合颜色

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/>m_cBorder<sp/>=<sp/>MODERN_BORDER_GRAY;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>边框颜色
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/>m_cBackground<sp/>=<sp/>CLASSICGRAY;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>背景色
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/>m_cText<sp/>=<sp/>BLACK;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>文本颜色

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bEnableBorder<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否绘制边框
<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>m_nBorderThickness<sp/>=<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>边框粗细

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bCompleteFirstSetRect<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否已经完成第一次设置区域

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase*<sp/>m_pParent<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>父控件
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::list&lt;ControlBase*&gt;<sp/>m_listChild;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>子控件

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bAutoSizeForChild<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>为子控件自动改变大小以容纳控件

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MESSAGE_PROC_FUNC<sp/>m_funcMessageProc<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>消息处理函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MESSAGE_PROC_FUNC_CLASS<sp/>m_funcMessageProc_Class<sp/>=<sp/>nullptr;<sp/><sp/>//<sp/>若绑定的消息处理函数是静态类函数，则记录其地址
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void*<sp/>m_pCalledClass<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>若绑定的消息处理函数是静态类函数，则记录该类指针

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bHovered<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>鼠标是否悬停
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bPressed<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>鼠标是否按下
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bFocused<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否拥有焦点

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>更新区域消息处理
<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>UpdateRect(RECT<sp/>rctOld)<sp/>override;

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标记需要重绘和渲染
<sp/><sp/><sp/><sp/><sp/>void<sp/>MarkNeedRedrawAndRender();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标记需要清空矩形区域
<sp/><sp/><sp/><sp/><sp/>void<sp/>MarkNeedClearRect(RECT<sp/>rct);

<sp/><sp/><sp/><sp/><sp/>//<sp/>绘制子控件
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>DrawChild();

<sp/><sp/><sp/><sp/><sp/>//<sp/>转换消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>ExMessage&amp;<sp/>TransformMessage(ExMessage&amp;<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>分发消息到用户函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>CallUserMsgProcFunc(int<sp/>msgid,<sp/>ExMessage<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>子控件区域更变
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>ChildRectChanged(ControlBase*<sp/>pChild);

<sp/><sp/><sp/>private:

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Init();

<sp/><sp/>public:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase(std::wstring<sp/>wstrText);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase(int<sp/>x,<sp/>int<sp/>y,<sp/>int<sp/>w<sp/>=<sp/>0,<sp/>int<sp/>h<sp/>=<sp/>0,<sp/>std::wstring<sp/>wstrText<sp/>=<sp/>L&quot;&quot;);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>~ControlBase();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase*<sp/>GetParent()<sp/>{<sp/>return<sp/>m_pParent;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置父控件（内部调用 AddChild）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetParent(ControlBase*<sp/>p);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isAutoSizeForChild()<sp/>const<sp/>{<sp/>return<sp/>m_bAutoSizeForChild;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>为子控件自动改变大小以容纳控件（不容纳负坐标部分）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableAutoSizeForChild(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/>std::list&lt;ControlBase*&gt;&amp;<sp/>GetChildList();

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取子控件总数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>GetChildCount();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>AddChild(ControlBase*<sp/>p,<sp/>int<sp/>offset_x<sp/>=<sp/>0,<sp/>int<sp/>offset_y<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>RemoveChild(ControlBase*<sp/>p);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isEnabled()<sp/>const<sp/>{<sp/>return<sp/>m_bEnabled;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetEnable(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isVisible()<sp/>const<sp/>{<sp/>return<sp/>m_bVisible;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetVisible(bool<sp/>visible);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>GetAutoRedrawState()<sp/>const<sp/>{<sp/>return<sp/>m_bAutoRedrawWhenReceiveMsg;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>启用自动重绘（接受到基础消息事件时自动标识需要重绘）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableAutoRedraw(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>Canvas&amp;<sp/>GetCanvas()<sp/>{<sp/>return<sp/>m_canvas;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>COLORREF<sp/>GetBkColor()<sp/>const<sp/>{<sp/>return<sp/>m_cBackground;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetBkColor(COLORREF<sp/>color);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>COLORREF<sp/>GetTextColor()<sp/>const<sp/>{<sp/>return<sp/>m_cText;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetTextColor(COLORREF<sp/>color);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableBorder(bool<sp/>bEnableBorder,<sp/>COLORREF<sp/>color<sp/>=<sp/>BLACK,<sp/>int<sp/>thickness<sp/>=<sp/>1);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetAlpha(BYTE<sp/>alpha,<sp/>bool<sp/>bUseCanvasAlpha,<sp/>bool<sp/>isAlphaCalculated);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>std::wstring<sp/>GetText()<sp/>const<sp/>{<sp/>return<sp/>m_wstrText;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetText(std::wstring<sp/>wstr);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Draw_Text(int<sp/>nTextOffsetX<sp/>=<sp/>0,<sp/>int<sp/>nTextOffsetY<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘控件
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Redraw();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>绘制控件（可选绘制子控件）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Draw(bool<sp/>draw_child<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>渲染控件到外部
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Render(Canvas*<sp/>dst,<sp/>RECT*<sp/>pRct<sp/>=<sp/>nullptr,<sp/>int*<sp/>pCount<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置消息响应函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetMsgProcFunc(MESSAGE_PROC_FUNC<sp/>func);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置消息响应函数为静态类函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetMsgProcFunc(MESSAGE_PROC_FUNC_CLASS<sp/>static_class_func,<sp/>void*<sp/>_this);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>更新消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>UpdateMessage(ExMessage<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否悬停
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isHovered()<sp/>const<sp/>{<sp/>return<sp/>m_bHovered;<sp/>}

<sp/><sp/><sp/><sp/><sp/>//<sp/>是否拥有焦点
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isFocused()<sp/>const<sp/>{<sp/>return<sp/>m_bFocused;<sp/>}

<sp/><sp/><sp/><sp/><sp/>//<sp/>是否按下
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isPressed()<sp/>const<sp/>{<sp/>return<sp/>m_bPressed;<sp/>}
<sp/><sp/>};
}

</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="namespace_hi_easy_x_1a6982c2e2c7378d6c138e2dd0df06650faa100c4381a4e4afc32c116a2b1c1df25" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_hi_easy_x_1a6982c2e2c7378d6c138e2dd0df06650faa100c4381a4e4afc32c116a2b1c1df25" kindref="member">CM_PRESS</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>按下</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="namespace_hi_easy_x_1a6982c2e2c7378d6c138e2dd0df06650faff367ba00ca00065d7102a74903270eb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_hi_easy_x_1a6982c2e2c7378d6c138e2dd0df06650faff367ba00ca00065d7102a74903270eb" kindref="member">CM_PRESS_OVER</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>按下结束 <sp/><sp/><sp/><sp/><sp/><sp/><sp/>CM_CLICK,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>单击
<sp/><sp/><sp/><sp/><sp/>CM_DOUBLE_CLICK,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>双击
<sp/><sp/><sp/><sp/><sp/><sp/>CM_FOCUS,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取焦点
<sp/><sp/><sp/><sp/><sp/><sp/>CM_FOCUS_OVER,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>丢失焦点

<sp/>};

<sp/><sp/><sp/><sp/>class<sp/>ControlBase;

<sp/><sp/><sp/><sp/>//<sp/>控件消息处理函数
<sp/>//<sp/>_Ctrl<sp/><sp/><sp/><sp/>传入控件指针
<sp/><sp/><sp/>//<sp/>_MsgId<sp/><sp/><sp/>传入消息标识代码
<sp/>//<sp/>_ExMsg<sp/><sp/><sp/>传入详细消息（坐标已变换到控件）
<sp/>typedef<sp/>void<sp/>(*MESSAGE_PROC_FUNC)(ControlBase*<sp/>_Ctrl,<sp/>int<sp/>_MsgId,<sp/>ExMessage<sp/>_ExMsg);

<sp/><sp/>//<sp/>支持静态类函数作为控件消息处理函数
<sp/><sp/>typedef<sp/>void<sp/>(*MESSAGE_PROC_FUNC_CLASS)(void*<sp/>_This,<sp/>ControlBase*<sp/>_Ctrl,<sp/>int<sp/>_MsgId,<sp/>ExMessage<sp/>_ExMsg);

<sp/><sp/><sp/>//<sp/>控件基础
<sp/><sp/>class<sp/>ControlBase<sp/>:<sp/>public<sp/>Container
<sp/><sp/><sp/>{
<sp/><sp/>protected:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bEnabled<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否可用
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bVisible<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否可见

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘和渲染标志
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bAutoRedrawWhenReceiveMsg<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>当默认消息处理函数接受到消息时，是否自动标识重绘和渲染
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bRedraw<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标识需要重绘
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bRender<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标识需要渲染
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bClear<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标识需要清空某区域
<sp/><sp/><sp/><sp/><sp/>RECT<sp/>m_rctClear<sp/>=<sp/>{<sp/>0<sp/>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>记录需要清空的区域
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bAlwaysRedrawAndRender<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>总是重绘和渲染（占用更高）

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::wstring<sp/>m_wstrText;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>控件文本

<sp/><sp/><sp/><sp/><sp/>Canvas<sp/>m_canvas;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>画布
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BYTE<sp/>m_alpha<sp/>=<sp/>255;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>透明度
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bUseCanvasAlpha<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否使用画布自身的透明度信息
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isAlphaCalculated<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>画布是否已经计算透明混合颜色

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/>m_cBorder<sp/>=<sp/>MODERN_BORDER_GRAY;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>边框颜色
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/>m_cBackground<sp/>=<sp/>CLASSICGRAY;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>背景色
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/>m_cText<sp/>=<sp/>BLACK;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>文本颜色

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bEnableBorder<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否绘制边框
<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>m_nBorderThickness<sp/>=<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>边框粗细

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bCompleteFirstSetRect<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否已经完成第一次设置区域

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase*<sp/>m_pParent<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>父控件
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::list&lt;ControlBase*&gt;<sp/>m_listChild;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>子控件

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bAutoSizeForChild<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>为子控件自动改变大小以容纳控件

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MESSAGE_PROC_FUNC<sp/>m_funcMessageProc<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>消息处理函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MESSAGE_PROC_FUNC_CLASS<sp/>m_funcMessageProc_Class<sp/>=<sp/>nullptr;<sp/><sp/>//<sp/>若绑定的消息处理函数是静态类函数，则记录其地址
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void*<sp/>m_pCalledClass<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>若绑定的消息处理函数是静态类函数，则记录该类指针

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bHovered<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>鼠标是否悬停
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bPressed<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>鼠标是否按下
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bFocused<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否拥有焦点

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>更新区域消息处理
<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>UpdateRect(RECT<sp/>rctOld)<sp/>override;

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标记需要重绘和渲染
<sp/><sp/><sp/><sp/><sp/>void<sp/>MarkNeedRedrawAndRender();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标记需要清空矩形区域
<sp/><sp/><sp/><sp/><sp/>void<sp/>MarkNeedClearRect(RECT<sp/>rct);

<sp/><sp/><sp/><sp/><sp/>//<sp/>绘制子控件
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>DrawChild();

<sp/><sp/><sp/><sp/><sp/>//<sp/>转换消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>ExMessage&amp;<sp/>TransformMessage(ExMessage&amp;<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>分发消息到用户函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>CallUserMsgProcFunc(int<sp/>msgid,<sp/>ExMessage<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>子控件区域更变
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>ChildRectChanged(ControlBase*<sp/>pChild);

<sp/><sp/><sp/>private:

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Init();

<sp/><sp/>public:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase(std::wstring<sp/>wstrText);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase(int<sp/>x,<sp/>int<sp/>y,<sp/>int<sp/>w<sp/>=<sp/>0,<sp/>int<sp/>h<sp/>=<sp/>0,<sp/>std::wstring<sp/>wstrText<sp/>=<sp/>L&quot;&quot;);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>~ControlBase();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase*<sp/>GetParent()<sp/>{<sp/>return<sp/>m_pParent;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置父控件（内部调用 AddChild）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetParent(ControlBase*<sp/>p);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isAutoSizeForChild()<sp/>const<sp/>{<sp/>return<sp/>m_bAutoSizeForChild;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>为子控件自动改变大小以容纳控件（不容纳负坐标部分）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableAutoSizeForChild(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/>std::list&lt;ControlBase*&gt;&amp;<sp/>GetChildList();

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取子控件总数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>GetChildCount();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>AddChild(ControlBase*<sp/>p,<sp/>int<sp/>offset_x<sp/>=<sp/>0,<sp/>int<sp/>offset_y<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>RemoveChild(ControlBase*<sp/>p);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isEnabled()<sp/>const<sp/>{<sp/>return<sp/>m_bEnabled;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetEnable(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isVisible()<sp/>const<sp/>{<sp/>return<sp/>m_bVisible;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetVisible(bool<sp/>visible);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>GetAutoRedrawState()<sp/>const<sp/>{<sp/>return<sp/>m_bAutoRedrawWhenReceiveMsg;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>启用自动重绘（接受到基础消息事件时自动标识需要重绘）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableAutoRedraw(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>Canvas&amp;<sp/>GetCanvas()<sp/>{<sp/>return<sp/>m_canvas;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>COLORREF<sp/>GetBkColor()<sp/>const<sp/>{<sp/>return<sp/>m_cBackground;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetBkColor(COLORREF<sp/>color);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>COLORREF<sp/>GetTextColor()<sp/>const<sp/>{<sp/>return<sp/>m_cText;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetTextColor(COLORREF<sp/>color);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableBorder(bool<sp/>bEnableBorder,<sp/>COLORREF<sp/>color<sp/>=<sp/>BLACK,<sp/>int<sp/>thickness<sp/>=<sp/>1);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetAlpha(BYTE<sp/>alpha,<sp/>bool<sp/>bUseCanvasAlpha,<sp/>bool<sp/>isAlphaCalculated);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>std::wstring<sp/>GetText()<sp/>const<sp/>{<sp/>return<sp/>m_wstrText;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetText(std::wstring<sp/>wstr);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Draw_Text(int<sp/>nTextOffsetX<sp/>=<sp/>0,<sp/>int<sp/>nTextOffsetY<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘控件
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Redraw();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>绘制控件（可选绘制子控件）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Draw(bool<sp/>draw_child<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>渲染控件到外部
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Render(Canvas*<sp/>dst,<sp/>RECT*<sp/>pRct<sp/>=<sp/>nullptr,<sp/>int*<sp/>pCount<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置消息响应函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetMsgProcFunc(MESSAGE_PROC_FUNC<sp/>func);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置消息响应函数为静态类函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetMsgProcFunc(MESSAGE_PROC_FUNC_CLASS<sp/>static_class_func,<sp/>void*<sp/>_this);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>更新消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>UpdateMessage(ExMessage<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否悬停
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isHovered()<sp/>const<sp/>{<sp/>return<sp/>m_bHovered;<sp/>}

<sp/><sp/><sp/><sp/><sp/>//<sp/>是否拥有焦点
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isFocused()<sp/>const<sp/>{<sp/>return<sp/>m_bFocused;<sp/>}

<sp/><sp/><sp/><sp/><sp/>//<sp/>是否按下
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isPressed()<sp/>const<sp/>{<sp/>return<sp/>m_bPressed;<sp/>}
<sp/><sp/>};
}

</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="namespace_hi_easy_x_1a6982c2e2c7378d6c138e2dd0df06650fa7c30dcb4be84e9fe3aea4eb2383b8e44" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_hi_easy_x_1a6982c2e2c7378d6c138e2dd0df06650fa7c30dcb4be84e9fe3aea4eb2383b8e44" kindref="member">CM_CLICK</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>单击 <sp/><sp/><sp/><sp/><sp/>CM_DOUBLE_CLICK,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>双击
<sp/><sp/><sp/><sp/><sp/><sp/>CM_FOCUS,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取焦点
<sp/><sp/><sp/><sp/><sp/><sp/>CM_FOCUS_OVER,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>丢失焦点

<sp/>};

<sp/><sp/><sp/><sp/>class<sp/>ControlBase;

<sp/><sp/><sp/><sp/>//<sp/>控件消息处理函数
<sp/>//<sp/>_Ctrl<sp/><sp/><sp/><sp/>传入控件指针
<sp/><sp/><sp/>//<sp/>_MsgId<sp/><sp/><sp/>传入消息标识代码
<sp/>//<sp/>_ExMsg<sp/><sp/><sp/>传入详细消息（坐标已变换到控件）
<sp/>typedef<sp/>void<sp/>(*MESSAGE_PROC_FUNC)(ControlBase*<sp/>_Ctrl,<sp/>int<sp/>_MsgId,<sp/>ExMessage<sp/>_ExMsg);

<sp/><sp/>//<sp/>支持静态类函数作为控件消息处理函数
<sp/><sp/>typedef<sp/>void<sp/>(*MESSAGE_PROC_FUNC_CLASS)(void*<sp/>_This,<sp/>ControlBase*<sp/>_Ctrl,<sp/>int<sp/>_MsgId,<sp/>ExMessage<sp/>_ExMsg);

<sp/><sp/><sp/>//<sp/>控件基础
<sp/><sp/>class<sp/>ControlBase<sp/>:<sp/>public<sp/>Container
<sp/><sp/><sp/>{
<sp/><sp/>protected:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bEnabled<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否可用
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bVisible<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否可见

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘和渲染标志
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bAutoRedrawWhenReceiveMsg<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>当默认消息处理函数接受到消息时，是否自动标识重绘和渲染
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bRedraw<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标识需要重绘
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bRender<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标识需要渲染
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bClear<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标识需要清空某区域
<sp/><sp/><sp/><sp/><sp/>RECT<sp/>m_rctClear<sp/>=<sp/>{<sp/>0<sp/>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>记录需要清空的区域
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bAlwaysRedrawAndRender<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>总是重绘和渲染（占用更高）

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::wstring<sp/>m_wstrText;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>控件文本

<sp/><sp/><sp/><sp/><sp/>Canvas<sp/>m_canvas;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>画布
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BYTE<sp/>m_alpha<sp/>=<sp/>255;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>透明度
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bUseCanvasAlpha<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否使用画布自身的透明度信息
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isAlphaCalculated<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>画布是否已经计算透明混合颜色

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/>m_cBorder<sp/>=<sp/>MODERN_BORDER_GRAY;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>边框颜色
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/>m_cBackground<sp/>=<sp/>CLASSICGRAY;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>背景色
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/>m_cText<sp/>=<sp/>BLACK;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>文本颜色

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bEnableBorder<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否绘制边框
<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>m_nBorderThickness<sp/>=<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>边框粗细

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bCompleteFirstSetRect<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否已经完成第一次设置区域

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase*<sp/>m_pParent<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>父控件
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::list&lt;ControlBase*&gt;<sp/>m_listChild;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>子控件

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bAutoSizeForChild<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>为子控件自动改变大小以容纳控件

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MESSAGE_PROC_FUNC<sp/>m_funcMessageProc<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>消息处理函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MESSAGE_PROC_FUNC_CLASS<sp/>m_funcMessageProc_Class<sp/>=<sp/>nullptr;<sp/><sp/>//<sp/>若绑定的消息处理函数是静态类函数，则记录其地址
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void*<sp/>m_pCalledClass<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>若绑定的消息处理函数是静态类函数，则记录该类指针

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bHovered<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>鼠标是否悬停
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bPressed<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>鼠标是否按下
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bFocused<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否拥有焦点

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>更新区域消息处理
<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>UpdateRect(RECT<sp/>rctOld)<sp/>override;

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标记需要重绘和渲染
<sp/><sp/><sp/><sp/><sp/>void<sp/>MarkNeedRedrawAndRender();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标记需要清空矩形区域
<sp/><sp/><sp/><sp/><sp/>void<sp/>MarkNeedClearRect(RECT<sp/>rct);

<sp/><sp/><sp/><sp/><sp/>//<sp/>绘制子控件
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>DrawChild();

<sp/><sp/><sp/><sp/><sp/>//<sp/>转换消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>ExMessage&amp;<sp/>TransformMessage(ExMessage&amp;<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>分发消息到用户函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>CallUserMsgProcFunc(int<sp/>msgid,<sp/>ExMessage<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>子控件区域更变
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>ChildRectChanged(ControlBase*<sp/>pChild);

<sp/><sp/><sp/>private:

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Init();

<sp/><sp/>public:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase(std::wstring<sp/>wstrText);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase(int<sp/>x,<sp/>int<sp/>y,<sp/>int<sp/>w<sp/>=<sp/>0,<sp/>int<sp/>h<sp/>=<sp/>0,<sp/>std::wstring<sp/>wstrText<sp/>=<sp/>L&quot;&quot;);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>~ControlBase();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase*<sp/>GetParent()<sp/>{<sp/>return<sp/>m_pParent;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置父控件（内部调用 AddChild）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetParent(ControlBase*<sp/>p);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isAutoSizeForChild()<sp/>const<sp/>{<sp/>return<sp/>m_bAutoSizeForChild;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>为子控件自动改变大小以容纳控件（不容纳负坐标部分）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableAutoSizeForChild(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/>std::list&lt;ControlBase*&gt;&amp;<sp/>GetChildList();

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取子控件总数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>GetChildCount();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>AddChild(ControlBase*<sp/>p,<sp/>int<sp/>offset_x<sp/>=<sp/>0,<sp/>int<sp/>offset_y<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>RemoveChild(ControlBase*<sp/>p);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isEnabled()<sp/>const<sp/>{<sp/>return<sp/>m_bEnabled;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetEnable(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isVisible()<sp/>const<sp/>{<sp/>return<sp/>m_bVisible;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetVisible(bool<sp/>visible);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>GetAutoRedrawState()<sp/>const<sp/>{<sp/>return<sp/>m_bAutoRedrawWhenReceiveMsg;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>启用自动重绘（接受到基础消息事件时自动标识需要重绘）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableAutoRedraw(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>Canvas&amp;<sp/>GetCanvas()<sp/>{<sp/>return<sp/>m_canvas;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>COLORREF<sp/>GetBkColor()<sp/>const<sp/>{<sp/>return<sp/>m_cBackground;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetBkColor(COLORREF<sp/>color);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>COLORREF<sp/>GetTextColor()<sp/>const<sp/>{<sp/>return<sp/>m_cText;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetTextColor(COLORREF<sp/>color);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableBorder(bool<sp/>bEnableBorder,<sp/>COLORREF<sp/>color<sp/>=<sp/>BLACK,<sp/>int<sp/>thickness<sp/>=<sp/>1);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetAlpha(BYTE<sp/>alpha,<sp/>bool<sp/>bUseCanvasAlpha,<sp/>bool<sp/>isAlphaCalculated);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>std::wstring<sp/>GetText()<sp/>const<sp/>{<sp/>return<sp/>m_wstrText;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetText(std::wstring<sp/>wstr);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Draw_Text(int<sp/>nTextOffsetX<sp/>=<sp/>0,<sp/>int<sp/>nTextOffsetY<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘控件
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Redraw();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>绘制控件（可选绘制子控件）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Draw(bool<sp/>draw_child<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>渲染控件到外部
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Render(Canvas*<sp/>dst,<sp/>RECT*<sp/>pRct<sp/>=<sp/>nullptr,<sp/>int*<sp/>pCount<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置消息响应函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetMsgProcFunc(MESSAGE_PROC_FUNC<sp/>func);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置消息响应函数为静态类函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetMsgProcFunc(MESSAGE_PROC_FUNC_CLASS<sp/>static_class_func,<sp/>void*<sp/>_this);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>更新消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>UpdateMessage(ExMessage<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否悬停
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isHovered()<sp/>const<sp/>{<sp/>return<sp/>m_bHovered;<sp/>}

<sp/><sp/><sp/><sp/><sp/>//<sp/>是否拥有焦点
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isFocused()<sp/>const<sp/>{<sp/>return<sp/>m_bFocused;<sp/>}

<sp/><sp/><sp/><sp/><sp/>//<sp/>是否按下
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isPressed()<sp/>const<sp/>{<sp/>return<sp/>m_bPressed;<sp/>}
<sp/><sp/>};
}

</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="namespace_hi_easy_x_1a6982c2e2c7378d6c138e2dd0df06650fadaa10d05668c049ac3d8b650ed852927" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_hi_easy_x_1a6982c2e2c7378d6c138e2dd0df06650fadaa10d05668c049ac3d8b650ed852927" kindref="member">CM_DOUBLE_CLICK</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>双击 <sp/><sp/><sp/><sp/><sp/><sp/>CM_FOCUS,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取焦点
<sp/><sp/><sp/><sp/><sp/><sp/>CM_FOCUS_OVER,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>丢失焦点

<sp/>};

<sp/><sp/><sp/><sp/>class<sp/>ControlBase;

<sp/><sp/><sp/><sp/>//<sp/>控件消息处理函数
<sp/>//<sp/>_Ctrl<sp/><sp/><sp/><sp/>传入控件指针
<sp/><sp/><sp/>//<sp/>_MsgId<sp/><sp/><sp/>传入消息标识代码
<sp/>//<sp/>_ExMsg<sp/><sp/><sp/>传入详细消息（坐标已变换到控件）
<sp/>typedef<sp/>void<sp/>(*MESSAGE_PROC_FUNC)(ControlBase*<sp/>_Ctrl,<sp/>int<sp/>_MsgId,<sp/>ExMessage<sp/>_ExMsg);

<sp/><sp/>//<sp/>支持静态类函数作为控件消息处理函数
<sp/><sp/>typedef<sp/>void<sp/>(*MESSAGE_PROC_FUNC_CLASS)(void*<sp/>_This,<sp/>ControlBase*<sp/>_Ctrl,<sp/>int<sp/>_MsgId,<sp/>ExMessage<sp/>_ExMsg);

<sp/><sp/><sp/>//<sp/>控件基础
<sp/><sp/>class<sp/>ControlBase<sp/>:<sp/>public<sp/>Container
<sp/><sp/><sp/>{
<sp/><sp/>protected:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bEnabled<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否可用
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bVisible<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否可见

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘和渲染标志
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bAutoRedrawWhenReceiveMsg<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>当默认消息处理函数接受到消息时，是否自动标识重绘和渲染
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bRedraw<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标识需要重绘
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bRender<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标识需要渲染
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bClear<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标识需要清空某区域
<sp/><sp/><sp/><sp/><sp/>RECT<sp/>m_rctClear<sp/>=<sp/>{<sp/>0<sp/>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>记录需要清空的区域
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bAlwaysRedrawAndRender<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>总是重绘和渲染（占用更高）

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::wstring<sp/>m_wstrText;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>控件文本

<sp/><sp/><sp/><sp/><sp/>Canvas<sp/>m_canvas;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>画布
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BYTE<sp/>m_alpha<sp/>=<sp/>255;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>透明度
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bUseCanvasAlpha<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否使用画布自身的透明度信息
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isAlphaCalculated<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>画布是否已经计算透明混合颜色

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/>m_cBorder<sp/>=<sp/>MODERN_BORDER_GRAY;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>边框颜色
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/>m_cBackground<sp/>=<sp/>CLASSICGRAY;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>背景色
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/>m_cText<sp/>=<sp/>BLACK;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>文本颜色

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bEnableBorder<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否绘制边框
<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>m_nBorderThickness<sp/>=<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>边框粗细

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bCompleteFirstSetRect<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否已经完成第一次设置区域

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase*<sp/>m_pParent<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>父控件
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::list&lt;ControlBase*&gt;<sp/>m_listChild;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>子控件

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bAutoSizeForChild<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>为子控件自动改变大小以容纳控件

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MESSAGE_PROC_FUNC<sp/>m_funcMessageProc<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>消息处理函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MESSAGE_PROC_FUNC_CLASS<sp/>m_funcMessageProc_Class<sp/>=<sp/>nullptr;<sp/><sp/>//<sp/>若绑定的消息处理函数是静态类函数，则记录其地址
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void*<sp/>m_pCalledClass<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>若绑定的消息处理函数是静态类函数，则记录该类指针

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bHovered<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>鼠标是否悬停
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bPressed<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>鼠标是否按下
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bFocused<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否拥有焦点

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>更新区域消息处理
<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>UpdateRect(RECT<sp/>rctOld)<sp/>override;

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标记需要重绘和渲染
<sp/><sp/><sp/><sp/><sp/>void<sp/>MarkNeedRedrawAndRender();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标记需要清空矩形区域
<sp/><sp/><sp/><sp/><sp/>void<sp/>MarkNeedClearRect(RECT<sp/>rct);

<sp/><sp/><sp/><sp/><sp/>//<sp/>绘制子控件
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>DrawChild();

<sp/><sp/><sp/><sp/><sp/>//<sp/>转换消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>ExMessage&amp;<sp/>TransformMessage(ExMessage&amp;<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>分发消息到用户函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>CallUserMsgProcFunc(int<sp/>msgid,<sp/>ExMessage<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>子控件区域更变
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>ChildRectChanged(ControlBase*<sp/>pChild);

<sp/><sp/><sp/>private:

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Init();

<sp/><sp/>public:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase(std::wstring<sp/>wstrText);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase(int<sp/>x,<sp/>int<sp/>y,<sp/>int<sp/>w<sp/>=<sp/>0,<sp/>int<sp/>h<sp/>=<sp/>0,<sp/>std::wstring<sp/>wstrText<sp/>=<sp/>L&quot;&quot;);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>~ControlBase();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase*<sp/>GetParent()<sp/>{<sp/>return<sp/>m_pParent;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置父控件（内部调用 AddChild）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetParent(ControlBase*<sp/>p);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isAutoSizeForChild()<sp/>const<sp/>{<sp/>return<sp/>m_bAutoSizeForChild;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>为子控件自动改变大小以容纳控件（不容纳负坐标部分）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableAutoSizeForChild(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/>std::list&lt;ControlBase*&gt;&amp;<sp/>GetChildList();

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取子控件总数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>GetChildCount();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>AddChild(ControlBase*<sp/>p,<sp/>int<sp/>offset_x<sp/>=<sp/>0,<sp/>int<sp/>offset_y<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>RemoveChild(ControlBase*<sp/>p);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isEnabled()<sp/>const<sp/>{<sp/>return<sp/>m_bEnabled;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetEnable(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isVisible()<sp/>const<sp/>{<sp/>return<sp/>m_bVisible;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetVisible(bool<sp/>visible);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>GetAutoRedrawState()<sp/>const<sp/>{<sp/>return<sp/>m_bAutoRedrawWhenReceiveMsg;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>启用自动重绘（接受到基础消息事件时自动标识需要重绘）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableAutoRedraw(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>Canvas&amp;<sp/>GetCanvas()<sp/>{<sp/>return<sp/>m_canvas;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>COLORREF<sp/>GetBkColor()<sp/>const<sp/>{<sp/>return<sp/>m_cBackground;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetBkColor(COLORREF<sp/>color);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>COLORREF<sp/>GetTextColor()<sp/>const<sp/>{<sp/>return<sp/>m_cText;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetTextColor(COLORREF<sp/>color);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableBorder(bool<sp/>bEnableBorder,<sp/>COLORREF<sp/>color<sp/>=<sp/>BLACK,<sp/>int<sp/>thickness<sp/>=<sp/>1);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetAlpha(BYTE<sp/>alpha,<sp/>bool<sp/>bUseCanvasAlpha,<sp/>bool<sp/>isAlphaCalculated);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>std::wstring<sp/>GetText()<sp/>const<sp/>{<sp/>return<sp/>m_wstrText;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetText(std::wstring<sp/>wstr);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Draw_Text(int<sp/>nTextOffsetX<sp/>=<sp/>0,<sp/>int<sp/>nTextOffsetY<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘控件
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Redraw();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>绘制控件（可选绘制子控件）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Draw(bool<sp/>draw_child<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>渲染控件到外部
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Render(Canvas*<sp/>dst,<sp/>RECT*<sp/>pRct<sp/>=<sp/>nullptr,<sp/>int*<sp/>pCount<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置消息响应函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetMsgProcFunc(MESSAGE_PROC_FUNC<sp/>func);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置消息响应函数为静态类函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetMsgProcFunc(MESSAGE_PROC_FUNC_CLASS<sp/>static_class_func,<sp/>void*<sp/>_this);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>更新消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>UpdateMessage(ExMessage<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否悬停
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isHovered()<sp/>const<sp/>{<sp/>return<sp/>m_bHovered;<sp/>}

<sp/><sp/><sp/><sp/><sp/>//<sp/>是否拥有焦点
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isFocused()<sp/>const<sp/>{<sp/>return<sp/>m_bFocused;<sp/>}

<sp/><sp/><sp/><sp/><sp/>//<sp/>是否按下
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isPressed()<sp/>const<sp/>{<sp/>return<sp/>m_bPressed;<sp/>}
<sp/><sp/>};
}

</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="namespace_hi_easy_x_1a6982c2e2c7378d6c138e2dd0df06650fa569d042b0410209836eb37dd4b83455e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_hi_easy_x_1a6982c2e2c7378d6c138e2dd0df06650fa569d042b0410209836eb37dd4b83455e" kindref="member">CM_FOCUS</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>获取焦点 <sp/><sp/><sp/><sp/><sp/><sp/>CM_FOCUS_OVER,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>丢失焦点

<sp/>};

<sp/><sp/><sp/><sp/>class<sp/>ControlBase;

<sp/><sp/><sp/><sp/>//<sp/>控件消息处理函数
<sp/>//<sp/>_Ctrl<sp/><sp/><sp/><sp/>传入控件指针
<sp/><sp/><sp/>//<sp/>_MsgId<sp/><sp/><sp/>传入消息标识代码
<sp/>//<sp/>_ExMsg<sp/><sp/><sp/>传入详细消息（坐标已变换到控件）
<sp/>typedef<sp/>void<sp/>(*MESSAGE_PROC_FUNC)(ControlBase*<sp/>_Ctrl,<sp/>int<sp/>_MsgId,<sp/>ExMessage<sp/>_ExMsg);

<sp/><sp/>//<sp/>支持静态类函数作为控件消息处理函数
<sp/><sp/>typedef<sp/>void<sp/>(*MESSAGE_PROC_FUNC_CLASS)(void*<sp/>_This,<sp/>ControlBase*<sp/>_Ctrl,<sp/>int<sp/>_MsgId,<sp/>ExMessage<sp/>_ExMsg);

<sp/><sp/><sp/>//<sp/>控件基础
<sp/><sp/>class<sp/>ControlBase<sp/>:<sp/>public<sp/>Container
<sp/><sp/><sp/>{
<sp/><sp/>protected:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bEnabled<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否可用
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bVisible<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否可见

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘和渲染标志
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bAutoRedrawWhenReceiveMsg<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>当默认消息处理函数接受到消息时，是否自动标识重绘和渲染
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bRedraw<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标识需要重绘
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bRender<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标识需要渲染
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bClear<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标识需要清空某区域
<sp/><sp/><sp/><sp/><sp/>RECT<sp/>m_rctClear<sp/>=<sp/>{<sp/>0<sp/>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>记录需要清空的区域
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bAlwaysRedrawAndRender<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>总是重绘和渲染（占用更高）

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::wstring<sp/>m_wstrText;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>控件文本

<sp/><sp/><sp/><sp/><sp/>Canvas<sp/>m_canvas;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>画布
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BYTE<sp/>m_alpha<sp/>=<sp/>255;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>透明度
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bUseCanvasAlpha<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否使用画布自身的透明度信息
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isAlphaCalculated<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>画布是否已经计算透明混合颜色

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/>m_cBorder<sp/>=<sp/>MODERN_BORDER_GRAY;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>边框颜色
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/>m_cBackground<sp/>=<sp/>CLASSICGRAY;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>背景色
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/>m_cText<sp/>=<sp/>BLACK;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>文本颜色

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bEnableBorder<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否绘制边框
<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>m_nBorderThickness<sp/>=<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>边框粗细

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bCompleteFirstSetRect<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否已经完成第一次设置区域

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase*<sp/>m_pParent<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>父控件
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::list&lt;ControlBase*&gt;<sp/>m_listChild;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>子控件

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bAutoSizeForChild<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>为子控件自动改变大小以容纳控件

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MESSAGE_PROC_FUNC<sp/>m_funcMessageProc<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>消息处理函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MESSAGE_PROC_FUNC_CLASS<sp/>m_funcMessageProc_Class<sp/>=<sp/>nullptr;<sp/><sp/>//<sp/>若绑定的消息处理函数是静态类函数，则记录其地址
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void*<sp/>m_pCalledClass<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>若绑定的消息处理函数是静态类函数，则记录该类指针

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bHovered<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>鼠标是否悬停
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bPressed<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>鼠标是否按下
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bFocused<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否拥有焦点

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>更新区域消息处理
<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>UpdateRect(RECT<sp/>rctOld)<sp/>override;

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标记需要重绘和渲染
<sp/><sp/><sp/><sp/><sp/>void<sp/>MarkNeedRedrawAndRender();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标记需要清空矩形区域
<sp/><sp/><sp/><sp/><sp/>void<sp/>MarkNeedClearRect(RECT<sp/>rct);

<sp/><sp/><sp/><sp/><sp/>//<sp/>绘制子控件
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>DrawChild();

<sp/><sp/><sp/><sp/><sp/>//<sp/>转换消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>ExMessage&amp;<sp/>TransformMessage(ExMessage&amp;<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>分发消息到用户函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>CallUserMsgProcFunc(int<sp/>msgid,<sp/>ExMessage<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>子控件区域更变
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>ChildRectChanged(ControlBase*<sp/>pChild);

<sp/><sp/><sp/>private:

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Init();

<sp/><sp/>public:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase(std::wstring<sp/>wstrText);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase(int<sp/>x,<sp/>int<sp/>y,<sp/>int<sp/>w<sp/>=<sp/>0,<sp/>int<sp/>h<sp/>=<sp/>0,<sp/>std::wstring<sp/>wstrText<sp/>=<sp/>L&quot;&quot;);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>~ControlBase();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase*<sp/>GetParent()<sp/>{<sp/>return<sp/>m_pParent;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置父控件（内部调用 AddChild）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetParent(ControlBase*<sp/>p);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isAutoSizeForChild()<sp/>const<sp/>{<sp/>return<sp/>m_bAutoSizeForChild;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>为子控件自动改变大小以容纳控件（不容纳负坐标部分）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableAutoSizeForChild(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/>std::list&lt;ControlBase*&gt;&amp;<sp/>GetChildList();

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取子控件总数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>GetChildCount();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>AddChild(ControlBase*<sp/>p,<sp/>int<sp/>offset_x<sp/>=<sp/>0,<sp/>int<sp/>offset_y<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>RemoveChild(ControlBase*<sp/>p);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isEnabled()<sp/>const<sp/>{<sp/>return<sp/>m_bEnabled;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetEnable(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isVisible()<sp/>const<sp/>{<sp/>return<sp/>m_bVisible;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetVisible(bool<sp/>visible);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>GetAutoRedrawState()<sp/>const<sp/>{<sp/>return<sp/>m_bAutoRedrawWhenReceiveMsg;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>启用自动重绘（接受到基础消息事件时自动标识需要重绘）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableAutoRedraw(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>Canvas&amp;<sp/>GetCanvas()<sp/>{<sp/>return<sp/>m_canvas;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>COLORREF<sp/>GetBkColor()<sp/>const<sp/>{<sp/>return<sp/>m_cBackground;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetBkColor(COLORREF<sp/>color);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>COLORREF<sp/>GetTextColor()<sp/>const<sp/>{<sp/>return<sp/>m_cText;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetTextColor(COLORREF<sp/>color);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableBorder(bool<sp/>bEnableBorder,<sp/>COLORREF<sp/>color<sp/>=<sp/>BLACK,<sp/>int<sp/>thickness<sp/>=<sp/>1);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetAlpha(BYTE<sp/>alpha,<sp/>bool<sp/>bUseCanvasAlpha,<sp/>bool<sp/>isAlphaCalculated);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>std::wstring<sp/>GetText()<sp/>const<sp/>{<sp/>return<sp/>m_wstrText;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetText(std::wstring<sp/>wstr);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Draw_Text(int<sp/>nTextOffsetX<sp/>=<sp/>0,<sp/>int<sp/>nTextOffsetY<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘控件
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Redraw();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>绘制控件（可选绘制子控件）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Draw(bool<sp/>draw_child<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>渲染控件到外部
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Render(Canvas*<sp/>dst,<sp/>RECT*<sp/>pRct<sp/>=<sp/>nullptr,<sp/>int*<sp/>pCount<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置消息响应函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetMsgProcFunc(MESSAGE_PROC_FUNC<sp/>func);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置消息响应函数为静态类函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetMsgProcFunc(MESSAGE_PROC_FUNC_CLASS<sp/>static_class_func,<sp/>void*<sp/>_this);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>更新消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>UpdateMessage(ExMessage<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否悬停
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isHovered()<sp/>const<sp/>{<sp/>return<sp/>m_bHovered;<sp/>}

<sp/><sp/><sp/><sp/><sp/>//<sp/>是否拥有焦点
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isFocused()<sp/>const<sp/>{<sp/>return<sp/>m_bFocused;<sp/>}

<sp/><sp/><sp/><sp/><sp/>//<sp/>是否按下
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isPressed()<sp/>const<sp/>{<sp/>return<sp/>m_bPressed;<sp/>}
<sp/><sp/>};
}

</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="namespace_hi_easy_x_1a6982c2e2c7378d6c138e2dd0df06650fa2d97e4eddb1be9a37657e6722616768b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_hi_easy_x_1a6982c2e2c7378d6c138e2dd0df06650fa2d97e4eddb1be9a37657e6722616768b" kindref="member">CM_FOCUS_OVER</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>丢失焦点 
<sp/>};

<sp/><sp/><sp/><sp/>class<sp/>ControlBase;

<sp/><sp/><sp/><sp/>//<sp/>控件消息处理函数
<sp/>//<sp/>_Ctrl<sp/><sp/><sp/><sp/>传入控件指针
<sp/><sp/><sp/>//<sp/>_MsgId<sp/><sp/><sp/>传入消息标识代码
<sp/>//<sp/>_ExMsg<sp/><sp/><sp/>传入详细消息（坐标已变换到控件）
<sp/>typedef<sp/>void<sp/>(*MESSAGE_PROC_FUNC)(ControlBase*<sp/>_Ctrl,<sp/>int<sp/>_MsgId,<sp/>ExMessage<sp/>_ExMsg);

<sp/><sp/>//<sp/>支持静态类函数作为控件消息处理函数
<sp/><sp/>typedef<sp/>void<sp/>(*MESSAGE_PROC_FUNC_CLASS)(void*<sp/>_This,<sp/>ControlBase*<sp/>_Ctrl,<sp/>int<sp/>_MsgId,<sp/>ExMessage<sp/>_ExMsg);

<sp/><sp/><sp/>//<sp/>控件基础
<sp/><sp/>class<sp/>ControlBase<sp/>:<sp/>public<sp/>Container
<sp/><sp/><sp/>{
<sp/><sp/>protected:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bEnabled<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否可用
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bVisible<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否可见

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘和渲染标志
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bAutoRedrawWhenReceiveMsg<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>当默认消息处理函数接受到消息时，是否自动标识重绘和渲染
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bRedraw<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标识需要重绘
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bRender<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标识需要渲染
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bClear<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标识需要清空某区域
<sp/><sp/><sp/><sp/><sp/>RECT<sp/>m_rctClear<sp/>=<sp/>{<sp/>0<sp/>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>记录需要清空的区域
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bAlwaysRedrawAndRender<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>总是重绘和渲染（占用更高）

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::wstring<sp/>m_wstrText;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>控件文本

<sp/><sp/><sp/><sp/><sp/>Canvas<sp/>m_canvas;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>画布
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BYTE<sp/>m_alpha<sp/>=<sp/>255;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>透明度
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bUseCanvasAlpha<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否使用画布自身的透明度信息
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isAlphaCalculated<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>画布是否已经计算透明混合颜色

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/>m_cBorder<sp/>=<sp/>MODERN_BORDER_GRAY;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>边框颜色
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/>m_cBackground<sp/>=<sp/>CLASSICGRAY;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>背景色
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/>m_cText<sp/>=<sp/>BLACK;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>文本颜色

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bEnableBorder<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否绘制边框
<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>m_nBorderThickness<sp/>=<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>边框粗细

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bCompleteFirstSetRect<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否已经完成第一次设置区域

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase*<sp/>m_pParent<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>父控件
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::list&lt;ControlBase*&gt;<sp/>m_listChild;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>子控件

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bAutoSizeForChild<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>为子控件自动改变大小以容纳控件

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MESSAGE_PROC_FUNC<sp/>m_funcMessageProc<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>消息处理函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MESSAGE_PROC_FUNC_CLASS<sp/>m_funcMessageProc_Class<sp/>=<sp/>nullptr;<sp/><sp/>//<sp/>若绑定的消息处理函数是静态类函数，则记录其地址
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void*<sp/>m_pCalledClass<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>若绑定的消息处理函数是静态类函数，则记录该类指针

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bHovered<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>鼠标是否悬停
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bPressed<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>鼠标是否按下
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bFocused<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否拥有焦点

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>更新区域消息处理
<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>UpdateRect(RECT<sp/>rctOld)<sp/>override;

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标记需要重绘和渲染
<sp/><sp/><sp/><sp/><sp/>void<sp/>MarkNeedRedrawAndRender();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标记需要清空矩形区域
<sp/><sp/><sp/><sp/><sp/>void<sp/>MarkNeedClearRect(RECT<sp/>rct);

<sp/><sp/><sp/><sp/><sp/>//<sp/>绘制子控件
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>DrawChild();

<sp/><sp/><sp/><sp/><sp/>//<sp/>转换消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>ExMessage&amp;<sp/>TransformMessage(ExMessage&amp;<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>分发消息到用户函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>CallUserMsgProcFunc(int<sp/>msgid,<sp/>ExMessage<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>子控件区域更变
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>ChildRectChanged(ControlBase*<sp/>pChild);

<sp/><sp/><sp/>private:

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Init();

<sp/><sp/>public:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase(std::wstring<sp/>wstrText);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase(int<sp/>x,<sp/>int<sp/>y,<sp/>int<sp/>w<sp/>=<sp/>0,<sp/>int<sp/>h<sp/>=<sp/>0,<sp/>std::wstring<sp/>wstrText<sp/>=<sp/>L&quot;&quot;);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>~ControlBase();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase*<sp/>GetParent()<sp/>{<sp/>return<sp/>m_pParent;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置父控件（内部调用 AddChild）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetParent(ControlBase*<sp/>p);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isAutoSizeForChild()<sp/>const<sp/>{<sp/>return<sp/>m_bAutoSizeForChild;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>为子控件自动改变大小以容纳控件（不容纳负坐标部分）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableAutoSizeForChild(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/>std::list&lt;ControlBase*&gt;&amp;<sp/>GetChildList();

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取子控件总数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>GetChildCount();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>AddChild(ControlBase*<sp/>p,<sp/>int<sp/>offset_x<sp/>=<sp/>0,<sp/>int<sp/>offset_y<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>RemoveChild(ControlBase*<sp/>p);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isEnabled()<sp/>const<sp/>{<sp/>return<sp/>m_bEnabled;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetEnable(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isVisible()<sp/>const<sp/>{<sp/>return<sp/>m_bVisible;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetVisible(bool<sp/>visible);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>GetAutoRedrawState()<sp/>const<sp/>{<sp/>return<sp/>m_bAutoRedrawWhenReceiveMsg;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>启用自动重绘（接受到基础消息事件时自动标识需要重绘）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableAutoRedraw(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>Canvas&amp;<sp/>GetCanvas()<sp/>{<sp/>return<sp/>m_canvas;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>COLORREF<sp/>GetBkColor()<sp/>const<sp/>{<sp/>return<sp/>m_cBackground;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetBkColor(COLORREF<sp/>color);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>COLORREF<sp/>GetTextColor()<sp/>const<sp/>{<sp/>return<sp/>m_cText;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetTextColor(COLORREF<sp/>color);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableBorder(bool<sp/>bEnableBorder,<sp/>COLORREF<sp/>color<sp/>=<sp/>BLACK,<sp/>int<sp/>thickness<sp/>=<sp/>1);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetAlpha(BYTE<sp/>alpha,<sp/>bool<sp/>bUseCanvasAlpha,<sp/>bool<sp/>isAlphaCalculated);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>std::wstring<sp/>GetText()<sp/>const<sp/>{<sp/>return<sp/>m_wstrText;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetText(std::wstring<sp/>wstr);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Draw_Text(int<sp/>nTextOffsetX<sp/>=<sp/>0,<sp/>int<sp/>nTextOffsetY<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘控件
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Redraw();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>绘制控件（可选绘制子控件）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Draw(bool<sp/>draw_child<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>渲染控件到外部
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Render(Canvas*<sp/>dst,<sp/>RECT*<sp/>pRct<sp/>=<sp/>nullptr,<sp/>int*<sp/>pCount<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置消息响应函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetMsgProcFunc(MESSAGE_PROC_FUNC<sp/>func);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置消息响应函数为静态类函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetMsgProcFunc(MESSAGE_PROC_FUNC_CLASS<sp/>static_class_func,<sp/>void*<sp/>_this);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>更新消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>UpdateMessage(ExMessage<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否悬停
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isHovered()<sp/>const<sp/>{<sp/>return<sp/>m_bHovered;<sp/>}

<sp/><sp/><sp/><sp/><sp/>//<sp/>是否拥有焦点
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isFocused()<sp/>const<sp/>{<sp/>return<sp/>m_bFocused;<sp/>}

<sp/><sp/><sp/><sp/><sp/>//<sp/>是否按下
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isPressed()<sp/>const<sp/>{<sp/>return<sp/>m_bPressed;<sp/>}
<sp/><sp/>};
}

</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ControlBase;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>控件消息处理函数</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>_Ctrl<sp/><sp/><sp/><sp/>传入控件指针</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>_MsgId<sp/><sp/><sp/>传入消息标识代码 <sp/>//<sp/>_ExMsg<sp/><sp/><sp/>传入详细消息（坐标已变换到控件）
<sp/>typedef<sp/>void<sp/>(*MESSAGE_PROC_FUNC)(ControlBase*<sp/>_Ctrl,<sp/>int<sp/>_MsgId,<sp/>ExMessage<sp/>_ExMsg);

<sp/><sp/>//<sp/>支持静态类函数作为控件消息处理函数
<sp/><sp/>typedef<sp/>void<sp/>(*MESSAGE_PROC_FUNC_CLASS)(void*<sp/>_This,<sp/>ControlBase*<sp/>_Ctrl,<sp/>int<sp/>_MsgId,<sp/>ExMessage<sp/>_ExMsg);

<sp/><sp/><sp/>//<sp/>控件基础
<sp/><sp/>class<sp/>ControlBase<sp/>:<sp/>public<sp/>Container
<sp/><sp/><sp/>{
<sp/><sp/>protected:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bEnabled<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否可用
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bVisible<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否可见

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘和渲染标志
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bAutoRedrawWhenReceiveMsg<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>当默认消息处理函数接受到消息时，是否自动标识重绘和渲染
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bRedraw<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标识需要重绘
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bRender<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标识需要渲染
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bClear<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标识需要清空某区域
<sp/><sp/><sp/><sp/><sp/>RECT<sp/>m_rctClear<sp/>=<sp/>{<sp/>0<sp/>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>记录需要清空的区域
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bAlwaysRedrawAndRender<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>总是重绘和渲染（占用更高）

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::wstring<sp/>m_wstrText;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>控件文本

<sp/><sp/><sp/><sp/><sp/>Canvas<sp/>m_canvas;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>画布
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BYTE<sp/>m_alpha<sp/>=<sp/>255;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>透明度
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bUseCanvasAlpha<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否使用画布自身的透明度信息
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isAlphaCalculated<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>画布是否已经计算透明混合颜色

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/>m_cBorder<sp/>=<sp/>MODERN_BORDER_GRAY;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>边框颜色
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/>m_cBackground<sp/>=<sp/>CLASSICGRAY;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>背景色
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/>m_cText<sp/>=<sp/>BLACK;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>文本颜色

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bEnableBorder<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否绘制边框
<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>m_nBorderThickness<sp/>=<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>边框粗细

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bCompleteFirstSetRect<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否已经完成第一次设置区域

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase*<sp/>m_pParent<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>父控件
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::list&lt;ControlBase*&gt;<sp/>m_listChild;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>子控件

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bAutoSizeForChild<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>为子控件自动改变大小以容纳控件

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MESSAGE_PROC_FUNC<sp/>m_funcMessageProc<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>消息处理函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MESSAGE_PROC_FUNC_CLASS<sp/>m_funcMessageProc_Class<sp/>=<sp/>nullptr;<sp/><sp/>//<sp/>若绑定的消息处理函数是静态类函数，则记录其地址
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void*<sp/>m_pCalledClass<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>若绑定的消息处理函数是静态类函数，则记录该类指针

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bHovered<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>鼠标是否悬停
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bPressed<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>鼠标是否按下
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bFocused<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否拥有焦点

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>更新区域消息处理
<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>UpdateRect(RECT<sp/>rctOld)<sp/>override;

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标记需要重绘和渲染
<sp/><sp/><sp/><sp/><sp/>void<sp/>MarkNeedRedrawAndRender();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标记需要清空矩形区域
<sp/><sp/><sp/><sp/><sp/>void<sp/>MarkNeedClearRect(RECT<sp/>rct);

<sp/><sp/><sp/><sp/><sp/>//<sp/>绘制子控件
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>DrawChild();

<sp/><sp/><sp/><sp/><sp/>//<sp/>转换消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>ExMessage&amp;<sp/>TransformMessage(ExMessage&amp;<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>分发消息到用户函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>CallUserMsgProcFunc(int<sp/>msgid,<sp/>ExMessage<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>子控件区域更变
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>ChildRectChanged(ControlBase*<sp/>pChild);

<sp/><sp/><sp/>private:

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Init();

<sp/><sp/>public:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase(std::wstring<sp/>wstrText);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase(int<sp/>x,<sp/>int<sp/>y,<sp/>int<sp/>w<sp/>=<sp/>0,<sp/>int<sp/>h<sp/>=<sp/>0,<sp/>std::wstring<sp/>wstrText<sp/>=<sp/>L&quot;&quot;);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>~ControlBase();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase*<sp/>GetParent()<sp/>{<sp/>return<sp/>m_pParent;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置父控件（内部调用 AddChild）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetParent(ControlBase*<sp/>p);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isAutoSizeForChild()<sp/>const<sp/>{<sp/>return<sp/>m_bAutoSizeForChild;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>为子控件自动改变大小以容纳控件（不容纳负坐标部分）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableAutoSizeForChild(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/>std::list&lt;ControlBase*&gt;&amp;<sp/>GetChildList();

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取子控件总数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>GetChildCount();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>AddChild(ControlBase*<sp/>p,<sp/>int<sp/>offset_x<sp/>=<sp/>0,<sp/>int<sp/>offset_y<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>RemoveChild(ControlBase*<sp/>p);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isEnabled()<sp/>const<sp/>{<sp/>return<sp/>m_bEnabled;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetEnable(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isVisible()<sp/>const<sp/>{<sp/>return<sp/>m_bVisible;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetVisible(bool<sp/>visible);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>GetAutoRedrawState()<sp/>const<sp/>{<sp/>return<sp/>m_bAutoRedrawWhenReceiveMsg;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>启用自动重绘（接受到基础消息事件时自动标识需要重绘）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableAutoRedraw(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>Canvas&amp;<sp/>GetCanvas()<sp/>{<sp/>return<sp/>m_canvas;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>COLORREF<sp/>GetBkColor()<sp/>const<sp/>{<sp/>return<sp/>m_cBackground;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetBkColor(COLORREF<sp/>color);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>COLORREF<sp/>GetTextColor()<sp/>const<sp/>{<sp/>return<sp/>m_cText;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetTextColor(COLORREF<sp/>color);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableBorder(bool<sp/>bEnableBorder,<sp/>COLORREF<sp/>color<sp/>=<sp/>BLACK,<sp/>int<sp/>thickness<sp/>=<sp/>1);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetAlpha(BYTE<sp/>alpha,<sp/>bool<sp/>bUseCanvasAlpha,<sp/>bool<sp/>isAlphaCalculated);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>std::wstring<sp/>GetText()<sp/>const<sp/>{<sp/>return<sp/>m_wstrText;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetText(std::wstring<sp/>wstr);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Draw_Text(int<sp/>nTextOffsetX<sp/>=<sp/>0,<sp/>int<sp/>nTextOffsetY<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘控件
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Redraw();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>绘制控件（可选绘制子控件）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Draw(bool<sp/>draw_child<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>渲染控件到外部
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Render(Canvas*<sp/>dst,<sp/>RECT*<sp/>pRct<sp/>=<sp/>nullptr,<sp/>int*<sp/>pCount<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置消息响应函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetMsgProcFunc(MESSAGE_PROC_FUNC<sp/>func);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置消息响应函数为静态类函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetMsgProcFunc(MESSAGE_PROC_FUNC_CLASS<sp/>static_class_func,<sp/>void*<sp/>_this);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>更新消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>UpdateMessage(ExMessage<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否悬停
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isHovered()<sp/>const<sp/>{<sp/>return<sp/>m_bHovered;<sp/>}

<sp/><sp/><sp/><sp/><sp/>//<sp/>是否拥有焦点
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isFocused()<sp/>const<sp/>{<sp/>return<sp/>m_bFocused;<sp/>}

<sp/><sp/><sp/><sp/><sp/>//<sp/>是否按下
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isPressed()<sp/>const<sp/>{<sp/>return<sp/>m_bPressed;<sp/>}
<sp/><sp/>};
}

</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>_ExMsg<sp/><sp/><sp/>传入详细消息（坐标已变换到控件）</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="namespace_hi_easy_x_1a2e10a7927d2a46e2c89643adae8094e2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="namespace_hi_easy_x_1a2e10a7927d2a46e2c89643adae8094e2" kindref="member">MESSAGE_PROC_FUNC</ref>)(<ref refid="class_hi_easy_x_1_1_control_base" kindref="compound">ControlBase</ref>*<sp/>_Ctrl,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_MsgId,<sp/>ExMessage<sp/>_ExMsg);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>支持静态类函数作为控件消息处理函数</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="namespace_hi_easy_x_1aa2fcbd9caec6ec195eae63584e9232fe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="namespace_hi_easy_x_1aa2fcbd9caec6ec195eae63584e9232fe" kindref="member">MESSAGE_PROC_FUNC_CLASS</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>_This,<sp/><ref refid="class_hi_easy_x_1_1_control_base" kindref="compound">ControlBase</ref>*<sp/>_Ctrl,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_MsgId,<sp/>ExMessage<sp/>_ExMsg);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>控件基础</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="class_hi_easy_x_1_1_control_base" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_hi_easy_x_1_1_control_base" kindref="compound">ControlBase</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_container" kindref="compound">Container</ref></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="class_hi_easy_x_1_1_control_base_1ac32c07be0d613b508c36220ba7938d06" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1ac32c07be0d613b508c36220ba7938d06" kindref="member">m_bEnabled</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>是否可用 <sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bVisible<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否可见

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘和渲染标志
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bAutoRedrawWhenReceiveMsg<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>当默认消息处理函数接受到消息时，是否自动标识重绘和渲染
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bRedraw<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标识需要重绘
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bRender<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标识需要渲染
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bClear<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标识需要清空某区域
<sp/><sp/><sp/><sp/><sp/>RECT<sp/>m_rctClear<sp/>=<sp/>{<sp/>0<sp/>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>记录需要清空的区域
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bAlwaysRedrawAndRender<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>总是重绘和渲染（占用更高）

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::wstring<sp/>m_wstrText;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>控件文本

<sp/><sp/><sp/><sp/><sp/>Canvas<sp/>m_canvas;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>画布
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BYTE<sp/>m_alpha<sp/>=<sp/>255;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>透明度
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bUseCanvasAlpha<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否使用画布自身的透明度信息
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isAlphaCalculated<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>画布是否已经计算透明混合颜色

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/>m_cBorder<sp/>=<sp/>MODERN_BORDER_GRAY;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>边框颜色
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/>m_cBackground<sp/>=<sp/>CLASSICGRAY;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>背景色
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/>m_cText<sp/>=<sp/>BLACK;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>文本颜色

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bEnableBorder<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否绘制边框
<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>m_nBorderThickness<sp/>=<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>边框粗细

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bCompleteFirstSetRect<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否已经完成第一次设置区域

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase*<sp/>m_pParent<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>父控件
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::list&lt;ControlBase*&gt;<sp/>m_listChild;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>子控件

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bAutoSizeForChild<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>为子控件自动改变大小以容纳控件

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MESSAGE_PROC_FUNC<sp/>m_funcMessageProc<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>消息处理函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MESSAGE_PROC_FUNC_CLASS<sp/>m_funcMessageProc_Class<sp/>=<sp/>nullptr;<sp/><sp/>//<sp/>若绑定的消息处理函数是静态类函数，则记录其地址
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void*<sp/>m_pCalledClass<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>若绑定的消息处理函数是静态类函数，则记录该类指针

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bHovered<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>鼠标是否悬停
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bPressed<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>鼠标是否按下
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bFocused<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否拥有焦点

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>更新区域消息处理
<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>UpdateRect(RECT<sp/>rctOld)<sp/>override;

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标记需要重绘和渲染
<sp/><sp/><sp/><sp/><sp/>void<sp/>MarkNeedRedrawAndRender();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标记需要清空矩形区域
<sp/><sp/><sp/><sp/><sp/>void<sp/>MarkNeedClearRect(RECT<sp/>rct);

<sp/><sp/><sp/><sp/><sp/>//<sp/>绘制子控件
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>DrawChild();

<sp/><sp/><sp/><sp/><sp/>//<sp/>转换消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>ExMessage&amp;<sp/>TransformMessage(ExMessage&amp;<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>分发消息到用户函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>CallUserMsgProcFunc(int<sp/>msgid,<sp/>ExMessage<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>子控件区域更变
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>ChildRectChanged(ControlBase*<sp/>pChild);

<sp/><sp/><sp/>private:

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Init();

<sp/><sp/>public:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase(std::wstring<sp/>wstrText);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase(int<sp/>x,<sp/>int<sp/>y,<sp/>int<sp/>w<sp/>=<sp/>0,<sp/>int<sp/>h<sp/>=<sp/>0,<sp/>std::wstring<sp/>wstrText<sp/>=<sp/>L&quot;&quot;);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>~ControlBase();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase*<sp/>GetParent()<sp/>{<sp/>return<sp/>m_pParent;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置父控件（内部调用 AddChild）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetParent(ControlBase*<sp/>p);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isAutoSizeForChild()<sp/>const<sp/>{<sp/>return<sp/>m_bAutoSizeForChild;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>为子控件自动改变大小以容纳控件（不容纳负坐标部分）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableAutoSizeForChild(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/>std::list&lt;ControlBase*&gt;&amp;<sp/>GetChildList();

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取子控件总数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>GetChildCount();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>AddChild(ControlBase*<sp/>p,<sp/>int<sp/>offset_x<sp/>=<sp/>0,<sp/>int<sp/>offset_y<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>RemoveChild(ControlBase*<sp/>p);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isEnabled()<sp/>const<sp/>{<sp/>return<sp/>m_bEnabled;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetEnable(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isVisible()<sp/>const<sp/>{<sp/>return<sp/>m_bVisible;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetVisible(bool<sp/>visible);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>GetAutoRedrawState()<sp/>const<sp/>{<sp/>return<sp/>m_bAutoRedrawWhenReceiveMsg;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>启用自动重绘（接受到基础消息事件时自动标识需要重绘）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableAutoRedraw(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>Canvas&amp;<sp/>GetCanvas()<sp/>{<sp/>return<sp/>m_canvas;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>COLORREF<sp/>GetBkColor()<sp/>const<sp/>{<sp/>return<sp/>m_cBackground;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetBkColor(COLORREF<sp/>color);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>COLORREF<sp/>GetTextColor()<sp/>const<sp/>{<sp/>return<sp/>m_cText;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetTextColor(COLORREF<sp/>color);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableBorder(bool<sp/>bEnableBorder,<sp/>COLORREF<sp/>color<sp/>=<sp/>BLACK,<sp/>int<sp/>thickness<sp/>=<sp/>1);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetAlpha(BYTE<sp/>alpha,<sp/>bool<sp/>bUseCanvasAlpha,<sp/>bool<sp/>isAlphaCalculated);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>std::wstring<sp/>GetText()<sp/>const<sp/>{<sp/>return<sp/>m_wstrText;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetText(std::wstring<sp/>wstr);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Draw_Text(int<sp/>nTextOffsetX<sp/>=<sp/>0,<sp/>int<sp/>nTextOffsetY<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘控件
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Redraw();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>绘制控件（可选绘制子控件）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Draw(bool<sp/>draw_child<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>渲染控件到外部
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Render(Canvas*<sp/>dst,<sp/>RECT*<sp/>pRct<sp/>=<sp/>nullptr,<sp/>int*<sp/>pCount<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置消息响应函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetMsgProcFunc(MESSAGE_PROC_FUNC<sp/>func);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置消息响应函数为静态类函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetMsgProcFunc(MESSAGE_PROC_FUNC_CLASS<sp/>static_class_func,<sp/>void*<sp/>_this);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>更新消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>UpdateMessage(ExMessage<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否悬停
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isHovered()<sp/>const<sp/>{<sp/>return<sp/>m_bHovered;<sp/>}

<sp/><sp/><sp/><sp/><sp/>//<sp/>是否拥有焦点
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isFocused()<sp/>const<sp/>{<sp/>return<sp/>m_bFocused;<sp/>}

<sp/><sp/><sp/><sp/><sp/>//<sp/>是否按下
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isPressed()<sp/>const<sp/>{<sp/>return<sp/>m_bPressed;<sp/>}
<sp/><sp/>};
}

</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="class_hi_easy_x_1_1_control_base_1a5199ab6ebcf3bef6fd601f60310550fe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1a5199ab6ebcf3bef6fd601f60310550fe" kindref="member">m_bVisible</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>是否可见 
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘和渲染标志
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bAutoRedrawWhenReceiveMsg<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>当默认消息处理函数接受到消息时，是否自动标识重绘和渲染
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bRedraw<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标识需要重绘
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bRender<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标识需要渲染
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bClear<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标识需要清空某区域
<sp/><sp/><sp/><sp/><sp/>RECT<sp/>m_rctClear<sp/>=<sp/>{<sp/>0<sp/>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>记录需要清空的区域
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bAlwaysRedrawAndRender<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>总是重绘和渲染（占用更高）

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::wstring<sp/>m_wstrText;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>控件文本

<sp/><sp/><sp/><sp/><sp/>Canvas<sp/>m_canvas;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>画布
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BYTE<sp/>m_alpha<sp/>=<sp/>255;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>透明度
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bUseCanvasAlpha<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否使用画布自身的透明度信息
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isAlphaCalculated<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>画布是否已经计算透明混合颜色

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/>m_cBorder<sp/>=<sp/>MODERN_BORDER_GRAY;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>边框颜色
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/>m_cBackground<sp/>=<sp/>CLASSICGRAY;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>背景色
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/>m_cText<sp/>=<sp/>BLACK;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>文本颜色

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bEnableBorder<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否绘制边框
<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>m_nBorderThickness<sp/>=<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>边框粗细

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bCompleteFirstSetRect<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否已经完成第一次设置区域

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase*<sp/>m_pParent<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>父控件
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::list&lt;ControlBase*&gt;<sp/>m_listChild;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>子控件

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bAutoSizeForChild<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>为子控件自动改变大小以容纳控件

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MESSAGE_PROC_FUNC<sp/>m_funcMessageProc<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>消息处理函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MESSAGE_PROC_FUNC_CLASS<sp/>m_funcMessageProc_Class<sp/>=<sp/>nullptr;<sp/><sp/>//<sp/>若绑定的消息处理函数是静态类函数，则记录其地址
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void*<sp/>m_pCalledClass<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>若绑定的消息处理函数是静态类函数，则记录该类指针

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bHovered<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>鼠标是否悬停
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bPressed<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>鼠标是否按下
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bFocused<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否拥有焦点

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>更新区域消息处理
<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>UpdateRect(RECT<sp/>rctOld)<sp/>override;

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标记需要重绘和渲染
<sp/><sp/><sp/><sp/><sp/>void<sp/>MarkNeedRedrawAndRender();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标记需要清空矩形区域
<sp/><sp/><sp/><sp/><sp/>void<sp/>MarkNeedClearRect(RECT<sp/>rct);

<sp/><sp/><sp/><sp/><sp/>//<sp/>绘制子控件
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>DrawChild();

<sp/><sp/><sp/><sp/><sp/>//<sp/>转换消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>ExMessage&amp;<sp/>TransformMessage(ExMessage&amp;<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>分发消息到用户函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>CallUserMsgProcFunc(int<sp/>msgid,<sp/>ExMessage<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>子控件区域更变
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>ChildRectChanged(ControlBase*<sp/>pChild);

<sp/><sp/><sp/>private:

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Init();

<sp/><sp/>public:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase(std::wstring<sp/>wstrText);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase(int<sp/>x,<sp/>int<sp/>y,<sp/>int<sp/>w<sp/>=<sp/>0,<sp/>int<sp/>h<sp/>=<sp/>0,<sp/>std::wstring<sp/>wstrText<sp/>=<sp/>L&quot;&quot;);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>~ControlBase();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase*<sp/>GetParent()<sp/>{<sp/>return<sp/>m_pParent;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置父控件（内部调用 AddChild）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetParent(ControlBase*<sp/>p);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isAutoSizeForChild()<sp/>const<sp/>{<sp/>return<sp/>m_bAutoSizeForChild;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>为子控件自动改变大小以容纳控件（不容纳负坐标部分）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableAutoSizeForChild(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/>std::list&lt;ControlBase*&gt;&amp;<sp/>GetChildList();

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取子控件总数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>GetChildCount();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>AddChild(ControlBase*<sp/>p,<sp/>int<sp/>offset_x<sp/>=<sp/>0,<sp/>int<sp/>offset_y<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>RemoveChild(ControlBase*<sp/>p);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isEnabled()<sp/>const<sp/>{<sp/>return<sp/>m_bEnabled;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetEnable(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isVisible()<sp/>const<sp/>{<sp/>return<sp/>m_bVisible;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetVisible(bool<sp/>visible);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>GetAutoRedrawState()<sp/>const<sp/>{<sp/>return<sp/>m_bAutoRedrawWhenReceiveMsg;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>启用自动重绘（接受到基础消息事件时自动标识需要重绘）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableAutoRedraw(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>Canvas&amp;<sp/>GetCanvas()<sp/>{<sp/>return<sp/>m_canvas;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>COLORREF<sp/>GetBkColor()<sp/>const<sp/>{<sp/>return<sp/>m_cBackground;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetBkColor(COLORREF<sp/>color);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>COLORREF<sp/>GetTextColor()<sp/>const<sp/>{<sp/>return<sp/>m_cText;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetTextColor(COLORREF<sp/>color);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableBorder(bool<sp/>bEnableBorder,<sp/>COLORREF<sp/>color<sp/>=<sp/>BLACK,<sp/>int<sp/>thickness<sp/>=<sp/>1);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetAlpha(BYTE<sp/>alpha,<sp/>bool<sp/>bUseCanvasAlpha,<sp/>bool<sp/>isAlphaCalculated);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>std::wstring<sp/>GetText()<sp/>const<sp/>{<sp/>return<sp/>m_wstrText;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetText(std::wstring<sp/>wstr);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Draw_Text(int<sp/>nTextOffsetX<sp/>=<sp/>0,<sp/>int<sp/>nTextOffsetY<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘控件
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Redraw();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>绘制控件（可选绘制子控件）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Draw(bool<sp/>draw_child<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>渲染控件到外部
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Render(Canvas*<sp/>dst,<sp/>RECT*<sp/>pRct<sp/>=<sp/>nullptr,<sp/>int*<sp/>pCount<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置消息响应函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetMsgProcFunc(MESSAGE_PROC_FUNC<sp/>func);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置消息响应函数为静态类函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetMsgProcFunc(MESSAGE_PROC_FUNC_CLASS<sp/>static_class_func,<sp/>void*<sp/>_this);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>更新消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>UpdateMessage(ExMessage<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否悬停
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isHovered()<sp/>const<sp/>{<sp/>return<sp/>m_bHovered;<sp/>}

<sp/><sp/><sp/><sp/><sp/>//<sp/>是否拥有焦点
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isFocused()<sp/>const<sp/>{<sp/>return<sp/>m_bFocused;<sp/>}

<sp/><sp/><sp/><sp/><sp/>//<sp/>是否按下
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isPressed()<sp/>const<sp/>{<sp/>return<sp/>m_bPressed;<sp/>}
<sp/><sp/>};
}

</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>重绘和渲染标志</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="class_hi_easy_x_1_1_control_base_1a5b0539e21f7013d44646d3ca2838ed33" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1a5b0539e21f7013d44646d3ca2838ed33" kindref="member">m_bAutoRedrawWhenReceiveMsg</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>当默认消息处理函数接受到消息时，是否自动标识重绘和渲染</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="class_hi_easy_x_1_1_control_base_1a206af1bbabb242872b6128e84972f256" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1a206af1bbabb242872b6128e84972f256" kindref="member">m_bRedraw</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>标识需要重绘 <sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bRender<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标识需要渲染
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bClear<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标识需要清空某区域
<sp/><sp/><sp/><sp/><sp/>RECT<sp/>m_rctClear<sp/>=<sp/>{<sp/>0<sp/>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>记录需要清空的区域
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bAlwaysRedrawAndRender<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>总是重绘和渲染（占用更高）

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::wstring<sp/>m_wstrText;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>控件文本

<sp/><sp/><sp/><sp/><sp/>Canvas<sp/>m_canvas;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>画布
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BYTE<sp/>m_alpha<sp/>=<sp/>255;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>透明度
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bUseCanvasAlpha<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否使用画布自身的透明度信息
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isAlphaCalculated<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>画布是否已经计算透明混合颜色

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/>m_cBorder<sp/>=<sp/>MODERN_BORDER_GRAY;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>边框颜色
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/>m_cBackground<sp/>=<sp/>CLASSICGRAY;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>背景色
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/>m_cText<sp/>=<sp/>BLACK;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>文本颜色

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bEnableBorder<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否绘制边框
<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>m_nBorderThickness<sp/>=<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>边框粗细

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bCompleteFirstSetRect<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否已经完成第一次设置区域

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase*<sp/>m_pParent<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>父控件
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::list&lt;ControlBase*&gt;<sp/>m_listChild;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>子控件

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bAutoSizeForChild<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>为子控件自动改变大小以容纳控件

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MESSAGE_PROC_FUNC<sp/>m_funcMessageProc<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>消息处理函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MESSAGE_PROC_FUNC_CLASS<sp/>m_funcMessageProc_Class<sp/>=<sp/>nullptr;<sp/><sp/>//<sp/>若绑定的消息处理函数是静态类函数，则记录其地址
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void*<sp/>m_pCalledClass<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>若绑定的消息处理函数是静态类函数，则记录该类指针

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bHovered<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>鼠标是否悬停
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bPressed<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>鼠标是否按下
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bFocused<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否拥有焦点

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>更新区域消息处理
<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>UpdateRect(RECT<sp/>rctOld)<sp/>override;

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标记需要重绘和渲染
<sp/><sp/><sp/><sp/><sp/>void<sp/>MarkNeedRedrawAndRender();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标记需要清空矩形区域
<sp/><sp/><sp/><sp/><sp/>void<sp/>MarkNeedClearRect(RECT<sp/>rct);

<sp/><sp/><sp/><sp/><sp/>//<sp/>绘制子控件
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>DrawChild();

<sp/><sp/><sp/><sp/><sp/>//<sp/>转换消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>ExMessage&amp;<sp/>TransformMessage(ExMessage&amp;<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>分发消息到用户函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>CallUserMsgProcFunc(int<sp/>msgid,<sp/>ExMessage<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>子控件区域更变
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>ChildRectChanged(ControlBase*<sp/>pChild);

<sp/><sp/><sp/>private:

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Init();

<sp/><sp/>public:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase(std::wstring<sp/>wstrText);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase(int<sp/>x,<sp/>int<sp/>y,<sp/>int<sp/>w<sp/>=<sp/>0,<sp/>int<sp/>h<sp/>=<sp/>0,<sp/>std::wstring<sp/>wstrText<sp/>=<sp/>L&quot;&quot;);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>~ControlBase();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase*<sp/>GetParent()<sp/>{<sp/>return<sp/>m_pParent;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置父控件（内部调用 AddChild）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetParent(ControlBase*<sp/>p);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isAutoSizeForChild()<sp/>const<sp/>{<sp/>return<sp/>m_bAutoSizeForChild;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>为子控件自动改变大小以容纳控件（不容纳负坐标部分）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableAutoSizeForChild(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/>std::list&lt;ControlBase*&gt;&amp;<sp/>GetChildList();

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取子控件总数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>GetChildCount();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>AddChild(ControlBase*<sp/>p,<sp/>int<sp/>offset_x<sp/>=<sp/>0,<sp/>int<sp/>offset_y<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>RemoveChild(ControlBase*<sp/>p);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isEnabled()<sp/>const<sp/>{<sp/>return<sp/>m_bEnabled;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetEnable(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isVisible()<sp/>const<sp/>{<sp/>return<sp/>m_bVisible;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetVisible(bool<sp/>visible);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>GetAutoRedrawState()<sp/>const<sp/>{<sp/>return<sp/>m_bAutoRedrawWhenReceiveMsg;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>启用自动重绘（接受到基础消息事件时自动标识需要重绘）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableAutoRedraw(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>Canvas&amp;<sp/>GetCanvas()<sp/>{<sp/>return<sp/>m_canvas;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>COLORREF<sp/>GetBkColor()<sp/>const<sp/>{<sp/>return<sp/>m_cBackground;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetBkColor(COLORREF<sp/>color);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>COLORREF<sp/>GetTextColor()<sp/>const<sp/>{<sp/>return<sp/>m_cText;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetTextColor(COLORREF<sp/>color);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableBorder(bool<sp/>bEnableBorder,<sp/>COLORREF<sp/>color<sp/>=<sp/>BLACK,<sp/>int<sp/>thickness<sp/>=<sp/>1);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetAlpha(BYTE<sp/>alpha,<sp/>bool<sp/>bUseCanvasAlpha,<sp/>bool<sp/>isAlphaCalculated);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>std::wstring<sp/>GetText()<sp/>const<sp/>{<sp/>return<sp/>m_wstrText;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetText(std::wstring<sp/>wstr);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Draw_Text(int<sp/>nTextOffsetX<sp/>=<sp/>0,<sp/>int<sp/>nTextOffsetY<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘控件
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Redraw();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>绘制控件（可选绘制子控件）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Draw(bool<sp/>draw_child<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>渲染控件到外部
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Render(Canvas*<sp/>dst,<sp/>RECT*<sp/>pRct<sp/>=<sp/>nullptr,<sp/>int*<sp/>pCount<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置消息响应函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetMsgProcFunc(MESSAGE_PROC_FUNC<sp/>func);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置消息响应函数为静态类函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetMsgProcFunc(MESSAGE_PROC_FUNC_CLASS<sp/>static_class_func,<sp/>void*<sp/>_this);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>更新消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>UpdateMessage(ExMessage<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否悬停
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isHovered()<sp/>const<sp/>{<sp/>return<sp/>m_bHovered;<sp/>}

<sp/><sp/><sp/><sp/><sp/>//<sp/>是否拥有焦点
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isFocused()<sp/>const<sp/>{<sp/>return<sp/>m_bFocused;<sp/>}

<sp/><sp/><sp/><sp/><sp/>//<sp/>是否按下
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isPressed()<sp/>const<sp/>{<sp/>return<sp/>m_bPressed;<sp/>}
<sp/><sp/>};
}

</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="class_hi_easy_x_1_1_control_base_1a4cfe720d3e77a2c15d87b4da565a1c37" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1a4cfe720d3e77a2c15d87b4da565a1c37" kindref="member">m_bRender</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>标识需要渲染</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="class_hi_easy_x_1_1_control_base_1ae404f7e5aab1fbfd611776c7995996d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1ae404f7e5aab1fbfd611776c7995996d5" kindref="member">m_bClear</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>标识需要清空某区域</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="class_hi_easy_x_1_1_control_base_1a6bbf7e24f18391620d371e05892ad8d7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RECT<sp/><ref refid="class_hi_easy_x_1_1_control_base_1a6bbf7e24f18391620d371e05892ad8d7" kindref="member">m_rctClear</ref><sp/>=<sp/>{<sp/>0<sp/>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>记录需要清空的区域 <sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bAlwaysRedrawAndRender<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>总是重绘和渲染（占用更高）

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::wstring<sp/>m_wstrText;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>控件文本

<sp/><sp/><sp/><sp/><sp/>Canvas<sp/>m_canvas;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>画布
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BYTE<sp/>m_alpha<sp/>=<sp/>255;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>透明度
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bUseCanvasAlpha<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否使用画布自身的透明度信息
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isAlphaCalculated<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>画布是否已经计算透明混合颜色

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/>m_cBorder<sp/>=<sp/>MODERN_BORDER_GRAY;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>边框颜色
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/>m_cBackground<sp/>=<sp/>CLASSICGRAY;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>背景色
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/>m_cText<sp/>=<sp/>BLACK;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>文本颜色

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bEnableBorder<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否绘制边框
<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>m_nBorderThickness<sp/>=<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>边框粗细

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bCompleteFirstSetRect<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否已经完成第一次设置区域

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase*<sp/>m_pParent<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>父控件
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::list&lt;ControlBase*&gt;<sp/>m_listChild;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>子控件

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bAutoSizeForChild<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>为子控件自动改变大小以容纳控件

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MESSAGE_PROC_FUNC<sp/>m_funcMessageProc<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>消息处理函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MESSAGE_PROC_FUNC_CLASS<sp/>m_funcMessageProc_Class<sp/>=<sp/>nullptr;<sp/><sp/>//<sp/>若绑定的消息处理函数是静态类函数，则记录其地址
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void*<sp/>m_pCalledClass<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>若绑定的消息处理函数是静态类函数，则记录该类指针

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bHovered<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>鼠标是否悬停
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bPressed<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>鼠标是否按下
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bFocused<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否拥有焦点

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>更新区域消息处理
<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>UpdateRect(RECT<sp/>rctOld)<sp/>override;

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标记需要重绘和渲染
<sp/><sp/><sp/><sp/><sp/>void<sp/>MarkNeedRedrawAndRender();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标记需要清空矩形区域
<sp/><sp/><sp/><sp/><sp/>void<sp/>MarkNeedClearRect(RECT<sp/>rct);

<sp/><sp/><sp/><sp/><sp/>//<sp/>绘制子控件
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>DrawChild();

<sp/><sp/><sp/><sp/><sp/>//<sp/>转换消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>ExMessage&amp;<sp/>TransformMessage(ExMessage&amp;<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>分发消息到用户函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>CallUserMsgProcFunc(int<sp/>msgid,<sp/>ExMessage<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>子控件区域更变
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>ChildRectChanged(ControlBase*<sp/>pChild);

<sp/><sp/><sp/>private:

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Init();

<sp/><sp/>public:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase(std::wstring<sp/>wstrText);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase(int<sp/>x,<sp/>int<sp/>y,<sp/>int<sp/>w<sp/>=<sp/>0,<sp/>int<sp/>h<sp/>=<sp/>0,<sp/>std::wstring<sp/>wstrText<sp/>=<sp/>L&quot;&quot;);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>~ControlBase();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase*<sp/>GetParent()<sp/>{<sp/>return<sp/>m_pParent;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置父控件（内部调用 AddChild）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetParent(ControlBase*<sp/>p);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isAutoSizeForChild()<sp/>const<sp/>{<sp/>return<sp/>m_bAutoSizeForChild;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>为子控件自动改变大小以容纳控件（不容纳负坐标部分）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableAutoSizeForChild(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/>std::list&lt;ControlBase*&gt;&amp;<sp/>GetChildList();

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取子控件总数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>GetChildCount();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>AddChild(ControlBase*<sp/>p,<sp/>int<sp/>offset_x<sp/>=<sp/>0,<sp/>int<sp/>offset_y<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>RemoveChild(ControlBase*<sp/>p);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isEnabled()<sp/>const<sp/>{<sp/>return<sp/>m_bEnabled;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetEnable(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isVisible()<sp/>const<sp/>{<sp/>return<sp/>m_bVisible;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetVisible(bool<sp/>visible);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>GetAutoRedrawState()<sp/>const<sp/>{<sp/>return<sp/>m_bAutoRedrawWhenReceiveMsg;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>启用自动重绘（接受到基础消息事件时自动标识需要重绘）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableAutoRedraw(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>Canvas&amp;<sp/>GetCanvas()<sp/>{<sp/>return<sp/>m_canvas;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>COLORREF<sp/>GetBkColor()<sp/>const<sp/>{<sp/>return<sp/>m_cBackground;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetBkColor(COLORREF<sp/>color);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>COLORREF<sp/>GetTextColor()<sp/>const<sp/>{<sp/>return<sp/>m_cText;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetTextColor(COLORREF<sp/>color);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableBorder(bool<sp/>bEnableBorder,<sp/>COLORREF<sp/>color<sp/>=<sp/>BLACK,<sp/>int<sp/>thickness<sp/>=<sp/>1);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetAlpha(BYTE<sp/>alpha,<sp/>bool<sp/>bUseCanvasAlpha,<sp/>bool<sp/>isAlphaCalculated);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>std::wstring<sp/>GetText()<sp/>const<sp/>{<sp/>return<sp/>m_wstrText;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetText(std::wstring<sp/>wstr);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Draw_Text(int<sp/>nTextOffsetX<sp/>=<sp/>0,<sp/>int<sp/>nTextOffsetY<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘控件
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Redraw();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>绘制控件（可选绘制子控件）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Draw(bool<sp/>draw_child<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>渲染控件到外部
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Render(Canvas*<sp/>dst,<sp/>RECT*<sp/>pRct<sp/>=<sp/>nullptr,<sp/>int*<sp/>pCount<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置消息响应函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetMsgProcFunc(MESSAGE_PROC_FUNC<sp/>func);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置消息响应函数为静态类函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetMsgProcFunc(MESSAGE_PROC_FUNC_CLASS<sp/>static_class_func,<sp/>void*<sp/>_this);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>更新消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>UpdateMessage(ExMessage<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否悬停
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isHovered()<sp/>const<sp/>{<sp/>return<sp/>m_bHovered;<sp/>}

<sp/><sp/><sp/><sp/><sp/>//<sp/>是否拥有焦点
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isFocused()<sp/>const<sp/>{<sp/>return<sp/>m_bFocused;<sp/>}

<sp/><sp/><sp/><sp/><sp/>//<sp/>是否按下
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isPressed()<sp/>const<sp/>{<sp/>return<sp/>m_bPressed;<sp/>}
<sp/><sp/>};
}

</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="class_hi_easy_x_1_1_control_base_1a50af68164c7790b3f06af11301a866b0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1a50af68164c7790b3f06af11301a866b0" kindref="member">m_bAlwaysRedrawAndRender</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>总是重绘和渲染（占用更高）</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="class_hi_easy_x_1_1_control_base_1a0f51d324623ae83c706c6c3a9a6c9d3b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::wstring<sp/><ref refid="class_hi_easy_x_1_1_control_base_1a0f51d324623ae83c706c6c3a9a6c9d3b" kindref="member">m_wstrText</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>控件文本</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="class_hi_easy_x_1_1_control_base_1ae95bbe48d81bb21b7e760ff792af059a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hi_easy_x_1_1_canvas" kindref="compound">Canvas</ref><sp/><ref refid="class_hi_easy_x_1_1_control_base_1ae95bbe48d81bb21b7e760ff792af059a" kindref="member">m_canvas</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>画布</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="class_hi_easy_x_1_1_control_base_1aef9fc2d0d6365a371c9ce13ff86752b9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BYTE<sp/><ref refid="class_hi_easy_x_1_1_control_base_1aef9fc2d0d6365a371c9ce13ff86752b9" kindref="member">m_alpha</ref><sp/>=<sp/>255;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>透明度 <sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bUseCanvasAlpha<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否使用画布自身的透明度信息
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isAlphaCalculated<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>画布是否已经计算透明混合颜色

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/>m_cBorder<sp/>=<sp/>MODERN_BORDER_GRAY;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>边框颜色
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/>m_cBackground<sp/>=<sp/>CLASSICGRAY;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>背景色
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/>m_cText<sp/>=<sp/>BLACK;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>文本颜色

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bEnableBorder<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否绘制边框
<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>m_nBorderThickness<sp/>=<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>边框粗细

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bCompleteFirstSetRect<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否已经完成第一次设置区域

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase*<sp/>m_pParent<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>父控件
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::list&lt;ControlBase*&gt;<sp/>m_listChild;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>子控件

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bAutoSizeForChild<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>为子控件自动改变大小以容纳控件

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MESSAGE_PROC_FUNC<sp/>m_funcMessageProc<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>消息处理函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MESSAGE_PROC_FUNC_CLASS<sp/>m_funcMessageProc_Class<sp/>=<sp/>nullptr;<sp/><sp/>//<sp/>若绑定的消息处理函数是静态类函数，则记录其地址
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void*<sp/>m_pCalledClass<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>若绑定的消息处理函数是静态类函数，则记录该类指针

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bHovered<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>鼠标是否悬停
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bPressed<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>鼠标是否按下
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bFocused<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否拥有焦点

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>更新区域消息处理
<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>UpdateRect(RECT<sp/>rctOld)<sp/>override;

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标记需要重绘和渲染
<sp/><sp/><sp/><sp/><sp/>void<sp/>MarkNeedRedrawAndRender();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标记需要清空矩形区域
<sp/><sp/><sp/><sp/><sp/>void<sp/>MarkNeedClearRect(RECT<sp/>rct);

<sp/><sp/><sp/><sp/><sp/>//<sp/>绘制子控件
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>DrawChild();

<sp/><sp/><sp/><sp/><sp/>//<sp/>转换消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>ExMessage&amp;<sp/>TransformMessage(ExMessage&amp;<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>分发消息到用户函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>CallUserMsgProcFunc(int<sp/>msgid,<sp/>ExMessage<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>子控件区域更变
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>ChildRectChanged(ControlBase*<sp/>pChild);

<sp/><sp/><sp/>private:

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Init();

<sp/><sp/>public:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase(std::wstring<sp/>wstrText);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase(int<sp/>x,<sp/>int<sp/>y,<sp/>int<sp/>w<sp/>=<sp/>0,<sp/>int<sp/>h<sp/>=<sp/>0,<sp/>std::wstring<sp/>wstrText<sp/>=<sp/>L&quot;&quot;);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>~ControlBase();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase*<sp/>GetParent()<sp/>{<sp/>return<sp/>m_pParent;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置父控件（内部调用 AddChild）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetParent(ControlBase*<sp/>p);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isAutoSizeForChild()<sp/>const<sp/>{<sp/>return<sp/>m_bAutoSizeForChild;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>为子控件自动改变大小以容纳控件（不容纳负坐标部分）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableAutoSizeForChild(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/>std::list&lt;ControlBase*&gt;&amp;<sp/>GetChildList();

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取子控件总数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>GetChildCount();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>AddChild(ControlBase*<sp/>p,<sp/>int<sp/>offset_x<sp/>=<sp/>0,<sp/>int<sp/>offset_y<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>RemoveChild(ControlBase*<sp/>p);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isEnabled()<sp/>const<sp/>{<sp/>return<sp/>m_bEnabled;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetEnable(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isVisible()<sp/>const<sp/>{<sp/>return<sp/>m_bVisible;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetVisible(bool<sp/>visible);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>GetAutoRedrawState()<sp/>const<sp/>{<sp/>return<sp/>m_bAutoRedrawWhenReceiveMsg;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>启用自动重绘（接受到基础消息事件时自动标识需要重绘）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableAutoRedraw(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>Canvas&amp;<sp/>GetCanvas()<sp/>{<sp/>return<sp/>m_canvas;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>COLORREF<sp/>GetBkColor()<sp/>const<sp/>{<sp/>return<sp/>m_cBackground;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetBkColor(COLORREF<sp/>color);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>COLORREF<sp/>GetTextColor()<sp/>const<sp/>{<sp/>return<sp/>m_cText;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetTextColor(COLORREF<sp/>color);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableBorder(bool<sp/>bEnableBorder,<sp/>COLORREF<sp/>color<sp/>=<sp/>BLACK,<sp/>int<sp/>thickness<sp/>=<sp/>1);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetAlpha(BYTE<sp/>alpha,<sp/>bool<sp/>bUseCanvasAlpha,<sp/>bool<sp/>isAlphaCalculated);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>std::wstring<sp/>GetText()<sp/>const<sp/>{<sp/>return<sp/>m_wstrText;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetText(std::wstring<sp/>wstr);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Draw_Text(int<sp/>nTextOffsetX<sp/>=<sp/>0,<sp/>int<sp/>nTextOffsetY<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘控件
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Redraw();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>绘制控件（可选绘制子控件）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Draw(bool<sp/>draw_child<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>渲染控件到外部
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Render(Canvas*<sp/>dst,<sp/>RECT*<sp/>pRct<sp/>=<sp/>nullptr,<sp/>int*<sp/>pCount<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置消息响应函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetMsgProcFunc(MESSAGE_PROC_FUNC<sp/>func);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置消息响应函数为静态类函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetMsgProcFunc(MESSAGE_PROC_FUNC_CLASS<sp/>static_class_func,<sp/>void*<sp/>_this);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>更新消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>UpdateMessage(ExMessage<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否悬停
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isHovered()<sp/>const<sp/>{<sp/>return<sp/>m_bHovered;<sp/>}

<sp/><sp/><sp/><sp/><sp/>//<sp/>是否拥有焦点
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isFocused()<sp/>const<sp/>{<sp/>return<sp/>m_bFocused;<sp/>}

<sp/><sp/><sp/><sp/><sp/>//<sp/>是否按下
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isPressed()<sp/>const<sp/>{<sp/>return<sp/>m_bPressed;<sp/>}
<sp/><sp/>};
}

</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="class_hi_easy_x_1_1_control_base_1a6b0caf2ebbdd099e6d36fba2d1e38e1c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1a6b0caf2ebbdd099e6d36fba2d1e38e1c" kindref="member">m_bUseCanvasAlpha</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>是否使用画布自身的透明度信息</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="class_hi_easy_x_1_1_control_base_1a255c9dc0ff8db31e4371006e3dd2364d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1a255c9dc0ff8db31e4371006e3dd2364d" kindref="member">m_isAlphaCalculated</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>画布是否已经计算透明混合颜色</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="class_hi_easy_x_1_1_control_base_1aebce31b4e9be410a4d0a247616c16ad4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/><ref refid="class_hi_easy_x_1_1_control_base_1aebce31b4e9be410a4d0a247616c16ad4" kindref="member">m_cBorder</ref><sp/>=<sp/><ref refid="_hi_macro_8h_1abe7480432985b9d42c700776b78a3e1aa686c9886dae71099b9e3d527ec953f68" kindref="member">MODERN_BORDER_GRAY</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>边框颜色</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="class_hi_easy_x_1_1_control_base_1a56ef733920e54f454c990fd1aebfac1f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/><ref refid="class_hi_easy_x_1_1_control_base_1a56ef733920e54f454c990fd1aebfac1f" kindref="member">m_cBackground</ref><sp/>=<sp/><ref refid="_hi_macro_8h_1abe7480432985b9d42c700776b78a3e1aaa1be8de6cb4200bcdfb495b088e58a2b" kindref="member">CLASSICGRAY</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>背景色</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="class_hi_easy_x_1_1_control_base_1aaaecf1b442d34f7674a4f3da49cb1ea7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORREF<sp/><ref refid="class_hi_easy_x_1_1_control_base_1aaaecf1b442d34f7674a4f3da49cb1ea7" kindref="member">m_cText</ref><sp/>=<sp/>BLACK;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>文本颜色</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="class_hi_easy_x_1_1_control_base_1ae0ec54aca4911bd3eeb388c77917cb38" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1ae0ec54aca4911bd3eeb388c77917cb38" kindref="member">m_bEnableBorder</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>是否绘制边框 <sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>m_nBorderThickness<sp/>=<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>边框粗细

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bCompleteFirstSetRect<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否已经完成第一次设置区域

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase*<sp/>m_pParent<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>父控件
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::list&lt;ControlBase*&gt;<sp/>m_listChild;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>子控件

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bAutoSizeForChild<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>为子控件自动改变大小以容纳控件

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MESSAGE_PROC_FUNC<sp/>m_funcMessageProc<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>消息处理函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MESSAGE_PROC_FUNC_CLASS<sp/>m_funcMessageProc_Class<sp/>=<sp/>nullptr;<sp/><sp/>//<sp/>若绑定的消息处理函数是静态类函数，则记录其地址
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void*<sp/>m_pCalledClass<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>若绑定的消息处理函数是静态类函数，则记录该类指针

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bHovered<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>鼠标是否悬停
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bPressed<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>鼠标是否按下
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bFocused<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否拥有焦点

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>更新区域消息处理
<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>UpdateRect(RECT<sp/>rctOld)<sp/>override;

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标记需要重绘和渲染
<sp/><sp/><sp/><sp/><sp/>void<sp/>MarkNeedRedrawAndRender();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标记需要清空矩形区域
<sp/><sp/><sp/><sp/><sp/>void<sp/>MarkNeedClearRect(RECT<sp/>rct);

<sp/><sp/><sp/><sp/><sp/>//<sp/>绘制子控件
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>DrawChild();

<sp/><sp/><sp/><sp/><sp/>//<sp/>转换消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>ExMessage&amp;<sp/>TransformMessage(ExMessage&amp;<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>分发消息到用户函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>CallUserMsgProcFunc(int<sp/>msgid,<sp/>ExMessage<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>子控件区域更变
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>ChildRectChanged(ControlBase*<sp/>pChild);

<sp/><sp/><sp/>private:

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Init();

<sp/><sp/>public:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase(std::wstring<sp/>wstrText);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase(int<sp/>x,<sp/>int<sp/>y,<sp/>int<sp/>w<sp/>=<sp/>0,<sp/>int<sp/>h<sp/>=<sp/>0,<sp/>std::wstring<sp/>wstrText<sp/>=<sp/>L&quot;&quot;);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>~ControlBase();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase*<sp/>GetParent()<sp/>{<sp/>return<sp/>m_pParent;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置父控件（内部调用 AddChild）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetParent(ControlBase*<sp/>p);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isAutoSizeForChild()<sp/>const<sp/>{<sp/>return<sp/>m_bAutoSizeForChild;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>为子控件自动改变大小以容纳控件（不容纳负坐标部分）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableAutoSizeForChild(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/>std::list&lt;ControlBase*&gt;&amp;<sp/>GetChildList();

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取子控件总数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>GetChildCount();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>AddChild(ControlBase*<sp/>p,<sp/>int<sp/>offset_x<sp/>=<sp/>0,<sp/>int<sp/>offset_y<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>RemoveChild(ControlBase*<sp/>p);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isEnabled()<sp/>const<sp/>{<sp/>return<sp/>m_bEnabled;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetEnable(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isVisible()<sp/>const<sp/>{<sp/>return<sp/>m_bVisible;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetVisible(bool<sp/>visible);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>GetAutoRedrawState()<sp/>const<sp/>{<sp/>return<sp/>m_bAutoRedrawWhenReceiveMsg;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>启用自动重绘（接受到基础消息事件时自动标识需要重绘）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableAutoRedraw(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>Canvas&amp;<sp/>GetCanvas()<sp/>{<sp/>return<sp/>m_canvas;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>COLORREF<sp/>GetBkColor()<sp/>const<sp/>{<sp/>return<sp/>m_cBackground;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetBkColor(COLORREF<sp/>color);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>COLORREF<sp/>GetTextColor()<sp/>const<sp/>{<sp/>return<sp/>m_cText;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetTextColor(COLORREF<sp/>color);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableBorder(bool<sp/>bEnableBorder,<sp/>COLORREF<sp/>color<sp/>=<sp/>BLACK,<sp/>int<sp/>thickness<sp/>=<sp/>1);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetAlpha(BYTE<sp/>alpha,<sp/>bool<sp/>bUseCanvasAlpha,<sp/>bool<sp/>isAlphaCalculated);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>std::wstring<sp/>GetText()<sp/>const<sp/>{<sp/>return<sp/>m_wstrText;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetText(std::wstring<sp/>wstr);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Draw_Text(int<sp/>nTextOffsetX<sp/>=<sp/>0,<sp/>int<sp/>nTextOffsetY<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘控件
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Redraw();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>绘制控件（可选绘制子控件）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Draw(bool<sp/>draw_child<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>渲染控件到外部
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Render(Canvas*<sp/>dst,<sp/>RECT*<sp/>pRct<sp/>=<sp/>nullptr,<sp/>int*<sp/>pCount<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置消息响应函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetMsgProcFunc(MESSAGE_PROC_FUNC<sp/>func);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置消息响应函数为静态类函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetMsgProcFunc(MESSAGE_PROC_FUNC_CLASS<sp/>static_class_func,<sp/>void*<sp/>_this);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>更新消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>UpdateMessage(ExMessage<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否悬停
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isHovered()<sp/>const<sp/>{<sp/>return<sp/>m_bHovered;<sp/>}

<sp/><sp/><sp/><sp/><sp/>//<sp/>是否拥有焦点
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isFocused()<sp/>const<sp/>{<sp/>return<sp/>m_bFocused;<sp/>}

<sp/><sp/><sp/><sp/><sp/>//<sp/>是否按下
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isPressed()<sp/>const<sp/>{<sp/>return<sp/>m_bPressed;<sp/>}
<sp/><sp/>};
}

</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="class_hi_easy_x_1_1_control_base_1aef9e13f82ff2956fc0d34e1de4713e8c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1aef9e13f82ff2956fc0d34e1de4713e8c" kindref="member">m_nBorderThickness</ref><sp/>=<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>边框粗细</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="class_hi_easy_x_1_1_control_base_1ac3032416bb487fb5ee04160f2f2b3bd5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1ac3032416bb487fb5ee04160f2f2b3bd5" kindref="member">m_bCompleteFirstSetRect</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>是否已经完成第一次设置区域 
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase*<sp/>m_pParent<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>父控件
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::list&lt;ControlBase*&gt;<sp/>m_listChild;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>子控件

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bAutoSizeForChild<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>为子控件自动改变大小以容纳控件

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MESSAGE_PROC_FUNC<sp/>m_funcMessageProc<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>消息处理函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MESSAGE_PROC_FUNC_CLASS<sp/>m_funcMessageProc_Class<sp/>=<sp/>nullptr;<sp/><sp/>//<sp/>若绑定的消息处理函数是静态类函数，则记录其地址
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void*<sp/>m_pCalledClass<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>若绑定的消息处理函数是静态类函数，则记录该类指针

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bHovered<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>鼠标是否悬停
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bPressed<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>鼠标是否按下
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_bFocused<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否拥有焦点

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>更新区域消息处理
<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>UpdateRect(RECT<sp/>rctOld)<sp/>override;

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标记需要重绘和渲染
<sp/><sp/><sp/><sp/><sp/>void<sp/>MarkNeedRedrawAndRender();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标记需要清空矩形区域
<sp/><sp/><sp/><sp/><sp/>void<sp/>MarkNeedClearRect(RECT<sp/>rct);

<sp/><sp/><sp/><sp/><sp/>//<sp/>绘制子控件
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>DrawChild();

<sp/><sp/><sp/><sp/><sp/>//<sp/>转换消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>ExMessage&amp;<sp/>TransformMessage(ExMessage&amp;<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>分发消息到用户函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>CallUserMsgProcFunc(int<sp/>msgid,<sp/>ExMessage<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>子控件区域更变
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>ChildRectChanged(ControlBase*<sp/>pChild);

<sp/><sp/><sp/>private:

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Init();

<sp/><sp/>public:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase(std::wstring<sp/>wstrText);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase(int<sp/>x,<sp/>int<sp/>y,<sp/>int<sp/>w<sp/>=<sp/>0,<sp/>int<sp/>h<sp/>=<sp/>0,<sp/>std::wstring<sp/>wstrText<sp/>=<sp/>L&quot;&quot;);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>~ControlBase();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase*<sp/>GetParent()<sp/>{<sp/>return<sp/>m_pParent;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置父控件（内部调用 AddChild）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetParent(ControlBase*<sp/>p);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isAutoSizeForChild()<sp/>const<sp/>{<sp/>return<sp/>m_bAutoSizeForChild;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>为子控件自动改变大小以容纳控件（不容纳负坐标部分）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableAutoSizeForChild(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/>std::list&lt;ControlBase*&gt;&amp;<sp/>GetChildList();

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取子控件总数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>GetChildCount();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>AddChild(ControlBase*<sp/>p,<sp/>int<sp/>offset_x<sp/>=<sp/>0,<sp/>int<sp/>offset_y<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>RemoveChild(ControlBase*<sp/>p);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isEnabled()<sp/>const<sp/>{<sp/>return<sp/>m_bEnabled;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetEnable(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isVisible()<sp/>const<sp/>{<sp/>return<sp/>m_bVisible;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetVisible(bool<sp/>visible);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>GetAutoRedrawState()<sp/>const<sp/>{<sp/>return<sp/>m_bAutoRedrawWhenReceiveMsg;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>启用自动重绘（接受到基础消息事件时自动标识需要重绘）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableAutoRedraw(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>Canvas&amp;<sp/>GetCanvas()<sp/>{<sp/>return<sp/>m_canvas;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>COLORREF<sp/>GetBkColor()<sp/>const<sp/>{<sp/>return<sp/>m_cBackground;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetBkColor(COLORREF<sp/>color);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>COLORREF<sp/>GetTextColor()<sp/>const<sp/>{<sp/>return<sp/>m_cText;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetTextColor(COLORREF<sp/>color);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableBorder(bool<sp/>bEnableBorder,<sp/>COLORREF<sp/>color<sp/>=<sp/>BLACK,<sp/>int<sp/>thickness<sp/>=<sp/>1);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetAlpha(BYTE<sp/>alpha,<sp/>bool<sp/>bUseCanvasAlpha,<sp/>bool<sp/>isAlphaCalculated);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>std::wstring<sp/>GetText()<sp/>const<sp/>{<sp/>return<sp/>m_wstrText;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetText(std::wstring<sp/>wstr);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Draw_Text(int<sp/>nTextOffsetX<sp/>=<sp/>0,<sp/>int<sp/>nTextOffsetY<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘控件
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Redraw();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>绘制控件（可选绘制子控件）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Draw(bool<sp/>draw_child<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>渲染控件到外部
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Render(Canvas*<sp/>dst,<sp/>RECT*<sp/>pRct<sp/>=<sp/>nullptr,<sp/>int*<sp/>pCount<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置消息响应函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetMsgProcFunc(MESSAGE_PROC_FUNC<sp/>func);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置消息响应函数为静态类函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetMsgProcFunc(MESSAGE_PROC_FUNC_CLASS<sp/>static_class_func,<sp/>void*<sp/>_this);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>更新消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>UpdateMessage(ExMessage<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否悬停
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isHovered()<sp/>const<sp/>{<sp/>return<sp/>m_bHovered;<sp/>}

<sp/><sp/><sp/><sp/><sp/>//<sp/>是否拥有焦点
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isFocused()<sp/>const<sp/>{<sp/>return<sp/>m_bFocused;<sp/>}

<sp/><sp/><sp/><sp/><sp/>//<sp/>是否按下
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isPressed()<sp/>const<sp/>{<sp/>return<sp/>m_bPressed;<sp/>}
<sp/><sp/>};
}

</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="class_hi_easy_x_1_1_control_base_1ae762452f0d6e75a1f3b215c29a1d2cbe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hi_easy_x_1_1_control_base" kindref="compound">ControlBase</ref>*<sp/><ref refid="class_hi_easy_x_1_1_control_base_1ae762452f0d6e75a1f3b215c29a1d2cbe" kindref="member">m_pParent</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>父控件</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="class_hi_easy_x_1_1_control_base_1a1fb286838bbb30c2fa2daa64c1277939" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::list&lt;ControlBase*&gt;<sp/><ref refid="class_hi_easy_x_1_1_control_base_1a1fb286838bbb30c2fa2daa64c1277939" kindref="member">m_listChild</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>子控件</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="class_hi_easy_x_1_1_control_base_1a3c7d5df0c1558c0ec993ad3890e18c79" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1a3c7d5df0c1558c0ec993ad3890e18c79" kindref="member">m_bAutoSizeForChild</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>为子控件自动改变大小以容纳控件</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="class_hi_easy_x_1_1_control_base_1a6a3797dd102a11dc00a7c36581b22daa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_hi_easy_x_1a2e10a7927d2a46e2c89643adae8094e2" kindref="member">MESSAGE_PROC_FUNC</ref><sp/><ref refid="class_hi_easy_x_1_1_control_base_1a6a3797dd102a11dc00a7c36581b22daa" kindref="member">m_funcMessageProc</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>消息处理函数</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="class_hi_easy_x_1_1_control_base_1a240d262fc1e65624813a9a8ef39c0ad5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_hi_easy_x_1aa2fcbd9caec6ec195eae63584e9232fe" kindref="member">MESSAGE_PROC_FUNC_CLASS</ref><sp/><ref refid="class_hi_easy_x_1_1_control_base_1a240d262fc1e65624813a9a8ef39c0ad5" kindref="member">m_funcMessageProc_Class</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>若绑定的消息处理函数是静态类函数，则记录其地址</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="class_hi_easy_x_1_1_control_base_1abf130d8b75dbe3762567a0c3f82791bd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="class_hi_easy_x_1_1_control_base_1abf130d8b75dbe3762567a0c3f82791bd" kindref="member">m_pCalledClass</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>若绑定的消息处理函数是静态类函数，则记录该类指针</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="class_hi_easy_x_1_1_control_base_1ab407e304413acc7d4c9a88e8c9c94849" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1ab407e304413acc7d4c9a88e8c9c94849" kindref="member">m_bHovered</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>鼠标是否悬停</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="class_hi_easy_x_1_1_control_base_1aac1e82098ce1faacec3eb1f5666ec0ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1aac1e82098ce1faacec3eb1f5666ec0ea" kindref="member">m_bPressed</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>鼠标是否按下</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="class_hi_easy_x_1_1_control_base_1aa96b30a60cd8d93ea0b49b2d787233c9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1aa96b30a60cd8d93ea0b49b2d787233c9" kindref="member">m_bFocused</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>是否拥有焦点 
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>更新区域消息处理
<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>UpdateRect(RECT<sp/>rctOld)<sp/>override;

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标记需要重绘和渲染
<sp/><sp/><sp/><sp/><sp/>void<sp/>MarkNeedRedrawAndRender();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>标记需要清空矩形区域
<sp/><sp/><sp/><sp/><sp/>void<sp/>MarkNeedClearRect(RECT<sp/>rct);

<sp/><sp/><sp/><sp/><sp/>//<sp/>绘制子控件
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>DrawChild();

<sp/><sp/><sp/><sp/><sp/>//<sp/>转换消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>ExMessage&amp;<sp/>TransformMessage(ExMessage&amp;<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>分发消息到用户函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>CallUserMsgProcFunc(int<sp/>msgid,<sp/>ExMessage<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>子控件区域更变
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>ChildRectChanged(ControlBase*<sp/>pChild);

<sp/><sp/><sp/>private:

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Init();

<sp/><sp/>public:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase(std::wstring<sp/>wstrText);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase(int<sp/>x,<sp/>int<sp/>y,<sp/>int<sp/>w<sp/>=<sp/>0,<sp/>int<sp/>h<sp/>=<sp/>0,<sp/>std::wstring<sp/>wstrText<sp/>=<sp/>L&quot;&quot;);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>~ControlBase();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase*<sp/>GetParent()<sp/>{<sp/>return<sp/>m_pParent;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置父控件（内部调用 AddChild）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetParent(ControlBase*<sp/>p);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isAutoSizeForChild()<sp/>const<sp/>{<sp/>return<sp/>m_bAutoSizeForChild;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>为子控件自动改变大小以容纳控件（不容纳负坐标部分）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableAutoSizeForChild(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/>std::list&lt;ControlBase*&gt;&amp;<sp/>GetChildList();

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取子控件总数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>GetChildCount();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>AddChild(ControlBase*<sp/>p,<sp/>int<sp/>offset_x<sp/>=<sp/>0,<sp/>int<sp/>offset_y<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>RemoveChild(ControlBase*<sp/>p);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isEnabled()<sp/>const<sp/>{<sp/>return<sp/>m_bEnabled;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetEnable(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isVisible()<sp/>const<sp/>{<sp/>return<sp/>m_bVisible;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetVisible(bool<sp/>visible);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>GetAutoRedrawState()<sp/>const<sp/>{<sp/>return<sp/>m_bAutoRedrawWhenReceiveMsg;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>启用自动重绘（接受到基础消息事件时自动标识需要重绘）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableAutoRedraw(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>Canvas&amp;<sp/>GetCanvas()<sp/>{<sp/>return<sp/>m_canvas;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>COLORREF<sp/>GetBkColor()<sp/>const<sp/>{<sp/>return<sp/>m_cBackground;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetBkColor(COLORREF<sp/>color);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>COLORREF<sp/>GetTextColor()<sp/>const<sp/>{<sp/>return<sp/>m_cText;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetTextColor(COLORREF<sp/>color);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableBorder(bool<sp/>bEnableBorder,<sp/>COLORREF<sp/>color<sp/>=<sp/>BLACK,<sp/>int<sp/>thickness<sp/>=<sp/>1);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetAlpha(BYTE<sp/>alpha,<sp/>bool<sp/>bUseCanvasAlpha,<sp/>bool<sp/>isAlphaCalculated);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>std::wstring<sp/>GetText()<sp/>const<sp/>{<sp/>return<sp/>m_wstrText;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetText(std::wstring<sp/>wstr);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Draw_Text(int<sp/>nTextOffsetX<sp/>=<sp/>0,<sp/>int<sp/>nTextOffsetY<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘控件
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Redraw();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>绘制控件（可选绘制子控件）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Draw(bool<sp/>draw_child<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>渲染控件到外部
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Render(Canvas*<sp/>dst,<sp/>RECT*<sp/>pRct<sp/>=<sp/>nullptr,<sp/>int*<sp/>pCount<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置消息响应函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetMsgProcFunc(MESSAGE_PROC_FUNC<sp/>func);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置消息响应函数为静态类函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetMsgProcFunc(MESSAGE_PROC_FUNC_CLASS<sp/>static_class_func,<sp/>void*<sp/>_this);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>更新消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>UpdateMessage(ExMessage<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否悬停
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isHovered()<sp/>const<sp/>{<sp/>return<sp/>m_bHovered;<sp/>}

<sp/><sp/><sp/><sp/><sp/>//<sp/>是否拥有焦点
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isFocused()<sp/>const<sp/>{<sp/>return<sp/>m_bFocused;<sp/>}

<sp/><sp/><sp/><sp/><sp/>//<sp/>是否按下
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isPressed()<sp/>const<sp/>{<sp/>return<sp/>m_bPressed;<sp/>}
<sp/><sp/>};
}

</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>更新区域消息处理</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1a82f6680093e218339da20daa750c6839" kindref="member">UpdateRect</ref>(RECT<sp/>rctOld)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>标记需要重绘和渲染</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1a81ff0b42ffbcb7c3a7cd4030c0d94cba" kindref="member">MarkNeedRedrawAndRender</ref>();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>标记需要清空矩形区域 <sp/><sp/><sp/><sp/><sp/>void<sp/>MarkNeedClearRect(RECT<sp/>rct);

<sp/><sp/><sp/><sp/><sp/>//<sp/>绘制子控件
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>DrawChild();

<sp/><sp/><sp/><sp/><sp/>//<sp/>转换消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>ExMessage&amp;<sp/>TransformMessage(ExMessage&amp;<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>分发消息到用户函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>CallUserMsgProcFunc(int<sp/>msgid,<sp/>ExMessage<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>子控件区域更变
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>ChildRectChanged(ControlBase*<sp/>pChild);

<sp/><sp/><sp/>private:

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Init();

<sp/><sp/>public:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase(std::wstring<sp/>wstrText);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase(int<sp/>x,<sp/>int<sp/>y,<sp/>int<sp/>w<sp/>=<sp/>0,<sp/>int<sp/>h<sp/>=<sp/>0,<sp/>std::wstring<sp/>wstrText<sp/>=<sp/>L&quot;&quot;);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>~ControlBase();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase*<sp/>GetParent()<sp/>{<sp/>return<sp/>m_pParent;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置父控件（内部调用 AddChild）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetParent(ControlBase*<sp/>p);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isAutoSizeForChild()<sp/>const<sp/>{<sp/>return<sp/>m_bAutoSizeForChild;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>为子控件自动改变大小以容纳控件（不容纳负坐标部分）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableAutoSizeForChild(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/>std::list&lt;ControlBase*&gt;&amp;<sp/>GetChildList();

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取子控件总数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>GetChildCount();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>AddChild(ControlBase*<sp/>p,<sp/>int<sp/>offset_x<sp/>=<sp/>0,<sp/>int<sp/>offset_y<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>RemoveChild(ControlBase*<sp/>p);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isEnabled()<sp/>const<sp/>{<sp/>return<sp/>m_bEnabled;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetEnable(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isVisible()<sp/>const<sp/>{<sp/>return<sp/>m_bVisible;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetVisible(bool<sp/>visible);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>GetAutoRedrawState()<sp/>const<sp/>{<sp/>return<sp/>m_bAutoRedrawWhenReceiveMsg;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>启用自动重绘（接受到基础消息事件时自动标识需要重绘）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableAutoRedraw(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>Canvas&amp;<sp/>GetCanvas()<sp/>{<sp/>return<sp/>m_canvas;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>COLORREF<sp/>GetBkColor()<sp/>const<sp/>{<sp/>return<sp/>m_cBackground;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetBkColor(COLORREF<sp/>color);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>COLORREF<sp/>GetTextColor()<sp/>const<sp/>{<sp/>return<sp/>m_cText;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetTextColor(COLORREF<sp/>color);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableBorder(bool<sp/>bEnableBorder,<sp/>COLORREF<sp/>color<sp/>=<sp/>BLACK,<sp/>int<sp/>thickness<sp/>=<sp/>1);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetAlpha(BYTE<sp/>alpha,<sp/>bool<sp/>bUseCanvasAlpha,<sp/>bool<sp/>isAlphaCalculated);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>std::wstring<sp/>GetText()<sp/>const<sp/>{<sp/>return<sp/>m_wstrText;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetText(std::wstring<sp/>wstr);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Draw_Text(int<sp/>nTextOffsetX<sp/>=<sp/>0,<sp/>int<sp/>nTextOffsetY<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘控件
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Redraw();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>绘制控件（可选绘制子控件）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Draw(bool<sp/>draw_child<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>渲染控件到外部
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Render(Canvas*<sp/>dst,<sp/>RECT*<sp/>pRct<sp/>=<sp/>nullptr,<sp/>int*<sp/>pCount<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置消息响应函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetMsgProcFunc(MESSAGE_PROC_FUNC<sp/>func);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置消息响应函数为静态类函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetMsgProcFunc(MESSAGE_PROC_FUNC_CLASS<sp/>static_class_func,<sp/>void*<sp/>_this);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>更新消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>UpdateMessage(ExMessage<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否悬停
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isHovered()<sp/>const<sp/>{<sp/>return<sp/>m_bHovered;<sp/>}

<sp/><sp/><sp/><sp/><sp/>//<sp/>是否拥有焦点
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isFocused()<sp/>const<sp/>{<sp/>return<sp/>m_bFocused;<sp/>}

<sp/><sp/><sp/><sp/><sp/>//<sp/>是否按下
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isPressed()<sp/>const<sp/>{<sp/>return<sp/>m_bPressed;<sp/>}
<sp/><sp/>};
}

</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1a2172a2e6a76a652f90882b941fc1d127" kindref="member">MarkNeedClearRect</ref>(RECT<sp/>rct);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>绘制子控件</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1af0373d28a9f56e4c9e04920ec2727b2d" kindref="member">DrawChild</ref>();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>转换消息</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>ExMessage&amp;<sp/><ref refid="class_hi_easy_x_1_1_control_base_1a5bd403fbd8682259a33f3301531ddf41" kindref="member">TransformMessage</ref>(ExMessage&amp;<sp/>msg);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>分发消息到用户函数</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1adfafda8974eb9211f7ddee264d58ac04" kindref="member">CallUserMsgProcFunc</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>msgid,<sp/>ExMessage<sp/>msg);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>子控件区域更变 <sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>ChildRectChanged(ControlBase*<sp/>pChild);

<sp/><sp/><sp/>private:

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Init();

<sp/><sp/>public:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase(std::wstring<sp/>wstrText);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase(int<sp/>x,<sp/>int<sp/>y,<sp/>int<sp/>w<sp/>=<sp/>0,<sp/>int<sp/>h<sp/>=<sp/>0,<sp/>std::wstring<sp/>wstrText<sp/>=<sp/>L&quot;&quot;);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>~ControlBase();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ControlBase*<sp/>GetParent()<sp/>{<sp/>return<sp/>m_pParent;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置父控件（内部调用 AddChild）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetParent(ControlBase*<sp/>p);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isAutoSizeForChild()<sp/>const<sp/>{<sp/>return<sp/>m_bAutoSizeForChild;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>为子控件自动改变大小以容纳控件（不容纳负坐标部分）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableAutoSizeForChild(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/>std::list&lt;ControlBase*&gt;&amp;<sp/>GetChildList();

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取子控件总数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>GetChildCount();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>AddChild(ControlBase*<sp/>p,<sp/>int<sp/>offset_x<sp/>=<sp/>0,<sp/>int<sp/>offset_y<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>RemoveChild(ControlBase*<sp/>p);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isEnabled()<sp/>const<sp/>{<sp/>return<sp/>m_bEnabled;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetEnable(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isVisible()<sp/>const<sp/>{<sp/>return<sp/>m_bVisible;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetVisible(bool<sp/>visible);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>GetAutoRedrawState()<sp/>const<sp/>{<sp/>return<sp/>m_bAutoRedrawWhenReceiveMsg;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>启用自动重绘（接受到基础消息事件时自动标识需要重绘）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableAutoRedraw(bool<sp/>enable);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>Canvas&amp;<sp/>GetCanvas()<sp/>{<sp/>return<sp/>m_canvas;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>COLORREF<sp/>GetBkColor()<sp/>const<sp/>{<sp/>return<sp/>m_cBackground;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetBkColor(COLORREF<sp/>color);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>COLORREF<sp/>GetTextColor()<sp/>const<sp/>{<sp/>return<sp/>m_cText;<sp/>}

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetTextColor(COLORREF<sp/>color);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>EnableBorder(bool<sp/>bEnableBorder,<sp/>COLORREF<sp/>color<sp/>=<sp/>BLACK,<sp/>int<sp/>thickness<sp/>=<sp/>1);

<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetAlpha(BYTE<sp/>alpha,<sp/>bool<sp/>bUseCanvasAlpha,<sp/>bool<sp/>isAlphaCalculated);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>std::wstring<sp/>GetText()<sp/>const<sp/>{<sp/>return<sp/>m_wstrText;<sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetText(std::wstring<sp/>wstr);

<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Draw_Text(int<sp/>nTextOffsetX<sp/>=<sp/>0,<sp/>int<sp/>nTextOffsetY<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘控件
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Redraw();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>绘制控件（可选绘制子控件）
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Draw(bool<sp/>draw_child<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>渲染控件到外部
<sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>Render(Canvas*<sp/>dst,<sp/>RECT*<sp/>pRct<sp/>=<sp/>nullptr,<sp/>int*<sp/>pCount<sp/>=<sp/>0);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置消息响应函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetMsgProcFunc(MESSAGE_PROC_FUNC<sp/>func);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>设置消息响应函数为静态类函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetMsgProcFunc(MESSAGE_PROC_FUNC_CLASS<sp/>static_class_func,<sp/>void*<sp/>_this);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>更新消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>UpdateMessage(ExMessage<sp/>msg);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否悬停
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isHovered()<sp/>const<sp/>{<sp/>return<sp/>m_bHovered;<sp/>}

<sp/><sp/><sp/><sp/><sp/>//<sp/>是否拥有焦点
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isFocused()<sp/>const<sp/>{<sp/>return<sp/>m_bFocused;<sp/>}

<sp/><sp/><sp/><sp/><sp/>//<sp/>是否按下
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isPressed()<sp/>const<sp/>{<sp/>return<sp/>m_bPressed;<sp/>}
<sp/><sp/>};
}

</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1a709cbc231405929ae9d4c8f01dd97287" kindref="member">ChildRectChanged</ref>(<ref refid="class_hi_easy_x_1_1_control_base" kindref="compound">ControlBase</ref>*<sp/>pChild);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Init();</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hi_easy_x_1_1_control_base_1ae76f7599a28302ad10bcea03596cd4f4" kindref="member">ControlBase</ref>();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hi_easy_x_1_1_control_base_1ae76f7599a28302ad10bcea03596cd4f4" kindref="member">ControlBase</ref>(std::wstring<sp/>wstrText);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hi_easy_x_1_1_control_base_1ae76f7599a28302ad10bcea03596cd4f4" kindref="member">ControlBase</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w<sp/>=<sp/>0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h<sp/>=<sp/>0,<sp/>std::wstring<sp/>wstrText<sp/>=<sp/>L</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1aea4f802233d392dd4302479a428f97de" kindref="member">~ControlBase</ref>();</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="class_hi_easy_x_1_1_control_base_1aad00f0df715ce907b84141b4ac7d9f71" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hi_easy_x_1_1_control_base" kindref="compound">ControlBase</ref>*<sp/><ref refid="class_hi_easy_x_1_1_control_base_1aad00f0df715ce907b84141b4ac7d9f71" kindref="member">GetParent</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1ae762452f0d6e75a1f3b215c29a1d2cbe" kindref="member">m_pParent</ref>;<sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>设置父控件（内部调用 AddChild）</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1acd99a2375080ebc29af5ec5a78e8ceb0" kindref="member">SetParent</ref>(<ref refid="class_hi_easy_x_1_1_control_base" kindref="compound">ControlBase</ref>*<sp/>p);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="class_hi_easy_x_1_1_control_base_1a72c682d658053588916fdf12bd8d3f56" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1a72c682d658053588916fdf12bd8d3f56" kindref="member">isAutoSizeForChild</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1a3c7d5df0c1558c0ec993ad3890e18c79" kindref="member">m_bAutoSizeForChild</ref>;<sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>为子控件自动改变大小以容纳控件（不容纳负坐标部分）</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1a68665d8347eee65d0b57d3afd8d916c7" kindref="member">EnableAutoSizeForChild</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::list&lt;ControlBase*&gt;&amp;<sp/><ref refid="class_hi_easy_x_1_1_control_base_1a1a01c4a70d14f9649887d8fbeb3e05ed" kindref="member">GetChildList</ref>();</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>获取子控件总数</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1ab7d753c89838202ff5c37612a8f9715f" kindref="member">GetChildCount</ref>();</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1a75cdabdaa297155395d0420a11da4599" kindref="member">AddChild</ref>(<ref refid="class_hi_easy_x_1_1_control_base" kindref="compound">ControlBase</ref>*<sp/>p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset_x<sp/>=<sp/>0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset_y<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1a1234eaab74c2b51dbb9197b697429993" kindref="member">RemoveChild</ref>(<ref refid="class_hi_easy_x_1_1_control_base" kindref="compound">ControlBase</ref>*<sp/>p);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="class_hi_easy_x_1_1_control_base_1a462628b9679c4ebc935c3c5ce5f24222" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1a462628b9679c4ebc935c3c5ce5f24222" kindref="member">isEnabled</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1ac32c07be0d613b508c36220ba7938d06" kindref="member">m_bEnabled</ref>;<sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1a6ce290712b6fff9d80eae26fa8eced06" kindref="member">SetEnable</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="class_hi_easy_x_1_1_control_base_1a7e533b346d6e96e57ec1cd8f6e0b055a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1a7e533b346d6e96e57ec1cd8f6e0b055a" kindref="member">isVisible</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1a5199ab6ebcf3bef6fd601f60310550fe" kindref="member">m_bVisible</ref>;<sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1a1e58bdfc56f0781bdd500cf4013a6d86" kindref="member">SetVisible</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>visible);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="class_hi_easy_x_1_1_control_base_1a86595b70b389d8c8382f5b5a0a613d79" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1a86595b70b389d8c8382f5b5a0a613d79" kindref="member">GetAutoRedrawState</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1a5b0539e21f7013d44646d3ca2838ed33" kindref="member">m_bAutoRedrawWhenReceiveMsg</ref>;<sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>启用自动重绘（接受到基础消息事件时自动标识需要重绘）</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1a67e8affaf474d4f9441d3e72dac4d1f1" kindref="member">EnableAutoRedraw</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="class_hi_easy_x_1_1_control_base_1a89fd69ef31bd91b7eeca590686c0637e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_canvas" kindref="compound">Canvas</ref>&amp;<sp/><ref refid="class_hi_easy_x_1_1_control_base_1a89fd69ef31bd91b7eeca590686c0637e" kindref="member">GetCanvas</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1ae95bbe48d81bb21b7e760ff792af059a" kindref="member">m_canvas</ref>;<sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157" refid="class_hi_easy_x_1_1_control_base_1a2749c6a3a556f93174f9ca6e9dbf3829" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>COLORREF<sp/><ref refid="class_hi_easy_x_1_1_control_base_1a2749c6a3a556f93174f9ca6e9dbf3829" kindref="member">GetBkColor</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1a56ef733920e54f454c990fd1aebfac1f" kindref="member">m_cBackground</ref>;<sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1aeb9bc2b20dbcf0dea4ac3ab32706bdc3" kindref="member">SetBkColor</ref>(COLORREF<sp/>color);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="class_hi_easy_x_1_1_control_base_1a172ae71e2be303acb30c83f83ad4d064" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>COLORREF<sp/><ref refid="class_hi_easy_x_1_1_control_base_1a172ae71e2be303acb30c83f83ad4d064" kindref="member">GetTextColor</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1aaaecf1b442d34f7674a4f3da49cb1ea7" kindref="member">m_cText</ref>;<sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1aa200c0d27e4a88df9833ff5e8b29e33e" kindref="member">SetTextColor</ref>(COLORREF<sp/>color);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1a69d07e6ca0fcb597a0704cc67beddd6b" kindref="member">EnableBorder</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bEnableBorder,<sp/>COLORREF<sp/>color<sp/>=<sp/>BLACK,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thickness<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1ade3f9e1097c4607a2fd8c9cc74153e95" kindref="member">SetAlpha</ref>(BYTE<sp/>alpha,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bUseCanvasAlpha,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isAlphaCalculated);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="class_hi_easy_x_1_1_control_base_1a97bef5dfe261c7eaf6116ca16676fd00" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::wstring<sp/><ref refid="class_hi_easy_x_1_1_control_base_1a97bef5dfe261c7eaf6116ca16676fd00" kindref="member">GetText</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1a0f51d324623ae83c706c6c3a9a6c9d3b" kindref="member">m_wstrText</ref>;<sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1a73821ac5c9e46196df1e3dd922d96d35" kindref="member">SetText</ref>(std::wstring<sp/>wstr);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1a416db1040e5caa28d86f618bd9c5cd1c" kindref="member">Draw_Text</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nTextOffsetX<sp/>=<sp/>0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nTextOffsetY<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>重绘控件</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1aeb5ceed0aa8e63ab2610ea2abedc4bc3" kindref="member">Redraw</ref>();</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>绘制控件（可选绘制子控件）</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1ac3a8b32c92d5a6e4a251fe0db5080796" kindref="member">Draw</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>draw_child<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>渲染控件到外部</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1a01a9afff183b9f0cda0d83dbb767a0b8" kindref="member">Render</ref>(<ref refid="class_hi_easy_x_1_1_canvas" kindref="compound">Canvas</ref>*<sp/>dst,<sp/>RECT*<sp/>pRct<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>pCount<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>设置消息响应函数</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1a83fa7686f91675a89235205335aab92f" kindref="member">SetMsgProcFunc</ref>(<ref refid="namespace_hi_easy_x_1a2e10a7927d2a46e2c89643adae8094e2" kindref="member">MESSAGE_PROC_FUNC</ref><sp/>func);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>设置消息响应函数为静态类函数</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1a83fa7686f91675a89235205335aab92f" kindref="member">SetMsgProcFunc</ref>(<ref refid="namespace_hi_easy_x_1aa2fcbd9caec6ec195eae63584e9232fe" kindref="member">MESSAGE_PROC_FUNC_CLASS</ref><sp/>static_class_func,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>_this);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>更新消息</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1ac50c2510107edcd0003ec609d896fb7a" kindref="member">UpdateMessage</ref>(ExMessage<sp/>msg);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>是否悬停</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194" refid="class_hi_easy_x_1_1_control_base_1a522e6e3676e6f1ffe15f70371f676d5b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1a522e6e3676e6f1ffe15f70371f676d5b" kindref="member">isHovered</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1ab407e304413acc7d4c9a88e8c9c94849" kindref="member">m_bHovered</ref>;<sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>是否拥有焦点 <sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isFocused()<sp/>const<sp/>{<sp/>return<sp/>m_bFocused;<sp/>}

<sp/><sp/><sp/><sp/><sp/>//<sp/>是否按下
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isPressed()<sp/>const<sp/>{<sp/>return<sp/>m_bPressed;<sp/>}
<sp/><sp/>};
}

</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197" refid="class_hi_easy_x_1_1_control_base_1a6e30e0745734a8a246c33249ae6e8443" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1a6e30e0745734a8a246c33249ae6e8443" kindref="member">isFocused</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1aa96b30a60cd8d93ea0b49b2d787233c9" kindref="member">m_bFocused</ref>;<sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>是否按下</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200" refid="class_hi_easy_x_1_1_control_base_1a2b7c5f2614e457ee54b22baee0bb06a4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1a2b7c5f2614e457ee54b22baee0bb06a4" kindref="member">isPressed</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_control_base_1aac1e82098ce1faacec3eb1f5666ec0ea" kindref="member">m_bPressed</ref>;<sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiGUI/ControlBase.h"/>
  </compounddef>
</doxygen>
