<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="_hi_window_8h" kind="file" language="C++">
    <compoundname>HiWindow.h</compoundname>
    <includes refid="_hi_def_8h" local="yes">HiDef.h</includes>
    <includes refid="_hi_func_8h" local="yes">HiFunc.h</includes>
    <includes local="no">graphics.h</includes>
    <includes local="no">windowsx.h</includes>
    <includes local="no">vector</includes>
    <includes local="no">thread</includes>
    <includedby refid="_hi_canvas_8cpp" local="yes">E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiCanvas.cpp</includedby>
    <includedby refid="_sys_control_base_8cpp" local="yes">E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiSysGUI/SysControlBase.cpp</includedby>
    <includedby refid="_hi_window_8cpp" local="yes">E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.cpp</includedby>
    <includedby refid="_hi_easy_x_8h" local="yes">E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX.h</includedby>
    <incdepgraph>
      <node id="6">
        <label>graphics.h</label>
      </node>
      <node id="1">
        <label>E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h</label>
        <link refid="_hi_window_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>windowsx.h</label>
      </node>
      <node id="4">
        <label>Windows.h</label>
      </node>
      <node id="5">
        <label>WinUser.h</label>
      </node>
      <node id="2">
        <label>HiDef.h</label>
        <link refid="_hi_def_8h"/>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
      <node id="3">
        <label>HiFunc.h</label>
        <link refid="_hi_func_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>thread</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiCanvas.cpp</label>
        <link refid="_hi_canvas_8cpp"/>
      </node>
      <node id="1">
        <label>E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h</label>
        <link refid="_hi_window_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>E:/_MYC/_VS_Project/HiEasyX/HiEasyX/main.cpp</label>
        <link refid="main_8cpp"/>
      </node>
      <node id="5">
        <label>E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX.h</label>
        <link refid="_hi_easy_x_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.cpp</label>
        <link refid="_hi_window_8cpp"/>
      </node>
      <node id="3">
        <label>E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiSysGUI/SysControlBase.cpp</label>
        <link refid="_sys_control_base_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_hi_easy_x_1_1_easy_window" prot="public">HiEasyX::EasyWindow</innerclass>
    <innerclass refid="class_hi_easy_x_1_1_window" prot="public">HiEasyX::Window</innerclass>
    <innernamespace refid="namespace_hi_easy_x">HiEasyX</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="_hi_window_8h_1af14a141cf3e2b9b96e44486f2cccd856" prot="public" static="no">
        <name>__HIWINDOW_H__</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" line="17" column="9" bodyfile="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_hi_window_8h_1aa08e357fa976894b15d6f5964abe597d" prot="public" static="no">
        <name>EW_NORMAL</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" line="21" column="9" bodyfile="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_hi_window_8h_1a84c163038896afa780149de502db4e31" prot="public" static="no">
        <name>NO_WINDOW_INDEX</name>
        <initializer>-1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" line="24" column="9" bodyfile="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_hi_window_8h_1a9afcf922352ddb6d093557b948c0af70" prot="public" static="no">
        <name>HIWINDOW_DEFAULT_PROC</name>
        <initializer>(LRESULT)(-10086)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" line="27" column="9" bodyfile="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_hi_window_8h_1a016976fd8db083a06b4658a34bd4734c" prot="public" static="no">
        <name>WM_TRAY</name>
        <initializer>(WM_USER + 9337)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" line="30" column="9" bodyfile="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_hi_window_8h_1ac24af045bde462f45130dcba02ffb936" prot="public" static="no">
        <name>WM_SYSCTRL_CREATE</name>
        <initializer>(WM_USER + 9338)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" line="35" column="9" bodyfile="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_hi_window_8h_1a13eff6f9ec525326e2fe2d9824777ce1" prot="public" static="no">
        <name>WM_SYSCTRL_DELETE</name>
        <initializer>(WM_USER + 9339)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" line="39" column="9" bodyfile="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_hi_window_8h_1a1b8b0e9a917b3802a0680321cf2c4893" prot="public" static="no">
        <name>WM_USER_REDRAW</name>
        <initializer>(WM_USER + 9340)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" line="43" column="9" bodyfile="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_hi_window_8h_1ab23a70286e0ac0c9000b2279603a1d70" prot="public" static="no">
        <name>BEGIN_TASK</name>
        <param></param>
        <initializer>if (<ref refid="namespace_hi_easy_x_1abdbf556090a9b66992e10a2ce6030625" kindref="member">HiEasyX::SetWorkingWindow</ref>(nullptr))\
	{\
		if (<ref refid="namespace_hi_easy_x_1ad2be09f1a9241d3d9fcb8fe3f309fd9b" kindref="member">HiEasyX::BeginTask</ref>())\
		{(0)	/* 此处强制要求加分号 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" line="461" column="9" bodyfile="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" bodystart="461" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_hi_window_8h_1a1f391430f662d94ab71c9d502f72e86b" prot="public" static="no">
        <name>BEGIN_TASK_WND</name>
        <param><defname>hWnd</defname></param>
        <initializer>/* 设置工作窗口时将自动等待任务 */\
	if (<ref refid="namespace_hi_easy_x_1abdbf556090a9b66992e10a2ce6030625" kindref="member">HiEasyX::SetWorkingWindow</ref>(hWnd))\
	{\
		if (<ref refid="namespace_hi_easy_x_1ad2be09f1a9241d3d9fcb8fe3f309fd9b" kindref="member">HiEasyX::BeginTask</ref>())\
		{(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" line="468" column="9" bodyfile="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" bodystart="468" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_hi_window_8h_1acfe8f2881bf3efdc4627b2f2d287f489" prot="public" static="no">
        <name>END_TASK</name>
        <param></param>
        <initializer><ref refid="namespace_hi_easy_x_1aa8e73888f951524c8b166f37aa5a85a3" kindref="member">HiEasyX::EndTask</ref>();\
		}\
	}(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" line="476" column="9" bodyfile="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" bodystart="476" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_hi_window_8h_1a61051e5730386effb47800799b18fa78" prot="public" static="no">
        <name>FLUSH_DRAW</name>
        <param></param>
        <initializer><ref refid="namespace_hi_easy_x_1aa0c521889af1f43694a54158b4f2d209" kindref="member">HiEasyX::EnforceRedraw</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" line="482" column="9" bodyfile="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" bodystart="482" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_hi_window_8h_1a07feaed93cedd3b3e3484b60ec025c54" prot="public" static="no">
        <name>EnableResizing</name>
        <param><defname>hwnd</defname></param>
        <param><defname>state</defname></param>
        <initializer>(state ? <ref refid="namespace_hi_easy_x_1aca5460f44b6abbbffdbcea978080d2e0" kindref="member">HiEasyX::SetWindowStyle</ref>(GetWindowStyle(hwnd) | WS_SIZEBOX | WS_MAXIMIZEBOX) :\
										<ref refid="namespace_hi_easy_x_1aca5460f44b6abbbffdbcea978080d2e0" kindref="member">HiEasyX::SetWindowStyle</ref>(GetWindowStyle(hwnd) &amp; ~WS_SIZEBOX &amp; ~WS_MAXIMIZEBOX))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" line="487" column="9" bodyfile="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" bodystart="487" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_hi_window_8h_1a0d110a7a9d3d85a5d3e1a2ce7955a633" prot="public" static="no">
        <name>DisableResizing</name>
        <param><defname>hwnd</defname></param>
        <param><defname>state</defname></param>
        <initializer><ref refid="_hi_window_8h_1a07feaed93cedd3b3e3484b60ec025c54" kindref="member">EnableResizing</ref>(hwnd, !state)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" line="490" column="9" bodyfile="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" bodystart="490" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_hi_window_8h_1a9c0e47b8a17065c5528f716dcae29014" prot="public" static="no">
        <name>EnableSystemMenu</name>
        <param><defname>hwnd</defname></param>
        <param><defname>state</defname></param>
        <initializer>(state ? <ref refid="namespace_hi_easy_x_1aca5460f44b6abbbffdbcea978080d2e0" kindref="member">HiEasyX::SetWindowStyle</ref>(GetWindowStyle(hwnd) | WS_SYSMENU) :\
										<ref refid="namespace_hi_easy_x_1aca5460f44b6abbbffdbcea978080d2e0" kindref="member">HiEasyX::SetWindowStyle</ref>(GetWindowStyle(hwnd) &amp; ~WS_SYSMENU))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" line="493" column="9" bodyfile="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" bodystart="493" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_hi_window_8h_1abe7280b56ee37d9ebfa25a9824251348" prot="public" static="no">
        <name>DisableSystemMenu</name>
        <param><defname>hwnd</defname></param>
        <param><defname>state</defname></param>
        <initializer><ref refid="_hi_window_8h_1a9c0e47b8a17065c5528f716dcae29014" kindref="member">EnableSystemMenu</ref>(hwnd, !state)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" line="496" column="9" bodyfile="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" bodystart="496" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_hi_window_8h_1a71f27678a31970eda77c938332702a27" prot="public" static="no">
        <name>EnableToolWindowStyle</name>
        <param><defname>state</defname></param>
        <initializer>(state ? <ref refid="namespace_hi_easy_x_1a4e2229772e327083fda1ac945815f51b" kindref="member">HiEasyX::SetWindowExStyle</ref>(GetWindowExStyle(<ref refid="namespace_hi_easy_x_1a1c54c28e01a5009c735aa12dc8cad59c" kindref="member">HiEasyX::GetHWnd_win32</ref>()) | WS_EX_TOOLWINDOW) :\
										<ref refid="namespace_hi_easy_x_1a4e2229772e327083fda1ac945815f51b" kindref="member">HiEasyX::SetWindowExStyle</ref>(GetWindowExStyle(<ref refid="namespace_hi_easy_x_1a1c54c28e01a5009c735aa12dc8cad59c" kindref="member">HiEasyX::GetHWnd_win32</ref>()) &amp; ~WS_EX_TOOLWINDOW))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" line="499" column="9" bodyfile="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" bodystart="499" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_hi_window_8h_1a39ed1218cbe6649d63285616c639acb9" prot="public" static="no">
        <name>KEY_DOWN</name>
        <param><defname>VK_NONAME</defname></param>
        <initializer>((GetAsyncKeyState(VK_NONAME) &amp; 0x8000) ? 1:0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" line="505" column="9" bodyfile="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" bodystart="505" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_hi_window_8h_1a0a4a6911b56077a5b8285b55095911d0" prot="public" static="no">
        <name>KEY_DOWN_WND</name>
        <param><defname>VK_NONAME</defname></param>
        <initializer>(GetForegroundWindow() == <ref refid="namespace_hi_easy_x_1a1c54c28e01a5009c735aa12dc8cad59c" kindref="member">HiEasyX::GetHWnd_win32</ref>() &amp;&amp; <ref refid="_hi_window_8h_1a39ed1218cbe6649d63285616c639acb9" kindref="member">KEY_DOWN</ref>(VK_NONAME))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" line="508" column="9" bodyfile="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" bodystart="508" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_hi_window_8h_1a4c09b71f211e2f8e29758ea49356232b" prot="public" static="no">
        <name>initgraph</name>
        <param><defname>...</defname></param>
        <initializer><ref refid="namespace_hi_easy_x_1a39a857bd99bbe509b37dedee8f290868" kindref="member">HiEasyX::initgraph_win32</ref>(__VA_ARGS__);\
								<ref refid="namespace_hi_easy_x_1a28ee4b16feccc01e9cb795b384517217" kindref="member">HiEasyX::AutoExit</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" line="513" column="9" bodyfile="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" bodystart="513" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_hi_window_8h_1ad9bb6730860f6ba4763370ad10eb7eb0" prot="public" static="no">
        <name>closegraph</name>
        <initializer><ref refid="namespace_hi_easy_x_1a14d43cb89d29b6e59ee49bb47f07f01d" kindref="member">HiEasyX::closegraph_win32</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" line="516" column="9" bodyfile="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" bodystart="516" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_hi_window_8h_1aeed98cb0cace45f4d56a99382c968bc4" prot="public" static="no">
        <name>BeginBatchDraw</name>
        <param></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" line="519" column="9" bodyfile="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" bodystart="519" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_hi_window_8h_1a2959db99a44d0f584a876927a8eb99f8" prot="public" static="no">
        <name>FlushBatchDraw</name>
        <param></param>
        <initializer><ref refid="_hi_window_8h_1a61051e5730386effb47800799b18fa78" kindref="member">FLUSH_DRAW</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" line="520" column="9" bodyfile="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" bodystart="520" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_hi_window_8h_1a12d9f690479a4e9c13624d51bff8b11e" prot="public" static="no">
        <name>EndBatchDraw</name>
        <param></param>
        <initializer><ref refid="_hi_window_8h_1a61051e5730386effb47800799b18fa78" kindref="member">FLUSH_DRAW</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" line="521" column="9" bodyfile="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_hi_window_8h_1a438d4c23c04ce43cd76de38c8fbbe92f" prot="public" static="no">
        <name>GetHWnd</name>
        <initializer><ref refid="namespace_hi_easy_x_1a1c54c28e01a5009c735aa12dc8cad59c" kindref="member">HiEasyX::GetHWnd_win32</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" line="523" column="9" bodyfile="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" bodystart="523" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_hi_window_8h_1a2dabe3f34636fddeef2f698ea1e4e2c1" prot="public" static="no">
        <name>getmessage</name>
        <initializer><ref refid="namespace_hi_easy_x_1ad6e89c04f7d2348f669818bee558f251" kindref="member">HiEasyX::getmessage_win32</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" line="525" column="9" bodyfile="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" bodystart="525" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_hi_window_8h_1aba7e39ba456baa77d6ef5db677adbd31" prot="public" static="no">
        <name>peekmessage</name>
        <initializer><ref refid="namespace_hi_easy_x_1aeee44f2592fd20c7ed1afb147992fc43" kindref="member">HiEasyX::peekmessage_win32</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" line="526" column="9" bodyfile="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" bodystart="526" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_hi_window_8h_1aa958fd853f11ce25149edbb4bcbe8908" prot="public" static="no">
        <name>flushmessage</name>
        <initializer><ref refid="namespace_hi_easy_x_1a22afa962f6630c209f3743c1eef93240" kindref="member">HiEasyX::flushmessage_win32</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" line="527" column="9" bodyfile="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" bodystart="527" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_hi_window_8h_1a5af1652731768bcb10a6f74ec386630c" prot="public" static="no">
        <name>MouseHit</name>
        <initializer><ref refid="namespace_hi_easy_x_1a54ab3d88f8cfc63af470d9f70ac667a9" kindref="member">HiEasyX::MouseHit_win32</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" line="529" column="9" bodyfile="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" bodystart="529" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_hi_window_8h_1ac50c0e0e941f879aa15e26b88242fa35" prot="public" static="no">
        <name>GetMouseMsg</name>
        <initializer><ref refid="namespace_hi_easy_x_1aaa06c939dfd7628aea9fdb6bb485f264" kindref="member">HiEasyX::GetMouseMsg_win32</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" line="530" column="9" bodyfile="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" bodystart="530" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_hi_window_8h_1a773d70a0163b6b01df079b92571e87b3" prot="public" static="no">
        <name>PeekMouseMsg</name>
        <initializer><ref refid="namespace_hi_easy_x_1a1bb16eb736f85fae74d4beb7dc7b77d4" kindref="member">HiEasyX::PeekMouseMsg_win32</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" line="531" column="9" bodyfile="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" bodystart="531" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_hi_window_8h_1ab1d19c665d3722a5969b65e5497c2d77" prot="public" static="no">
        <name>FlushMouseMsgBuffer</name>
        <initializer><ref refid="namespace_hi_easy_x_1a8deabadc5837351f0cc993002a12e61d" kindref="member">HiEasyX::FlushMouseMsgBuffer_win32</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" line="532" column="9" bodyfile="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h" bodystart="532" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>HiWindow.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>HiEasyX<sp/>库的窗口模块 //

#pragma<sp/>once

#include<sp/>&quot;HiDef.h&quot;
#include<sp/>&quot;HiFunc.h&quot;
#include<sp/>&lt;graphics.h&gt;
#include<sp/>&lt;windowsx.h&gt;
#include<sp/>&lt;vector&gt;
#include<sp/>&lt;thread&gt;


#define<sp/>__HIWINDOW_H__

//<sp/>补充绘图窗口初始化参数
//<sp/>普通窗口
#define<sp/>EW_NORMAL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0

//<sp/>无窗口时的索引
#define<sp/>NO_WINDOW_INDEX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1

//<sp/>窗口过程函数默认返回值
#define<sp/>HIWINDOW_DEFAULT_PROC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(LRESULT)(-10086)

//<sp/>托盘消息
#define<sp/>WM_TRAY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(WM_USER<sp/>+<sp/>9337)

//<sp/>系统控件创建消息
//<sp/>wParam<sp/>传入<sp/>SysControlBase*
//<sp/>lParam<sp/>传入<sp/>CREATESTRUCT*
#define<sp/>WM_SYSCTRL_CREATE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(WM_USER<sp/>+<sp/>9338)

//<sp/>系统控件析构消息
//<sp/>wParam<sp/>传入<sp/>SysControlBase*
#define<sp/>WM_SYSCTRL_DELETE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(WM_USER<sp/>+<sp/>9339)

//<sp/>用户重绘消息，无需参数
//<sp/>在快速绘制模式下会发送此消息而非 WN_PAINT
#define<sp/>WM_USER_REDRAW<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(WM_USER<sp/>+<sp/>9340)


namespace<sp/>HiEasyX
{
<sp/>class<sp/>Canvas;
<sp/><sp/>class<sp/>SysControlBase;

<sp/>////////////******<sp/>类型定义<sp/>******////////////

<sp/><sp/><sp/>//<sp/><sp/>Easy<sp/>Window<sp/>窗口过程函数
<sp/><sp/><sp/>//
<sp/>//<sp/><sp/>窗口过程函数规范
<sp/><sp/><sp/><sp/>//<sp/>
<sp/><sp/><sp/><sp/>//<sp/><sp/>函数签名：
<sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>LRESULT<sp/>CALLBACK<sp/>WndProc(HWND<sp/>hWnd,<sp/>UINT<sp/>msg,<sp/>WPARAM<sp/>wParam,<sp/>LPARAM<sp/>lParam);
<sp/><sp/><sp/>//<sp/>
<sp/><sp/><sp/><sp/>//<sp/><sp/>注意事项：
<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>若要以默认方式处理消息，则返回 HIWINDOW_DEFAULT_PROC<sp/>即可（不要使用<sp/>DefWindowProc<sp/>函数）
<sp/><sp/><sp/>/*
<sp/><sp/><sp/><sp/><sp/>//<sp/>示例函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>LRESULT<sp/>CALLBACK<sp/>WndProc(HWND<sp/>hWnd,<sp/>UINT<sp/>msg,<sp/>WPARAM<sp/>wParam,<sp/>LPARAM<sp/>lParam)
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>switch<sp/>(msg)
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>WM_PAINT:
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BEGIN_TASK_WND(hWnd);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>circle(100,<sp/>100,<sp/>70);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>END_TASK();
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>WM_CLOSE:
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DestroyWindow(hWnd);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>WM_DESTROY:
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>TODO:<sp/>在此处释放申请的内存
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PostQuitMessage(0);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>HIWINDOW_DEFAULT_PROC;<sp/><sp/><sp/>//<sp/>标识使用默认消息处理函数继续处理

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>若要以默认方式处理，请勿使用此语句
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//return<sp/>DefWindowProc(hWnd,<sp/>msg,<sp/>wParam,<sp/>lParam);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0;
<sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/>*/

<sp/><sp/><sp/><sp/>//<sp/>窗口
<sp/>struct<sp/>EasyWindow
<sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isAlive;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口是否存在

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hWnd;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口句柄
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>父窗口句柄

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/>pImg;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口图像
<sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/>pBufferImg;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>图像缓冲区
<sp/><sp/><sp/><sp/><sp/><sp/>Canvas*<sp/>pBufferImgCanvas;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>图像缓冲区绑定的画布指针

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>funcWndProc;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口消息处理函数

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;ExMessage&gt;<sp/>vecMessage;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>模拟<sp/>EasyX<sp/>窗口消息队列

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isUseTray;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否使用托盘
<sp/><sp/><sp/><sp/><sp/>NOTIFYICONDATA<sp/>nid;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘信息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isUseTrayMenu;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否使用托盘菜单
<sp/><sp/><sp/><sp/><sp/><sp/>HMENU<sp/>hTrayMenu;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘菜单

<sp/><sp/><sp/><sp/><sp/><sp/>void(*funcTrayMenuProc)(UINT);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘菜单消息处理函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>给出此函数是为了方便响应托盘的菜单消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>如需响应完整的托盘消息，请自定义窗口过程函数并处理<sp/>WM_TRAY<sp/>消息

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isNewSize;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口大小是否改变
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isBusyProcessing;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否正忙于处理内部消息（指不允许用户启动任务的情况）

<sp/><sp/><sp/><sp/><sp/>int<sp/>nSkipPixels;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>绘制时跳过的像素点数量（降质性速绘）

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;SysControlBase*&gt;<sp/>vecSysCtrl;<sp/><sp/><sp/><sp/>//<sp/>记录创建的系统控件
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>bHasCtrl<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否创建过系统控件
<sp/><sp/><sp/>};

<sp/><sp/><sp/><sp/>enum<sp/>DrawMode
<sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/>DM_Real,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>完全按实际绘制（每次要求重绘都立即执行，可能导致程序卡顿）
<sp/><sp/><sp/><sp/><sp/><sp/>DM_Normal,<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>正常绘制（默认，发送<sp/>WM_PAINT<sp/>消息）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_Fast,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>快速绘制（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过部分绘制）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_VeryFast,<sp/><sp/><sp/><sp/>//<sp/>极速绘制（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过很多绘制）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_Fastest,<sp/><sp/><sp/><sp/><sp/>//<sp/>最快的绘制方式（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过大部分绘制）
<sp/><sp/><sp/>};

<sp/><sp/><sp/><sp/>//<sp/>窗口类
<sp/><sp/><sp/><sp/>class<sp/>Window
<sp/><sp/><sp/>{
<sp/><sp/>private:

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>m_nWindowIndex<sp/>=<sp/>NO_WINDOW_INDEX;
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isCreated<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isPreStyle<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isPrePos<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>m_lPreStyle;
<sp/><sp/><sp/><sp/><sp/><sp/>POINT<sp/>m_pPrePos;

<sp/><sp/>public:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Window();

<sp/><sp/><sp/><sp/><sp/>Window(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>~Window();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>InitWindow(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>等价于 InitWindow
<sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>Create(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>CloseWindow();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>等价于 CloseWindow
<sp/><sp/><sp/><sp/><sp/>void<sp/>Destroy();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetProcFunc(WNDPROC<sp/>WindowProcess);

<sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>GetHandle();

<sp/><sp/><sp/><sp/><sp/>EasyWindow<sp/>GetInfo();

<sp/><sp/><sp/><sp/><sp/>bool<sp/>isAlive();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/>GetImage();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Canvas*<sp/>GetCanvas();

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>BindCanvas(Canvas*<sp/>pCanvas);

<sp/><sp/><sp/><sp/><sp/>void<sp/>WaitMyTask();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>SetWorkingWindow();

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetQuickDraw(UINT<sp/>nSkipPixels);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>输出绘图缓冲（并非重绘窗口）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>FlushDrawing();

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘窗口
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Redraw();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>BeginTask();

<sp/><sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isInTask();

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isSizeChanged();

<sp/><sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>DeleteTray();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT));

<sp/><sp/><sp/><sp/><sp/>void<sp/>PreSetStyle(long<sp/>lStyle);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>PreSetPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/><sp/><sp/>long<sp/>GetStyle();

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>SetStyle(long<sp/>lNewStyle);

<sp/><sp/><sp/><sp/><sp/>long<sp/>GetExStyle();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>SetExStyle(long<sp/>lNewExStyle);

<sp/><sp/><sp/><sp/><sp/>POINT<sp/>GetPos();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIZE<sp/>GetWindowSize();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的大小

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetWindowWidth();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的宽度

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetWindowHeight();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的高度

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetClientWidth();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取客户区宽度

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetClientHeight();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取客户区高度

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Move(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>MoveRel(int<sp/>dx,<sp/>int<sp/>dy);

<sp/><sp/><sp/><sp/><sp/>void<sp/>Resize(int<sp/>w,<sp/>int<sp/>h);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否为用户正在使用的窗口
<sp/><sp/><sp/><sp/><sp/>bool<sp/>isForegroundWindow();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExMessage<sp/>Get_Message(BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Get_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>Peek_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Flush_Message(BYTE<sp/>filter<sp/>=<sp/>-1);
<sp/><sp/>};

<sp/><sp/><sp/><sp/>////////////******<sp/>窗体相关函数<sp/>******////////////

<sp/><sp/><sp/><sp/>//<sp/>创建<sp/>Win32<sp/>绘图窗口（默认支持窗口双击消息）（跳过了 EasyX<sp/>原生窗口创建的步骤）
<sp/><sp/><sp/>//<sp/>w,<sp/>h<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口大小
<sp/>//<sp/>flag<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口样式标识
<sp/><sp/>//<sp/>lpszWndTitle<sp/><sp/><sp/><sp/><sp/>窗口标题
<sp/><sp/>//<sp/>WindowProcess<sp/><sp/><sp/><sp/>窗口消息处理函数的指针，为空表示使用默认消息处理函数（详见头文件中“窗口消息处理函数规范”）
<sp/>//<sp/>hParent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>父窗口句柄，为空则表示该窗口独立存在（若填写，该窗口将成为模态窗口）
<sp/><sp/><sp/><sp/>//
<sp/>//<sp/>注：若创建大量绘图窗口，请适量添加延时，否则会导致一些问题。
<sp/><sp/><sp/>HWND<sp/>initgraph_win32(
<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/>);

<sp/><sp/><sp/><sp/>//<sp/>关闭某一绘图窗口，若句柄为<sp/>nullptr<sp/>则关闭所有绘图窗口
<sp/><sp/>void<sp/>closegraph_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置某窗口的过程函数（传入空句柄可以标识当前活动窗口）
<sp/><sp/><sp/><sp/>void<sp/>SetWndProcFunc(HWND<sp/>hWnd,<sp/>WNDPROC<sp/>WindowProcess);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的句柄
<sp/>HWND<sp/>GetHWnd_win32();

<sp/>//<sp/>结束初始化窗口
<sp/><sp/>//<sp/>阻塞，直到目标窗口被关闭
<sp/><sp/><sp/><sp/>//<sp/>若传入句柄 nullptr，则等待所有窗口关闭
<sp/><sp/>void<sp/>init_end(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置：当窗口都被销毁时，自动退出程序
<sp/><sp/>void<sp/>AutoExit();

<sp/><sp/>//<sp/>是否还存在未销毁的绘图窗口
<sp/><sp/><sp/>bool<sp/>isAnyWindow();

<sp/><sp/><sp/>//<sp/>判断一窗口是否还存在（不含已被关闭的窗口）
<sp/><sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isAliveWindow(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取某窗口的图像指针
<sp/><sp/><sp/>IMAGE*<sp/>GetWindowImage(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>获取窗口画布指针
<sp/><sp/><sp/><sp/>Canvas*<sp/>GetWindowCanvas(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>绑定窗口画布指针
<sp/><sp/><sp/><sp/>//<sp/>绑定后，使用画布绘图时将自动开启任务，无需用户开启，但不会自动刷新屏幕
<sp/><sp/>//<sp/>绑定画布后，如在外部操作画布，则必须先启动窗口任务
<sp/>void<sp/>BindWindowCanvas(Canvas*<sp/>pCanvas,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>将绘制在 EasyX<sp/>中的内容显示到目标窗口上（任意窗口）
<sp/><sp/><sp/><sp/>void<sp/>FlushDrawingToWnd(IMAGE*<sp/>pImg,<sp/>HWND<sp/>hWnd);

<sp/><sp/><sp/>//<sp/>阻塞等待绘图任务完成
<sp/>//<sp/>如果传入句柄，则只有该句柄窗口是活动窗口时才等待
<sp/><sp/>void<sp/>WaitForTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的详细信息
<sp/><sp/>EasyWindow<sp/>GetWorkingWindow();

<sp/><sp/><sp/><sp/>//<sp/>等待当前任务完成并设置活动窗口，返回是否设置成功
<sp/>bool<sp/>SetWorkingWindow(HWND<sp/>hWnd);

<sp/>//<sp/>设置加速绘制跳过多少像素点
<sp/><sp/><sp/>//<sp/>此加速效果是有损的，加速效果与跳过的像素点数正相关。
<sp/><sp/>void<sp/>QuickDraw(UINT<sp/>nSkipPixels,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>获取全局绘制模式
<sp/><sp/>DrawMode<sp/>GetDrawMode();

<sp/><sp/><sp/>//<sp/>设置全局绘制模式
<sp/><sp/><sp/>void<sp/>SetDrawMode(DrawMode<sp/>mode);

<sp/><sp/>//<sp/>强制重绘绘图窗口（在<sp/>WM_PAINT<sp/>消息内绘图不需要使用此函数）
<sp/><sp/><sp/>void<sp/>EnforceRedraw(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>为当前活动窗口启动任务，返回是否启动成功（若已在任务中也返回 true）
<sp/>//<sp/>调用 EasyX<sp/>函数进行绘图或获取消息时，都应该先启动任务再进行调用。
<sp/>bool<sp/>BeginTask();

<sp/>//<sp/>终止当前任务，（可选）输出绘图缓冲
<sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/>//<sp/>判断当前是否有任务在进行
<sp/><sp/><sp/>//<sp/>若传入句柄，则额外判断它是否为活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isInTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>判断某窗口的大小是否改变
<sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_hi_def_8h" kindref="compound">HiDef.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_hi_func_8h" kindref="compound">HiFunc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;graphics.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;windowsx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="_hi_window_8h_1af14a141cf3e2b9b96e44486f2cccd856" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__HIWINDOW_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>补充绘图窗口初始化参数 //<sp/>普通窗口
#define<sp/>EW_NORMAL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0

//<sp/>无窗口时的索引
#define<sp/>NO_WINDOW_INDEX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1

//<sp/>窗口过程函数默认返回值
#define<sp/>HIWINDOW_DEFAULT_PROC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(LRESULT)(-10086)

//<sp/>托盘消息
#define<sp/>WM_TRAY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(WM_USER<sp/>+<sp/>9337)

//<sp/>系统控件创建消息
//<sp/>wParam<sp/>传入<sp/>SysControlBase*
//<sp/>lParam<sp/>传入<sp/>CREATESTRUCT*
#define<sp/>WM_SYSCTRL_CREATE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(WM_USER<sp/>+<sp/>9338)

//<sp/>系统控件析构消息
//<sp/>wParam<sp/>传入<sp/>SysControlBase*
#define<sp/>WM_SYSCTRL_DELETE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(WM_USER<sp/>+<sp/>9339)

//<sp/>用户重绘消息，无需参数
//<sp/>在快速绘制模式下会发送此消息而非 WN_PAINT
#define<sp/>WM_USER_REDRAW<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(WM_USER<sp/>+<sp/>9340)


namespace<sp/>HiEasyX
{
<sp/>class<sp/>Canvas;
<sp/><sp/>class<sp/>SysControlBase;

<sp/>////////////******<sp/>类型定义<sp/>******////////////

<sp/><sp/><sp/>//<sp/><sp/>Easy<sp/>Window<sp/>窗口过程函数
<sp/><sp/><sp/>//
<sp/>//<sp/><sp/>窗口过程函数规范
<sp/><sp/><sp/><sp/>//<sp/>
<sp/><sp/><sp/><sp/>//<sp/><sp/>函数签名：
<sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>LRESULT<sp/>CALLBACK<sp/>WndProc(HWND<sp/>hWnd,<sp/>UINT<sp/>msg,<sp/>WPARAM<sp/>wParam,<sp/>LPARAM<sp/>lParam);
<sp/><sp/><sp/>//<sp/>
<sp/><sp/><sp/><sp/>//<sp/><sp/>注意事项：
<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>若要以默认方式处理消息，则返回 HIWINDOW_DEFAULT_PROC<sp/>即可（不要使用<sp/>DefWindowProc<sp/>函数）
<sp/><sp/><sp/>/*
<sp/><sp/><sp/><sp/><sp/>//<sp/>示例函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>LRESULT<sp/>CALLBACK<sp/>WndProc(HWND<sp/>hWnd,<sp/>UINT<sp/>msg,<sp/>WPARAM<sp/>wParam,<sp/>LPARAM<sp/>lParam)
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>switch<sp/>(msg)
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>WM_PAINT:
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BEGIN_TASK_WND(hWnd);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>circle(100,<sp/>100,<sp/>70);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>END_TASK();
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>WM_CLOSE:
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DestroyWindow(hWnd);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>WM_DESTROY:
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>TODO:<sp/>在此处释放申请的内存
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PostQuitMessage(0);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>HIWINDOW_DEFAULT_PROC;<sp/><sp/><sp/>//<sp/>标识使用默认消息处理函数继续处理

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>若要以默认方式处理，请勿使用此语句
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//return<sp/>DefWindowProc(hWnd,<sp/>msg,<sp/>wParam,<sp/>lParam);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0;
<sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/>*/

<sp/><sp/><sp/><sp/>//<sp/>窗口
<sp/>struct<sp/>EasyWindow
<sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isAlive;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口是否存在

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hWnd;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口句柄
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>父窗口句柄

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/>pImg;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口图像
<sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/>pBufferImg;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>图像缓冲区
<sp/><sp/><sp/><sp/><sp/><sp/>Canvas*<sp/>pBufferImgCanvas;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>图像缓冲区绑定的画布指针

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>funcWndProc;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口消息处理函数

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;ExMessage&gt;<sp/>vecMessage;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>模拟<sp/>EasyX<sp/>窗口消息队列

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isUseTray;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否使用托盘
<sp/><sp/><sp/><sp/><sp/>NOTIFYICONDATA<sp/>nid;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘信息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isUseTrayMenu;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否使用托盘菜单
<sp/><sp/><sp/><sp/><sp/><sp/>HMENU<sp/>hTrayMenu;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘菜单

<sp/><sp/><sp/><sp/><sp/><sp/>void(*funcTrayMenuProc)(UINT);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘菜单消息处理函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>给出此函数是为了方便响应托盘的菜单消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>如需响应完整的托盘消息，请自定义窗口过程函数并处理<sp/>WM_TRAY<sp/>消息

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isNewSize;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口大小是否改变
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isBusyProcessing;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否正忙于处理内部消息（指不允许用户启动任务的情况）

<sp/><sp/><sp/><sp/><sp/>int<sp/>nSkipPixels;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>绘制时跳过的像素点数量（降质性速绘）

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;SysControlBase*&gt;<sp/>vecSysCtrl;<sp/><sp/><sp/><sp/>//<sp/>记录创建的系统控件
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>bHasCtrl<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否创建过系统控件
<sp/><sp/><sp/>};

<sp/><sp/><sp/><sp/>enum<sp/>DrawMode
<sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/>DM_Real,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>完全按实际绘制（每次要求重绘都立即执行，可能导致程序卡顿）
<sp/><sp/><sp/><sp/><sp/><sp/>DM_Normal,<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>正常绘制（默认，发送<sp/>WM_PAINT<sp/>消息）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_Fast,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>快速绘制（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过部分绘制）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_VeryFast,<sp/><sp/><sp/><sp/>//<sp/>极速绘制（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过很多绘制）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_Fastest,<sp/><sp/><sp/><sp/><sp/>//<sp/>最快的绘制方式（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过大部分绘制）
<sp/><sp/><sp/>};

<sp/><sp/><sp/><sp/>//<sp/>窗口类
<sp/><sp/><sp/><sp/>class<sp/>Window
<sp/><sp/><sp/>{
<sp/><sp/>private:

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>m_nWindowIndex<sp/>=<sp/>NO_WINDOW_INDEX;
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isCreated<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isPreStyle<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isPrePos<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>m_lPreStyle;
<sp/><sp/><sp/><sp/><sp/><sp/>POINT<sp/>m_pPrePos;

<sp/><sp/>public:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Window();

<sp/><sp/><sp/><sp/><sp/>Window(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>~Window();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>InitWindow(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>等价于 InitWindow
<sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>Create(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>CloseWindow();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>等价于 CloseWindow
<sp/><sp/><sp/><sp/><sp/>void<sp/>Destroy();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetProcFunc(WNDPROC<sp/>WindowProcess);

<sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>GetHandle();

<sp/><sp/><sp/><sp/><sp/>EasyWindow<sp/>GetInfo();

<sp/><sp/><sp/><sp/><sp/>bool<sp/>isAlive();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/>GetImage();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Canvas*<sp/>GetCanvas();

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>BindCanvas(Canvas*<sp/>pCanvas);

<sp/><sp/><sp/><sp/><sp/>void<sp/>WaitMyTask();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>SetWorkingWindow();

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetQuickDraw(UINT<sp/>nSkipPixels);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>输出绘图缓冲（并非重绘窗口）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>FlushDrawing();

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘窗口
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Redraw();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>BeginTask();

<sp/><sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isInTask();

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isSizeChanged();

<sp/><sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>DeleteTray();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT));

<sp/><sp/><sp/><sp/><sp/>void<sp/>PreSetStyle(long<sp/>lStyle);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>PreSetPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/><sp/><sp/>long<sp/>GetStyle();

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>SetStyle(long<sp/>lNewStyle);

<sp/><sp/><sp/><sp/><sp/>long<sp/>GetExStyle();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>SetExStyle(long<sp/>lNewExStyle);

<sp/><sp/><sp/><sp/><sp/>POINT<sp/>GetPos();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIZE<sp/>GetWindowSize();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的大小

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetWindowWidth();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的宽度

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetWindowHeight();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的高度

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetClientWidth();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取客户区宽度

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetClientHeight();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取客户区高度

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Move(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>MoveRel(int<sp/>dx,<sp/>int<sp/>dy);

<sp/><sp/><sp/><sp/><sp/>void<sp/>Resize(int<sp/>w,<sp/>int<sp/>h);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否为用户正在使用的窗口
<sp/><sp/><sp/><sp/><sp/>bool<sp/>isForegroundWindow();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExMessage<sp/>Get_Message(BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Get_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>Peek_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Flush_Message(BYTE<sp/>filter<sp/>=<sp/>-1);
<sp/><sp/>};

<sp/><sp/><sp/><sp/>////////////******<sp/>窗体相关函数<sp/>******////////////

<sp/><sp/><sp/><sp/>//<sp/>创建<sp/>Win32<sp/>绘图窗口（默认支持窗口双击消息）（跳过了 EasyX<sp/>原生窗口创建的步骤）
<sp/><sp/><sp/>//<sp/>w,<sp/>h<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口大小
<sp/>//<sp/>flag<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口样式标识
<sp/><sp/>//<sp/>lpszWndTitle<sp/><sp/><sp/><sp/><sp/>窗口标题
<sp/><sp/>//<sp/>WindowProcess<sp/><sp/><sp/><sp/>窗口消息处理函数的指针，为空表示使用默认消息处理函数（详见头文件中“窗口消息处理函数规范”）
<sp/>//<sp/>hParent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>父窗口句柄，为空则表示该窗口独立存在（若填写，该窗口将成为模态窗口）
<sp/><sp/><sp/><sp/>//
<sp/>//<sp/>注：若创建大量绘图窗口，请适量添加延时，否则会导致一些问题。
<sp/><sp/><sp/>HWND<sp/>initgraph_win32(
<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/>);

<sp/><sp/><sp/><sp/>//<sp/>关闭某一绘图窗口，若句柄为<sp/>nullptr<sp/>则关闭所有绘图窗口
<sp/><sp/>void<sp/>closegraph_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置某窗口的过程函数（传入空句柄可以标识当前活动窗口）
<sp/><sp/><sp/><sp/>void<sp/>SetWndProcFunc(HWND<sp/>hWnd,<sp/>WNDPROC<sp/>WindowProcess);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的句柄
<sp/>HWND<sp/>GetHWnd_win32();

<sp/>//<sp/>结束初始化窗口
<sp/><sp/>//<sp/>阻塞，直到目标窗口被关闭
<sp/><sp/><sp/><sp/>//<sp/>若传入句柄 nullptr，则等待所有窗口关闭
<sp/><sp/>void<sp/>init_end(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置：当窗口都被销毁时，自动退出程序
<sp/><sp/>void<sp/>AutoExit();

<sp/><sp/>//<sp/>是否还存在未销毁的绘图窗口
<sp/><sp/><sp/>bool<sp/>isAnyWindow();

<sp/><sp/><sp/>//<sp/>判断一窗口是否还存在（不含已被关闭的窗口）
<sp/><sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isAliveWindow(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取某窗口的图像指针
<sp/><sp/><sp/>IMAGE*<sp/>GetWindowImage(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>获取窗口画布指针
<sp/><sp/><sp/><sp/>Canvas*<sp/>GetWindowCanvas(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>绑定窗口画布指针
<sp/><sp/><sp/><sp/>//<sp/>绑定后，使用画布绘图时将自动开启任务，无需用户开启，但不会自动刷新屏幕
<sp/><sp/>//<sp/>绑定画布后，如在外部操作画布，则必须先启动窗口任务
<sp/>void<sp/>BindWindowCanvas(Canvas*<sp/>pCanvas,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>将绘制在 EasyX<sp/>中的内容显示到目标窗口上（任意窗口）
<sp/><sp/><sp/><sp/>void<sp/>FlushDrawingToWnd(IMAGE*<sp/>pImg,<sp/>HWND<sp/>hWnd);

<sp/><sp/><sp/>//<sp/>阻塞等待绘图任务完成
<sp/>//<sp/>如果传入句柄，则只有该句柄窗口是活动窗口时才等待
<sp/><sp/>void<sp/>WaitForTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的详细信息
<sp/><sp/>EasyWindow<sp/>GetWorkingWindow();

<sp/><sp/><sp/><sp/>//<sp/>等待当前任务完成并设置活动窗口，返回是否设置成功
<sp/>bool<sp/>SetWorkingWindow(HWND<sp/>hWnd);

<sp/>//<sp/>设置加速绘制跳过多少像素点
<sp/><sp/><sp/>//<sp/>此加速效果是有损的，加速效果与跳过的像素点数正相关。
<sp/><sp/>void<sp/>QuickDraw(UINT<sp/>nSkipPixels,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>获取全局绘制模式
<sp/><sp/>DrawMode<sp/>GetDrawMode();

<sp/><sp/><sp/>//<sp/>设置全局绘制模式
<sp/><sp/><sp/>void<sp/>SetDrawMode(DrawMode<sp/>mode);

<sp/><sp/>//<sp/>强制重绘绘图窗口（在<sp/>WM_PAINT<sp/>消息内绘图不需要使用此函数）
<sp/><sp/><sp/>void<sp/>EnforceRedraw(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>为当前活动窗口启动任务，返回是否启动成功（若已在任务中也返回 true）
<sp/>//<sp/>调用 EasyX<sp/>函数进行绘图或获取消息时，都应该先启动任务再进行调用。
<sp/>bool<sp/>BeginTask();

<sp/>//<sp/>终止当前任务，（可选）输出绘图缓冲
<sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/>//<sp/>判断当前是否有任务在进行
<sp/><sp/><sp/>//<sp/>若传入句柄，则额外判断它是否为活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isInTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>判断某窗口的大小是否改变
<sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>普通窗口 #define<sp/>EW_NORMAL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0

//<sp/>无窗口时的索引
#define<sp/>NO_WINDOW_INDEX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1

//<sp/>窗口过程函数默认返回值
#define<sp/>HIWINDOW_DEFAULT_PROC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(LRESULT)(-10086)

//<sp/>托盘消息
#define<sp/>WM_TRAY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(WM_USER<sp/>+<sp/>9337)

//<sp/>系统控件创建消息
//<sp/>wParam<sp/>传入<sp/>SysControlBase*
//<sp/>lParam<sp/>传入<sp/>CREATESTRUCT*
#define<sp/>WM_SYSCTRL_CREATE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(WM_USER<sp/>+<sp/>9338)

//<sp/>系统控件析构消息
//<sp/>wParam<sp/>传入<sp/>SysControlBase*
#define<sp/>WM_SYSCTRL_DELETE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(WM_USER<sp/>+<sp/>9339)

//<sp/>用户重绘消息，无需参数
//<sp/>在快速绘制模式下会发送此消息而非 WN_PAINT
#define<sp/>WM_USER_REDRAW<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(WM_USER<sp/>+<sp/>9340)


namespace<sp/>HiEasyX
{
<sp/>class<sp/>Canvas;
<sp/><sp/>class<sp/>SysControlBase;

<sp/>////////////******<sp/>类型定义<sp/>******////////////

<sp/><sp/><sp/>//<sp/><sp/>Easy<sp/>Window<sp/>窗口过程函数
<sp/><sp/><sp/>//
<sp/>//<sp/><sp/>窗口过程函数规范
<sp/><sp/><sp/><sp/>//<sp/>
<sp/><sp/><sp/><sp/>//<sp/><sp/>函数签名：
<sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>LRESULT<sp/>CALLBACK<sp/>WndProc(HWND<sp/>hWnd,<sp/>UINT<sp/>msg,<sp/>WPARAM<sp/>wParam,<sp/>LPARAM<sp/>lParam);
<sp/><sp/><sp/>//<sp/>
<sp/><sp/><sp/><sp/>//<sp/><sp/>注意事项：
<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>若要以默认方式处理消息，则返回 HIWINDOW_DEFAULT_PROC<sp/>即可（不要使用<sp/>DefWindowProc<sp/>函数）
<sp/><sp/><sp/>/*
<sp/><sp/><sp/><sp/><sp/>//<sp/>示例函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>LRESULT<sp/>CALLBACK<sp/>WndProc(HWND<sp/>hWnd,<sp/>UINT<sp/>msg,<sp/>WPARAM<sp/>wParam,<sp/>LPARAM<sp/>lParam)
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>switch<sp/>(msg)
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>WM_PAINT:
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BEGIN_TASK_WND(hWnd);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>circle(100,<sp/>100,<sp/>70);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>END_TASK();
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>WM_CLOSE:
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DestroyWindow(hWnd);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>WM_DESTROY:
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>TODO:<sp/>在此处释放申请的内存
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PostQuitMessage(0);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>HIWINDOW_DEFAULT_PROC;<sp/><sp/><sp/>//<sp/>标识使用默认消息处理函数继续处理

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>若要以默认方式处理，请勿使用此语句
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//return<sp/>DefWindowProc(hWnd,<sp/>msg,<sp/>wParam,<sp/>lParam);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0;
<sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/>*/

<sp/><sp/><sp/><sp/>//<sp/>窗口
<sp/>struct<sp/>EasyWindow
<sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isAlive;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口是否存在

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hWnd;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口句柄
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>父窗口句柄

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/>pImg;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口图像
<sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/>pBufferImg;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>图像缓冲区
<sp/><sp/><sp/><sp/><sp/><sp/>Canvas*<sp/>pBufferImgCanvas;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>图像缓冲区绑定的画布指针

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>funcWndProc;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口消息处理函数

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;ExMessage&gt;<sp/>vecMessage;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>模拟<sp/>EasyX<sp/>窗口消息队列

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isUseTray;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否使用托盘
<sp/><sp/><sp/><sp/><sp/>NOTIFYICONDATA<sp/>nid;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘信息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isUseTrayMenu;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否使用托盘菜单
<sp/><sp/><sp/><sp/><sp/><sp/>HMENU<sp/>hTrayMenu;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘菜单

<sp/><sp/><sp/><sp/><sp/><sp/>void(*funcTrayMenuProc)(UINT);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘菜单消息处理函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>给出此函数是为了方便响应托盘的菜单消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>如需响应完整的托盘消息，请自定义窗口过程函数并处理<sp/>WM_TRAY<sp/>消息

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isNewSize;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口大小是否改变
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isBusyProcessing;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否正忙于处理内部消息（指不允许用户启动任务的情况）

<sp/><sp/><sp/><sp/><sp/>int<sp/>nSkipPixels;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>绘制时跳过的像素点数量（降质性速绘）

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;SysControlBase*&gt;<sp/>vecSysCtrl;<sp/><sp/><sp/><sp/>//<sp/>记录创建的系统控件
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>bHasCtrl<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否创建过系统控件
<sp/><sp/><sp/>};

<sp/><sp/><sp/><sp/>enum<sp/>DrawMode
<sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/>DM_Real,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>完全按实际绘制（每次要求重绘都立即执行，可能导致程序卡顿）
<sp/><sp/><sp/><sp/><sp/><sp/>DM_Normal,<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>正常绘制（默认，发送<sp/>WM_PAINT<sp/>消息）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_Fast,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>快速绘制（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过部分绘制）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_VeryFast,<sp/><sp/><sp/><sp/>//<sp/>极速绘制（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过很多绘制）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_Fastest,<sp/><sp/><sp/><sp/><sp/>//<sp/>最快的绘制方式（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过大部分绘制）
<sp/><sp/><sp/>};

<sp/><sp/><sp/><sp/>//<sp/>窗口类
<sp/><sp/><sp/><sp/>class<sp/>Window
<sp/><sp/><sp/>{
<sp/><sp/>private:

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>m_nWindowIndex<sp/>=<sp/>NO_WINDOW_INDEX;
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isCreated<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isPreStyle<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isPrePos<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>m_lPreStyle;
<sp/><sp/><sp/><sp/><sp/><sp/>POINT<sp/>m_pPrePos;

<sp/><sp/>public:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Window();

<sp/><sp/><sp/><sp/><sp/>Window(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>~Window();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>InitWindow(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>等价于 InitWindow
<sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>Create(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>CloseWindow();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>等价于 CloseWindow
<sp/><sp/><sp/><sp/><sp/>void<sp/>Destroy();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetProcFunc(WNDPROC<sp/>WindowProcess);

<sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>GetHandle();

<sp/><sp/><sp/><sp/><sp/>EasyWindow<sp/>GetInfo();

<sp/><sp/><sp/><sp/><sp/>bool<sp/>isAlive();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/>GetImage();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Canvas*<sp/>GetCanvas();

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>BindCanvas(Canvas*<sp/>pCanvas);

<sp/><sp/><sp/><sp/><sp/>void<sp/>WaitMyTask();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>SetWorkingWindow();

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetQuickDraw(UINT<sp/>nSkipPixels);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>输出绘图缓冲（并非重绘窗口）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>FlushDrawing();

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘窗口
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Redraw();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>BeginTask();

<sp/><sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isInTask();

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isSizeChanged();

<sp/><sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>DeleteTray();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT));

<sp/><sp/><sp/><sp/><sp/>void<sp/>PreSetStyle(long<sp/>lStyle);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>PreSetPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/><sp/><sp/>long<sp/>GetStyle();

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>SetStyle(long<sp/>lNewStyle);

<sp/><sp/><sp/><sp/><sp/>long<sp/>GetExStyle();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>SetExStyle(long<sp/>lNewExStyle);

<sp/><sp/><sp/><sp/><sp/>POINT<sp/>GetPos();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIZE<sp/>GetWindowSize();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的大小

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetWindowWidth();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的宽度

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetWindowHeight();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的高度

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetClientWidth();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取客户区宽度

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetClientHeight();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取客户区高度

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Move(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>MoveRel(int<sp/>dx,<sp/>int<sp/>dy);

<sp/><sp/><sp/><sp/><sp/>void<sp/>Resize(int<sp/>w,<sp/>int<sp/>h);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否为用户正在使用的窗口
<sp/><sp/><sp/><sp/><sp/>bool<sp/>isForegroundWindow();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExMessage<sp/>Get_Message(BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Get_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>Peek_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Flush_Message(BYTE<sp/>filter<sp/>=<sp/>-1);
<sp/><sp/>};

<sp/><sp/><sp/><sp/>////////////******<sp/>窗体相关函数<sp/>******////////////

<sp/><sp/><sp/><sp/>//<sp/>创建<sp/>Win32<sp/>绘图窗口（默认支持窗口双击消息）（跳过了 EasyX<sp/>原生窗口创建的步骤）
<sp/><sp/><sp/>//<sp/>w,<sp/>h<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口大小
<sp/>//<sp/>flag<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口样式标识
<sp/><sp/>//<sp/>lpszWndTitle<sp/><sp/><sp/><sp/><sp/>窗口标题
<sp/><sp/>//<sp/>WindowProcess<sp/><sp/><sp/><sp/>窗口消息处理函数的指针，为空表示使用默认消息处理函数（详见头文件中“窗口消息处理函数规范”）
<sp/>//<sp/>hParent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>父窗口句柄，为空则表示该窗口独立存在（若填写，该窗口将成为模态窗口）
<sp/><sp/><sp/><sp/>//
<sp/>//<sp/>注：若创建大量绘图窗口，请适量添加延时，否则会导致一些问题。
<sp/><sp/><sp/>HWND<sp/>initgraph_win32(
<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/>);

<sp/><sp/><sp/><sp/>//<sp/>关闭某一绘图窗口，若句柄为<sp/>nullptr<sp/>则关闭所有绘图窗口
<sp/><sp/>void<sp/>closegraph_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置某窗口的过程函数（传入空句柄可以标识当前活动窗口）
<sp/><sp/><sp/><sp/>void<sp/>SetWndProcFunc(HWND<sp/>hWnd,<sp/>WNDPROC<sp/>WindowProcess);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的句柄
<sp/>HWND<sp/>GetHWnd_win32();

<sp/>//<sp/>结束初始化窗口
<sp/><sp/>//<sp/>阻塞，直到目标窗口被关闭
<sp/><sp/><sp/><sp/>//<sp/>若传入句柄 nullptr，则等待所有窗口关闭
<sp/><sp/>void<sp/>init_end(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置：当窗口都被销毁时，自动退出程序
<sp/><sp/>void<sp/>AutoExit();

<sp/><sp/>//<sp/>是否还存在未销毁的绘图窗口
<sp/><sp/><sp/>bool<sp/>isAnyWindow();

<sp/><sp/><sp/>//<sp/>判断一窗口是否还存在（不含已被关闭的窗口）
<sp/><sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isAliveWindow(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取某窗口的图像指针
<sp/><sp/><sp/>IMAGE*<sp/>GetWindowImage(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>获取窗口画布指针
<sp/><sp/><sp/><sp/>Canvas*<sp/>GetWindowCanvas(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>绑定窗口画布指针
<sp/><sp/><sp/><sp/>//<sp/>绑定后，使用画布绘图时将自动开启任务，无需用户开启，但不会自动刷新屏幕
<sp/><sp/>//<sp/>绑定画布后，如在外部操作画布，则必须先启动窗口任务
<sp/>void<sp/>BindWindowCanvas(Canvas*<sp/>pCanvas,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>将绘制在 EasyX<sp/>中的内容显示到目标窗口上（任意窗口）
<sp/><sp/><sp/><sp/>void<sp/>FlushDrawingToWnd(IMAGE*<sp/>pImg,<sp/>HWND<sp/>hWnd);

<sp/><sp/><sp/>//<sp/>阻塞等待绘图任务完成
<sp/>//<sp/>如果传入句柄，则只有该句柄窗口是活动窗口时才等待
<sp/><sp/>void<sp/>WaitForTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的详细信息
<sp/><sp/>EasyWindow<sp/>GetWorkingWindow();

<sp/><sp/><sp/><sp/>//<sp/>等待当前任务完成并设置活动窗口，返回是否设置成功
<sp/>bool<sp/>SetWorkingWindow(HWND<sp/>hWnd);

<sp/>//<sp/>设置加速绘制跳过多少像素点
<sp/><sp/><sp/>//<sp/>此加速效果是有损的，加速效果与跳过的像素点数正相关。
<sp/><sp/>void<sp/>QuickDraw(UINT<sp/>nSkipPixels,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>获取全局绘制模式
<sp/><sp/>DrawMode<sp/>GetDrawMode();

<sp/><sp/><sp/>//<sp/>设置全局绘制模式
<sp/><sp/><sp/>void<sp/>SetDrawMode(DrawMode<sp/>mode);

<sp/><sp/>//<sp/>强制重绘绘图窗口（在<sp/>WM_PAINT<sp/>消息内绘图不需要使用此函数）
<sp/><sp/><sp/>void<sp/>EnforceRedraw(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>为当前活动窗口启动任务，返回是否启动成功（若已在任务中也返回 true）
<sp/>//<sp/>调用 EasyX<sp/>函数进行绘图或获取消息时，都应该先启动任务再进行调用。
<sp/>bool<sp/>BeginTask();

<sp/>//<sp/>终止当前任务，（可选）输出绘图缓冲
<sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/>//<sp/>判断当前是否有任务在进行
<sp/><sp/><sp/>//<sp/>若传入句柄，则额外判断它是否为活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isInTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>判断某窗口的大小是否改变
<sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="_hi_window_8h_1aa08e357fa976894b15d6f5964abe597d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EW_NORMAL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>无窗口时的索引 #define<sp/>NO_WINDOW_INDEX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1

//<sp/>窗口过程函数默认返回值
#define<sp/>HIWINDOW_DEFAULT_PROC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(LRESULT)(-10086)

//<sp/>托盘消息
#define<sp/>WM_TRAY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(WM_USER<sp/>+<sp/>9337)

//<sp/>系统控件创建消息
//<sp/>wParam<sp/>传入<sp/>SysControlBase*
//<sp/>lParam<sp/>传入<sp/>CREATESTRUCT*
#define<sp/>WM_SYSCTRL_CREATE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(WM_USER<sp/>+<sp/>9338)

//<sp/>系统控件析构消息
//<sp/>wParam<sp/>传入<sp/>SysControlBase*
#define<sp/>WM_SYSCTRL_DELETE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(WM_USER<sp/>+<sp/>9339)

//<sp/>用户重绘消息，无需参数
//<sp/>在快速绘制模式下会发送此消息而非 WN_PAINT
#define<sp/>WM_USER_REDRAW<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(WM_USER<sp/>+<sp/>9340)


namespace<sp/>HiEasyX
{
<sp/>class<sp/>Canvas;
<sp/><sp/>class<sp/>SysControlBase;

<sp/>////////////******<sp/>类型定义<sp/>******////////////

<sp/><sp/><sp/>//<sp/><sp/>Easy<sp/>Window<sp/>窗口过程函数
<sp/><sp/><sp/>//
<sp/>//<sp/><sp/>窗口过程函数规范
<sp/><sp/><sp/><sp/>//<sp/>
<sp/><sp/><sp/><sp/>//<sp/><sp/>函数签名：
<sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>LRESULT<sp/>CALLBACK<sp/>WndProc(HWND<sp/>hWnd,<sp/>UINT<sp/>msg,<sp/>WPARAM<sp/>wParam,<sp/>LPARAM<sp/>lParam);
<sp/><sp/><sp/>//<sp/>
<sp/><sp/><sp/><sp/>//<sp/><sp/>注意事项：
<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>若要以默认方式处理消息，则返回 HIWINDOW_DEFAULT_PROC<sp/>即可（不要使用<sp/>DefWindowProc<sp/>函数）
<sp/><sp/><sp/>/*
<sp/><sp/><sp/><sp/><sp/>//<sp/>示例函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>LRESULT<sp/>CALLBACK<sp/>WndProc(HWND<sp/>hWnd,<sp/>UINT<sp/>msg,<sp/>WPARAM<sp/>wParam,<sp/>LPARAM<sp/>lParam)
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>switch<sp/>(msg)
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>WM_PAINT:
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BEGIN_TASK_WND(hWnd);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>circle(100,<sp/>100,<sp/>70);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>END_TASK();
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>WM_CLOSE:
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DestroyWindow(hWnd);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>WM_DESTROY:
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>TODO:<sp/>在此处释放申请的内存
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PostQuitMessage(0);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>HIWINDOW_DEFAULT_PROC;<sp/><sp/><sp/>//<sp/>标识使用默认消息处理函数继续处理

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>若要以默认方式处理，请勿使用此语句
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//return<sp/>DefWindowProc(hWnd,<sp/>msg,<sp/>wParam,<sp/>lParam);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0;
<sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/>*/

<sp/><sp/><sp/><sp/>//<sp/>窗口
<sp/>struct<sp/>EasyWindow
<sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isAlive;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口是否存在

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hWnd;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口句柄
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>父窗口句柄

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/>pImg;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口图像
<sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/>pBufferImg;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>图像缓冲区
<sp/><sp/><sp/><sp/><sp/><sp/>Canvas*<sp/>pBufferImgCanvas;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>图像缓冲区绑定的画布指针

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>funcWndProc;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口消息处理函数

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;ExMessage&gt;<sp/>vecMessage;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>模拟<sp/>EasyX<sp/>窗口消息队列

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isUseTray;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否使用托盘
<sp/><sp/><sp/><sp/><sp/>NOTIFYICONDATA<sp/>nid;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘信息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isUseTrayMenu;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否使用托盘菜单
<sp/><sp/><sp/><sp/><sp/><sp/>HMENU<sp/>hTrayMenu;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘菜单

<sp/><sp/><sp/><sp/><sp/><sp/>void(*funcTrayMenuProc)(UINT);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘菜单消息处理函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>给出此函数是为了方便响应托盘的菜单消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>如需响应完整的托盘消息，请自定义窗口过程函数并处理<sp/>WM_TRAY<sp/>消息

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isNewSize;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口大小是否改变
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isBusyProcessing;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否正忙于处理内部消息（指不允许用户启动任务的情况）

<sp/><sp/><sp/><sp/><sp/>int<sp/>nSkipPixels;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>绘制时跳过的像素点数量（降质性速绘）

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;SysControlBase*&gt;<sp/>vecSysCtrl;<sp/><sp/><sp/><sp/>//<sp/>记录创建的系统控件
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>bHasCtrl<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否创建过系统控件
<sp/><sp/><sp/>};

<sp/><sp/><sp/><sp/>enum<sp/>DrawMode
<sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/>DM_Real,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>完全按实际绘制（每次要求重绘都立即执行，可能导致程序卡顿）
<sp/><sp/><sp/><sp/><sp/><sp/>DM_Normal,<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>正常绘制（默认，发送<sp/>WM_PAINT<sp/>消息）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_Fast,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>快速绘制（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过部分绘制）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_VeryFast,<sp/><sp/><sp/><sp/>//<sp/>极速绘制（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过很多绘制）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_Fastest,<sp/><sp/><sp/><sp/><sp/>//<sp/>最快的绘制方式（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过大部分绘制）
<sp/><sp/><sp/>};

<sp/><sp/><sp/><sp/>//<sp/>窗口类
<sp/><sp/><sp/><sp/>class<sp/>Window
<sp/><sp/><sp/>{
<sp/><sp/>private:

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>m_nWindowIndex<sp/>=<sp/>NO_WINDOW_INDEX;
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isCreated<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isPreStyle<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isPrePos<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>m_lPreStyle;
<sp/><sp/><sp/><sp/><sp/><sp/>POINT<sp/>m_pPrePos;

<sp/><sp/>public:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Window();

<sp/><sp/><sp/><sp/><sp/>Window(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>~Window();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>InitWindow(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>等价于 InitWindow
<sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>Create(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>CloseWindow();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>等价于 CloseWindow
<sp/><sp/><sp/><sp/><sp/>void<sp/>Destroy();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetProcFunc(WNDPROC<sp/>WindowProcess);

<sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>GetHandle();

<sp/><sp/><sp/><sp/><sp/>EasyWindow<sp/>GetInfo();

<sp/><sp/><sp/><sp/><sp/>bool<sp/>isAlive();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/>GetImage();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Canvas*<sp/>GetCanvas();

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>BindCanvas(Canvas*<sp/>pCanvas);

<sp/><sp/><sp/><sp/><sp/>void<sp/>WaitMyTask();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>SetWorkingWindow();

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetQuickDraw(UINT<sp/>nSkipPixels);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>输出绘图缓冲（并非重绘窗口）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>FlushDrawing();

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘窗口
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Redraw();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>BeginTask();

<sp/><sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isInTask();

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isSizeChanged();

<sp/><sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>DeleteTray();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT));

<sp/><sp/><sp/><sp/><sp/>void<sp/>PreSetStyle(long<sp/>lStyle);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>PreSetPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/><sp/><sp/>long<sp/>GetStyle();

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>SetStyle(long<sp/>lNewStyle);

<sp/><sp/><sp/><sp/><sp/>long<sp/>GetExStyle();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>SetExStyle(long<sp/>lNewExStyle);

<sp/><sp/><sp/><sp/><sp/>POINT<sp/>GetPos();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIZE<sp/>GetWindowSize();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的大小

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetWindowWidth();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的宽度

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetWindowHeight();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的高度

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetClientWidth();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取客户区宽度

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetClientHeight();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取客户区高度

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Move(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>MoveRel(int<sp/>dx,<sp/>int<sp/>dy);

<sp/><sp/><sp/><sp/><sp/>void<sp/>Resize(int<sp/>w,<sp/>int<sp/>h);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否为用户正在使用的窗口
<sp/><sp/><sp/><sp/><sp/>bool<sp/>isForegroundWindow();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExMessage<sp/>Get_Message(BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Get_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>Peek_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Flush_Message(BYTE<sp/>filter<sp/>=<sp/>-1);
<sp/><sp/>};

<sp/><sp/><sp/><sp/>////////////******<sp/>窗体相关函数<sp/>******////////////

<sp/><sp/><sp/><sp/>//<sp/>创建<sp/>Win32<sp/>绘图窗口（默认支持窗口双击消息）（跳过了 EasyX<sp/>原生窗口创建的步骤）
<sp/><sp/><sp/>//<sp/>w,<sp/>h<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口大小
<sp/>//<sp/>flag<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口样式标识
<sp/><sp/>//<sp/>lpszWndTitle<sp/><sp/><sp/><sp/><sp/>窗口标题
<sp/><sp/>//<sp/>WindowProcess<sp/><sp/><sp/><sp/>窗口消息处理函数的指针，为空表示使用默认消息处理函数（详见头文件中“窗口消息处理函数规范”）
<sp/>//<sp/>hParent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>父窗口句柄，为空则表示该窗口独立存在（若填写，该窗口将成为模态窗口）
<sp/><sp/><sp/><sp/>//
<sp/>//<sp/>注：若创建大量绘图窗口，请适量添加延时，否则会导致一些问题。
<sp/><sp/><sp/>HWND<sp/>initgraph_win32(
<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/>);

<sp/><sp/><sp/><sp/>//<sp/>关闭某一绘图窗口，若句柄为<sp/>nullptr<sp/>则关闭所有绘图窗口
<sp/><sp/>void<sp/>closegraph_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置某窗口的过程函数（传入空句柄可以标识当前活动窗口）
<sp/><sp/><sp/><sp/>void<sp/>SetWndProcFunc(HWND<sp/>hWnd,<sp/>WNDPROC<sp/>WindowProcess);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的句柄
<sp/>HWND<sp/>GetHWnd_win32();

<sp/>//<sp/>结束初始化窗口
<sp/><sp/>//<sp/>阻塞，直到目标窗口被关闭
<sp/><sp/><sp/><sp/>//<sp/>若传入句柄 nullptr，则等待所有窗口关闭
<sp/><sp/>void<sp/>init_end(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置：当窗口都被销毁时，自动退出程序
<sp/><sp/>void<sp/>AutoExit();

<sp/><sp/>//<sp/>是否还存在未销毁的绘图窗口
<sp/><sp/><sp/>bool<sp/>isAnyWindow();

<sp/><sp/><sp/>//<sp/>判断一窗口是否还存在（不含已被关闭的窗口）
<sp/><sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isAliveWindow(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取某窗口的图像指针
<sp/><sp/><sp/>IMAGE*<sp/>GetWindowImage(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>获取窗口画布指针
<sp/><sp/><sp/><sp/>Canvas*<sp/>GetWindowCanvas(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>绑定窗口画布指针
<sp/><sp/><sp/><sp/>//<sp/>绑定后，使用画布绘图时将自动开启任务，无需用户开启，但不会自动刷新屏幕
<sp/><sp/>//<sp/>绑定画布后，如在外部操作画布，则必须先启动窗口任务
<sp/>void<sp/>BindWindowCanvas(Canvas*<sp/>pCanvas,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>将绘制在 EasyX<sp/>中的内容显示到目标窗口上（任意窗口）
<sp/><sp/><sp/><sp/>void<sp/>FlushDrawingToWnd(IMAGE*<sp/>pImg,<sp/>HWND<sp/>hWnd);

<sp/><sp/><sp/>//<sp/>阻塞等待绘图任务完成
<sp/>//<sp/>如果传入句柄，则只有该句柄窗口是活动窗口时才等待
<sp/><sp/>void<sp/>WaitForTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的详细信息
<sp/><sp/>EasyWindow<sp/>GetWorkingWindow();

<sp/><sp/><sp/><sp/>//<sp/>等待当前任务完成并设置活动窗口，返回是否设置成功
<sp/>bool<sp/>SetWorkingWindow(HWND<sp/>hWnd);

<sp/>//<sp/>设置加速绘制跳过多少像素点
<sp/><sp/><sp/>//<sp/>此加速效果是有损的，加速效果与跳过的像素点数正相关。
<sp/><sp/>void<sp/>QuickDraw(UINT<sp/>nSkipPixels,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>获取全局绘制模式
<sp/><sp/>DrawMode<sp/>GetDrawMode();

<sp/><sp/><sp/>//<sp/>设置全局绘制模式
<sp/><sp/><sp/>void<sp/>SetDrawMode(DrawMode<sp/>mode);

<sp/><sp/>//<sp/>强制重绘绘图窗口（在<sp/>WM_PAINT<sp/>消息内绘图不需要使用此函数）
<sp/><sp/><sp/>void<sp/>EnforceRedraw(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>为当前活动窗口启动任务，返回是否启动成功（若已在任务中也返回 true）
<sp/>//<sp/>调用 EasyX<sp/>函数进行绘图或获取消息时，都应该先启动任务再进行调用。
<sp/>bool<sp/>BeginTask();

<sp/>//<sp/>终止当前任务，（可选）输出绘图缓冲
<sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/>//<sp/>判断当前是否有任务在进行
<sp/><sp/><sp/>//<sp/>若传入句柄，则额外判断它是否为活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isInTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>判断某窗口的大小是否改变
<sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="_hi_window_8h_1a84c163038896afa780149de502db4e31" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NO_WINDOW_INDEX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>窗口过程函数默认返回值</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="_hi_window_8h_1a9afcf922352ddb6d093557b948c0af70" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HIWINDOW_DEFAULT_PROC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(LRESULT)(-10086)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>托盘消息</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="_hi_window_8h_1a016976fd8db083a06b4658a34bd4734c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WM_TRAY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(WM_USER<sp/>+<sp/>9337)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>系统控件创建消息</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>wParam<sp/>传入<sp/>SysControlBase*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>lParam<sp/>传入<sp/>CREATESTRUCT*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="_hi_window_8h_1ac24af045bde462f45130dcba02ffb936" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WM_SYSCTRL_CREATE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(WM_USER<sp/>+<sp/>9338)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>系统控件析构消息</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>wParam<sp/>传入<sp/>SysControlBase*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="_hi_window_8h_1a13eff6f9ec525326e2fe2d9824777ce1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WM_SYSCTRL_DELETE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(WM_USER<sp/>+<sp/>9339)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>用户重绘消息，无需参数 //<sp/>在快速绘制模式下会发送此消息而非 WN_PAINT
#define<sp/>WM_USER_REDRAW<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(WM_USER<sp/>+<sp/>9340)


namespace<sp/>HiEasyX
{
<sp/>class<sp/>Canvas;
<sp/><sp/>class<sp/>SysControlBase;

<sp/>////////////******<sp/>类型定义<sp/>******////////////

<sp/><sp/><sp/>//<sp/><sp/>Easy<sp/>Window<sp/>窗口过程函数
<sp/><sp/><sp/>//
<sp/>//<sp/><sp/>窗口过程函数规范
<sp/><sp/><sp/><sp/>//<sp/>
<sp/><sp/><sp/><sp/>//<sp/><sp/>函数签名：
<sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>LRESULT<sp/>CALLBACK<sp/>WndProc(HWND<sp/>hWnd,<sp/>UINT<sp/>msg,<sp/>WPARAM<sp/>wParam,<sp/>LPARAM<sp/>lParam);
<sp/><sp/><sp/>//<sp/>
<sp/><sp/><sp/><sp/>//<sp/><sp/>注意事项：
<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>若要以默认方式处理消息，则返回 HIWINDOW_DEFAULT_PROC<sp/>即可（不要使用<sp/>DefWindowProc<sp/>函数）
<sp/><sp/><sp/>/*
<sp/><sp/><sp/><sp/><sp/>//<sp/>示例函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>LRESULT<sp/>CALLBACK<sp/>WndProc(HWND<sp/>hWnd,<sp/>UINT<sp/>msg,<sp/>WPARAM<sp/>wParam,<sp/>LPARAM<sp/>lParam)
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>switch<sp/>(msg)
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>WM_PAINT:
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BEGIN_TASK_WND(hWnd);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>circle(100,<sp/>100,<sp/>70);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>END_TASK();
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>WM_CLOSE:
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DestroyWindow(hWnd);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>WM_DESTROY:
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>TODO:<sp/>在此处释放申请的内存
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PostQuitMessage(0);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>HIWINDOW_DEFAULT_PROC;<sp/><sp/><sp/>//<sp/>标识使用默认消息处理函数继续处理

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>若要以默认方式处理，请勿使用此语句
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//return<sp/>DefWindowProc(hWnd,<sp/>msg,<sp/>wParam,<sp/>lParam);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0;
<sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/>*/

<sp/><sp/><sp/><sp/>//<sp/>窗口
<sp/>struct<sp/>EasyWindow
<sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isAlive;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口是否存在

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hWnd;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口句柄
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>父窗口句柄

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/>pImg;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口图像
<sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/>pBufferImg;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>图像缓冲区
<sp/><sp/><sp/><sp/><sp/><sp/>Canvas*<sp/>pBufferImgCanvas;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>图像缓冲区绑定的画布指针

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>funcWndProc;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口消息处理函数

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;ExMessage&gt;<sp/>vecMessage;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>模拟<sp/>EasyX<sp/>窗口消息队列

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isUseTray;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否使用托盘
<sp/><sp/><sp/><sp/><sp/>NOTIFYICONDATA<sp/>nid;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘信息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isUseTrayMenu;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否使用托盘菜单
<sp/><sp/><sp/><sp/><sp/><sp/>HMENU<sp/>hTrayMenu;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘菜单

<sp/><sp/><sp/><sp/><sp/><sp/>void(*funcTrayMenuProc)(UINT);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘菜单消息处理函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>给出此函数是为了方便响应托盘的菜单消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>如需响应完整的托盘消息，请自定义窗口过程函数并处理<sp/>WM_TRAY<sp/>消息

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isNewSize;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口大小是否改变
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isBusyProcessing;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否正忙于处理内部消息（指不允许用户启动任务的情况）

<sp/><sp/><sp/><sp/><sp/>int<sp/>nSkipPixels;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>绘制时跳过的像素点数量（降质性速绘）

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;SysControlBase*&gt;<sp/>vecSysCtrl;<sp/><sp/><sp/><sp/>//<sp/>记录创建的系统控件
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>bHasCtrl<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否创建过系统控件
<sp/><sp/><sp/>};

<sp/><sp/><sp/><sp/>enum<sp/>DrawMode
<sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/>DM_Real,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>完全按实际绘制（每次要求重绘都立即执行，可能导致程序卡顿）
<sp/><sp/><sp/><sp/><sp/><sp/>DM_Normal,<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>正常绘制（默认，发送<sp/>WM_PAINT<sp/>消息）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_Fast,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>快速绘制（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过部分绘制）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_VeryFast,<sp/><sp/><sp/><sp/>//<sp/>极速绘制（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过很多绘制）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_Fastest,<sp/><sp/><sp/><sp/><sp/>//<sp/>最快的绘制方式（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过大部分绘制）
<sp/><sp/><sp/>};

<sp/><sp/><sp/><sp/>//<sp/>窗口类
<sp/><sp/><sp/><sp/>class<sp/>Window
<sp/><sp/><sp/>{
<sp/><sp/>private:

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>m_nWindowIndex<sp/>=<sp/>NO_WINDOW_INDEX;
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isCreated<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isPreStyle<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isPrePos<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>m_lPreStyle;
<sp/><sp/><sp/><sp/><sp/><sp/>POINT<sp/>m_pPrePos;

<sp/><sp/>public:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Window();

<sp/><sp/><sp/><sp/><sp/>Window(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>~Window();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>InitWindow(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>等价于 InitWindow
<sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>Create(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>CloseWindow();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>等价于 CloseWindow
<sp/><sp/><sp/><sp/><sp/>void<sp/>Destroy();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetProcFunc(WNDPROC<sp/>WindowProcess);

<sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>GetHandle();

<sp/><sp/><sp/><sp/><sp/>EasyWindow<sp/>GetInfo();

<sp/><sp/><sp/><sp/><sp/>bool<sp/>isAlive();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/>GetImage();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Canvas*<sp/>GetCanvas();

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>BindCanvas(Canvas*<sp/>pCanvas);

<sp/><sp/><sp/><sp/><sp/>void<sp/>WaitMyTask();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>SetWorkingWindow();

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetQuickDraw(UINT<sp/>nSkipPixels);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>输出绘图缓冲（并非重绘窗口）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>FlushDrawing();

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘窗口
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Redraw();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>BeginTask();

<sp/><sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isInTask();

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isSizeChanged();

<sp/><sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>DeleteTray();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT));

<sp/><sp/><sp/><sp/><sp/>void<sp/>PreSetStyle(long<sp/>lStyle);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>PreSetPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/><sp/><sp/>long<sp/>GetStyle();

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>SetStyle(long<sp/>lNewStyle);

<sp/><sp/><sp/><sp/><sp/>long<sp/>GetExStyle();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>SetExStyle(long<sp/>lNewExStyle);

<sp/><sp/><sp/><sp/><sp/>POINT<sp/>GetPos();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIZE<sp/>GetWindowSize();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的大小

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetWindowWidth();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的宽度

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetWindowHeight();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的高度

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetClientWidth();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取客户区宽度

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetClientHeight();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取客户区高度

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Move(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>MoveRel(int<sp/>dx,<sp/>int<sp/>dy);

<sp/><sp/><sp/><sp/><sp/>void<sp/>Resize(int<sp/>w,<sp/>int<sp/>h);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否为用户正在使用的窗口
<sp/><sp/><sp/><sp/><sp/>bool<sp/>isForegroundWindow();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExMessage<sp/>Get_Message(BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Get_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>Peek_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Flush_Message(BYTE<sp/>filter<sp/>=<sp/>-1);
<sp/><sp/>};

<sp/><sp/><sp/><sp/>////////////******<sp/>窗体相关函数<sp/>******////////////

<sp/><sp/><sp/><sp/>//<sp/>创建<sp/>Win32<sp/>绘图窗口（默认支持窗口双击消息）（跳过了 EasyX<sp/>原生窗口创建的步骤）
<sp/><sp/><sp/>//<sp/>w,<sp/>h<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口大小
<sp/>//<sp/>flag<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口样式标识
<sp/><sp/>//<sp/>lpszWndTitle<sp/><sp/><sp/><sp/><sp/>窗口标题
<sp/><sp/>//<sp/>WindowProcess<sp/><sp/><sp/><sp/>窗口消息处理函数的指针，为空表示使用默认消息处理函数（详见头文件中“窗口消息处理函数规范”）
<sp/>//<sp/>hParent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>父窗口句柄，为空则表示该窗口独立存在（若填写，该窗口将成为模态窗口）
<sp/><sp/><sp/><sp/>//
<sp/>//<sp/>注：若创建大量绘图窗口，请适量添加延时，否则会导致一些问题。
<sp/><sp/><sp/>HWND<sp/>initgraph_win32(
<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/>);

<sp/><sp/><sp/><sp/>//<sp/>关闭某一绘图窗口，若句柄为<sp/>nullptr<sp/>则关闭所有绘图窗口
<sp/><sp/>void<sp/>closegraph_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置某窗口的过程函数（传入空句柄可以标识当前活动窗口）
<sp/><sp/><sp/><sp/>void<sp/>SetWndProcFunc(HWND<sp/>hWnd,<sp/>WNDPROC<sp/>WindowProcess);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的句柄
<sp/>HWND<sp/>GetHWnd_win32();

<sp/>//<sp/>结束初始化窗口
<sp/><sp/>//<sp/>阻塞，直到目标窗口被关闭
<sp/><sp/><sp/><sp/>//<sp/>若传入句柄 nullptr，则等待所有窗口关闭
<sp/><sp/>void<sp/>init_end(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置：当窗口都被销毁时，自动退出程序
<sp/><sp/>void<sp/>AutoExit();

<sp/><sp/>//<sp/>是否还存在未销毁的绘图窗口
<sp/><sp/><sp/>bool<sp/>isAnyWindow();

<sp/><sp/><sp/>//<sp/>判断一窗口是否还存在（不含已被关闭的窗口）
<sp/><sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isAliveWindow(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取某窗口的图像指针
<sp/><sp/><sp/>IMAGE*<sp/>GetWindowImage(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>获取窗口画布指针
<sp/><sp/><sp/><sp/>Canvas*<sp/>GetWindowCanvas(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>绑定窗口画布指针
<sp/><sp/><sp/><sp/>//<sp/>绑定后，使用画布绘图时将自动开启任务，无需用户开启，但不会自动刷新屏幕
<sp/><sp/>//<sp/>绑定画布后，如在外部操作画布，则必须先启动窗口任务
<sp/>void<sp/>BindWindowCanvas(Canvas*<sp/>pCanvas,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>将绘制在 EasyX<sp/>中的内容显示到目标窗口上（任意窗口）
<sp/><sp/><sp/><sp/>void<sp/>FlushDrawingToWnd(IMAGE*<sp/>pImg,<sp/>HWND<sp/>hWnd);

<sp/><sp/><sp/>//<sp/>阻塞等待绘图任务完成
<sp/>//<sp/>如果传入句柄，则只有该句柄窗口是活动窗口时才等待
<sp/><sp/>void<sp/>WaitForTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的详细信息
<sp/><sp/>EasyWindow<sp/>GetWorkingWindow();

<sp/><sp/><sp/><sp/>//<sp/>等待当前任务完成并设置活动窗口，返回是否设置成功
<sp/>bool<sp/>SetWorkingWindow(HWND<sp/>hWnd);

<sp/>//<sp/>设置加速绘制跳过多少像素点
<sp/><sp/><sp/>//<sp/>此加速效果是有损的，加速效果与跳过的像素点数正相关。
<sp/><sp/>void<sp/>QuickDraw(UINT<sp/>nSkipPixels,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>获取全局绘制模式
<sp/><sp/>DrawMode<sp/>GetDrawMode();

<sp/><sp/><sp/>//<sp/>设置全局绘制模式
<sp/><sp/><sp/>void<sp/>SetDrawMode(DrawMode<sp/>mode);

<sp/><sp/>//<sp/>强制重绘绘图窗口（在<sp/>WM_PAINT<sp/>消息内绘图不需要使用此函数）
<sp/><sp/><sp/>void<sp/>EnforceRedraw(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>为当前活动窗口启动任务，返回是否启动成功（若已在任务中也返回 true）
<sp/>//<sp/>调用 EasyX<sp/>函数进行绘图或获取消息时，都应该先启动任务再进行调用。
<sp/>bool<sp/>BeginTask();

<sp/>//<sp/>终止当前任务，（可选）输出绘图缓冲
<sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/>//<sp/>判断当前是否有任务在进行
<sp/><sp/><sp/>//<sp/>若传入句柄，则额外判断它是否为活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isInTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>判断某窗口的大小是否改变
<sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>在快速绘制模式下会发送此消息而非 WN_PAINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="_hi_window_8h_1a1b8b0e9a917b3802a0680321cf2c4893" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WM_USER_REDRAW<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(WM_USER<sp/>+<sp/>9340)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_hi_easy_x" kindref="compound">HiEasyX</ref></highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Canvas;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SysControlBase;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Easy<sp/>Window<sp/>窗口过程函数</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>窗口过程函数规范</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>函数签名：</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>LRESULT<sp/>CALLBACK<sp/>WndProc(HWND<sp/>hWnd,<sp/>UINT<sp/>msg,<sp/>WPARAM<sp/>wParam,<sp/>LPARAM<sp/>lParam);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>注意事项：</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>若要以默认方式处理消息，则返回 HIWINDOW_DEFAULT_PROC<sp/>即可（不要使用<sp/>DefWindowProc<sp/>函数）</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>示例函数</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LRESULT<sp/>CALLBACK<sp/>WndProc(HWND<sp/>hWnd,<sp/>UINT<sp/>msg,<sp/>WPARAM<sp/>wParam,<sp/>LPARAM<sp/>lParam)</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>switch<sp/>(msg)</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>WM_PAINT:</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BEGIN_TASK_WND(hWnd);</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>circle(100,<sp/>100,<sp/>70);</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>END_TASK();</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="73"><highlight class="comment"></highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>WM_CLOSE:</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DestroyWindow(hWnd);</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="77"><highlight class="comment"></highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>WM_DESTROY:</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>TODO:<sp/>在此处释放申请的内存 <sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PostQuitMessage(0);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>HIWINDOW_DEFAULT_PROC;<sp/><sp/><sp/>//<sp/>标识使用默认消息处理函数继续处理

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>若要以默认方式处理，请勿使用此语句
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//return<sp/>DefWindowProc(hWnd,<sp/>msg,<sp/>wParam,<sp/>lParam);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0;
<sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/>*/

<sp/><sp/><sp/><sp/>//<sp/>窗口
<sp/>struct<sp/>EasyWindow
<sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isAlive;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口是否存在

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hWnd;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口句柄
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>父窗口句柄

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/>pImg;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口图像
<sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/>pBufferImg;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>图像缓冲区
<sp/><sp/><sp/><sp/><sp/><sp/>Canvas*<sp/>pBufferImgCanvas;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>图像缓冲区绑定的画布指针

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>funcWndProc;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口消息处理函数

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;ExMessage&gt;<sp/>vecMessage;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>模拟<sp/>EasyX<sp/>窗口消息队列

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isUseTray;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否使用托盘
<sp/><sp/><sp/><sp/><sp/>NOTIFYICONDATA<sp/>nid;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘信息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isUseTrayMenu;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否使用托盘菜单
<sp/><sp/><sp/><sp/><sp/><sp/>HMENU<sp/>hTrayMenu;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘菜单

<sp/><sp/><sp/><sp/><sp/><sp/>void(*funcTrayMenuProc)(UINT);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘菜单消息处理函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>给出此函数是为了方便响应托盘的菜单消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>如需响应完整的托盘消息，请自定义窗口过程函数并处理<sp/>WM_TRAY<sp/>消息

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isNewSize;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口大小是否改变
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isBusyProcessing;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否正忙于处理内部消息（指不允许用户启动任务的情况）

<sp/><sp/><sp/><sp/><sp/>int<sp/>nSkipPixels;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>绘制时跳过的像素点数量（降质性速绘）

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;SysControlBase*&gt;<sp/>vecSysCtrl;<sp/><sp/><sp/><sp/>//<sp/>记录创建的系统控件
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>bHasCtrl<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否创建过系统控件
<sp/><sp/><sp/>};

<sp/><sp/><sp/><sp/>enum<sp/>DrawMode
<sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/>DM_Real,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>完全按实际绘制（每次要求重绘都立即执行，可能导致程序卡顿）
<sp/><sp/><sp/><sp/><sp/><sp/>DM_Normal,<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>正常绘制（默认，发送<sp/>WM_PAINT<sp/>消息）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_Fast,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>快速绘制（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过部分绘制）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_VeryFast,<sp/><sp/><sp/><sp/>//<sp/>极速绘制（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过很多绘制）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_Fastest,<sp/><sp/><sp/><sp/><sp/>//<sp/>最快的绘制方式（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过大部分绘制）
<sp/><sp/><sp/>};

<sp/><sp/><sp/><sp/>//<sp/>窗口类
<sp/><sp/><sp/><sp/>class<sp/>Window
<sp/><sp/><sp/>{
<sp/><sp/>private:

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>m_nWindowIndex<sp/>=<sp/>NO_WINDOW_INDEX;
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isCreated<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isPreStyle<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isPrePos<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>m_lPreStyle;
<sp/><sp/><sp/><sp/><sp/><sp/>POINT<sp/>m_pPrePos;

<sp/><sp/>public:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Window();

<sp/><sp/><sp/><sp/><sp/>Window(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>~Window();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>InitWindow(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>等价于 InitWindow
<sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>Create(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>CloseWindow();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>等价于 CloseWindow
<sp/><sp/><sp/><sp/><sp/>void<sp/>Destroy();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetProcFunc(WNDPROC<sp/>WindowProcess);

<sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>GetHandle();

<sp/><sp/><sp/><sp/><sp/>EasyWindow<sp/>GetInfo();

<sp/><sp/><sp/><sp/><sp/>bool<sp/>isAlive();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/>GetImage();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Canvas*<sp/>GetCanvas();

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>BindCanvas(Canvas*<sp/>pCanvas);

<sp/><sp/><sp/><sp/><sp/>void<sp/>WaitMyTask();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>SetWorkingWindow();

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetQuickDraw(UINT<sp/>nSkipPixels);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>输出绘图缓冲（并非重绘窗口）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>FlushDrawing();

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘窗口
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Redraw();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>BeginTask();

<sp/><sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isInTask();

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isSizeChanged();

<sp/><sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>DeleteTray();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT));

<sp/><sp/><sp/><sp/><sp/>void<sp/>PreSetStyle(long<sp/>lStyle);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>PreSetPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/><sp/><sp/>long<sp/>GetStyle();

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>SetStyle(long<sp/>lNewStyle);

<sp/><sp/><sp/><sp/><sp/>long<sp/>GetExStyle();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>SetExStyle(long<sp/>lNewExStyle);

<sp/><sp/><sp/><sp/><sp/>POINT<sp/>GetPos();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIZE<sp/>GetWindowSize();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的大小

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetWindowWidth();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的宽度

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetWindowHeight();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的高度

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetClientWidth();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取客户区宽度

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetClientHeight();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取客户区高度

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Move(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>MoveRel(int<sp/>dx,<sp/>int<sp/>dy);

<sp/><sp/><sp/><sp/><sp/>void<sp/>Resize(int<sp/>w,<sp/>int<sp/>h);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否为用户正在使用的窗口
<sp/><sp/><sp/><sp/><sp/>bool<sp/>isForegroundWindow();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExMessage<sp/>Get_Message(BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Get_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>Peek_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Flush_Message(BYTE<sp/>filter<sp/>=<sp/>-1);
<sp/><sp/>};

<sp/><sp/><sp/><sp/>////////////******<sp/>窗体相关函数<sp/>******////////////

<sp/><sp/><sp/><sp/>//<sp/>创建<sp/>Win32<sp/>绘图窗口（默认支持窗口双击消息）（跳过了 EasyX<sp/>原生窗口创建的步骤）
<sp/><sp/><sp/>//<sp/>w,<sp/>h<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口大小
<sp/>//<sp/>flag<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口样式标识
<sp/><sp/>//<sp/>lpszWndTitle<sp/><sp/><sp/><sp/><sp/>窗口标题
<sp/><sp/>//<sp/>WindowProcess<sp/><sp/><sp/><sp/>窗口消息处理函数的指针，为空表示使用默认消息处理函数（详见头文件中“窗口消息处理函数规范”）
<sp/>//<sp/>hParent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>父窗口句柄，为空则表示该窗口独立存在（若填写，该窗口将成为模态窗口）
<sp/><sp/><sp/><sp/>//
<sp/>//<sp/>注：若创建大量绘图窗口，请适量添加延时，否则会导致一些问题。
<sp/><sp/><sp/>HWND<sp/>initgraph_win32(
<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/>);

<sp/><sp/><sp/><sp/>//<sp/>关闭某一绘图窗口，若句柄为<sp/>nullptr<sp/>则关闭所有绘图窗口
<sp/><sp/>void<sp/>closegraph_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置某窗口的过程函数（传入空句柄可以标识当前活动窗口）
<sp/><sp/><sp/><sp/>void<sp/>SetWndProcFunc(HWND<sp/>hWnd,<sp/>WNDPROC<sp/>WindowProcess);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的句柄
<sp/>HWND<sp/>GetHWnd_win32();

<sp/>//<sp/>结束初始化窗口
<sp/><sp/>//<sp/>阻塞，直到目标窗口被关闭
<sp/><sp/><sp/><sp/>//<sp/>若传入句柄 nullptr，则等待所有窗口关闭
<sp/><sp/>void<sp/>init_end(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置：当窗口都被销毁时，自动退出程序
<sp/><sp/>void<sp/>AutoExit();

<sp/><sp/>//<sp/>是否还存在未销毁的绘图窗口
<sp/><sp/><sp/>bool<sp/>isAnyWindow();

<sp/><sp/><sp/>//<sp/>判断一窗口是否还存在（不含已被关闭的窗口）
<sp/><sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isAliveWindow(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取某窗口的图像指针
<sp/><sp/><sp/>IMAGE*<sp/>GetWindowImage(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>获取窗口画布指针
<sp/><sp/><sp/><sp/>Canvas*<sp/>GetWindowCanvas(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>绑定窗口画布指针
<sp/><sp/><sp/><sp/>//<sp/>绑定后，使用画布绘图时将自动开启任务，无需用户开启，但不会自动刷新屏幕
<sp/><sp/>//<sp/>绑定画布后，如在外部操作画布，则必须先启动窗口任务
<sp/>void<sp/>BindWindowCanvas(Canvas*<sp/>pCanvas,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>将绘制在 EasyX<sp/>中的内容显示到目标窗口上（任意窗口）
<sp/><sp/><sp/><sp/>void<sp/>FlushDrawingToWnd(IMAGE*<sp/>pImg,<sp/>HWND<sp/>hWnd);

<sp/><sp/><sp/>//<sp/>阻塞等待绘图任务完成
<sp/>//<sp/>如果传入句柄，则只有该句柄窗口是活动窗口时才等待
<sp/><sp/>void<sp/>WaitForTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的详细信息
<sp/><sp/>EasyWindow<sp/>GetWorkingWindow();

<sp/><sp/><sp/><sp/>//<sp/>等待当前任务完成并设置活动窗口，返回是否设置成功
<sp/>bool<sp/>SetWorkingWindow(HWND<sp/>hWnd);

<sp/>//<sp/>设置加速绘制跳过多少像素点
<sp/><sp/><sp/>//<sp/>此加速效果是有损的，加速效果与跳过的像素点数正相关。
<sp/><sp/>void<sp/>QuickDraw(UINT<sp/>nSkipPixels,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>获取全局绘制模式
<sp/><sp/>DrawMode<sp/>GetDrawMode();

<sp/><sp/><sp/>//<sp/>设置全局绘制模式
<sp/><sp/><sp/>void<sp/>SetDrawMode(DrawMode<sp/>mode);

<sp/><sp/>//<sp/>强制重绘绘图窗口（在<sp/>WM_PAINT<sp/>消息内绘图不需要使用此函数）
<sp/><sp/><sp/>void<sp/>EnforceRedraw(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>为当前活动窗口启动任务，返回是否启动成功（若已在任务中也返回 true）
<sp/>//<sp/>调用 EasyX<sp/>函数进行绘图或获取消息时，都应该先启动任务再进行调用。
<sp/>bool<sp/>BeginTask();

<sp/>//<sp/>终止当前任务，（可选）输出绘图缓冲
<sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/>//<sp/>判断当前是否有任务在进行
<sp/><sp/><sp/>//<sp/>若传入句柄，则额外判断它是否为活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isInTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>判断某窗口的大小是否改变
<sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PostQuitMessage(0);</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="82"><highlight class="comment"></highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>HIWINDOW_DEFAULT_PROC;<sp/><sp/><sp/>//<sp/>标识使用默认消息处理函数继续处理</highlight></codeline>
<codeline lineno="85"><highlight class="comment"></highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>若要以默认方式处理，请勿使用此语句 <sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//return<sp/>DefWindowProc(hWnd,<sp/>msg,<sp/>wParam,<sp/>lParam);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0;
<sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/>*/

<sp/><sp/><sp/><sp/>//<sp/>窗口
<sp/>struct<sp/>EasyWindow
<sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isAlive;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口是否存在

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hWnd;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口句柄
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>父窗口句柄

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/>pImg;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口图像
<sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/>pBufferImg;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>图像缓冲区
<sp/><sp/><sp/><sp/><sp/><sp/>Canvas*<sp/>pBufferImgCanvas;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>图像缓冲区绑定的画布指针

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>funcWndProc;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口消息处理函数

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;ExMessage&gt;<sp/>vecMessage;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>模拟<sp/>EasyX<sp/>窗口消息队列

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isUseTray;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否使用托盘
<sp/><sp/><sp/><sp/><sp/>NOTIFYICONDATA<sp/>nid;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘信息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isUseTrayMenu;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否使用托盘菜单
<sp/><sp/><sp/><sp/><sp/><sp/>HMENU<sp/>hTrayMenu;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘菜单

<sp/><sp/><sp/><sp/><sp/><sp/>void(*funcTrayMenuProc)(UINT);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘菜单消息处理函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>给出此函数是为了方便响应托盘的菜单消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>如需响应完整的托盘消息，请自定义窗口过程函数并处理<sp/>WM_TRAY<sp/>消息

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isNewSize;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口大小是否改变
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isBusyProcessing;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否正忙于处理内部消息（指不允许用户启动任务的情况）

<sp/><sp/><sp/><sp/><sp/>int<sp/>nSkipPixels;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>绘制时跳过的像素点数量（降质性速绘）

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;SysControlBase*&gt;<sp/>vecSysCtrl;<sp/><sp/><sp/><sp/>//<sp/>记录创建的系统控件
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>bHasCtrl<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否创建过系统控件
<sp/><sp/><sp/>};

<sp/><sp/><sp/><sp/>enum<sp/>DrawMode
<sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/>DM_Real,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>完全按实际绘制（每次要求重绘都立即执行，可能导致程序卡顿）
<sp/><sp/><sp/><sp/><sp/><sp/>DM_Normal,<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>正常绘制（默认，发送<sp/>WM_PAINT<sp/>消息）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_Fast,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>快速绘制（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过部分绘制）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_VeryFast,<sp/><sp/><sp/><sp/>//<sp/>极速绘制（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过很多绘制）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_Fastest,<sp/><sp/><sp/><sp/><sp/>//<sp/>最快的绘制方式（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过大部分绘制）
<sp/><sp/><sp/>};

<sp/><sp/><sp/><sp/>//<sp/>窗口类
<sp/><sp/><sp/><sp/>class<sp/>Window
<sp/><sp/><sp/>{
<sp/><sp/>private:

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>m_nWindowIndex<sp/>=<sp/>NO_WINDOW_INDEX;
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isCreated<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isPreStyle<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isPrePos<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>m_lPreStyle;
<sp/><sp/><sp/><sp/><sp/><sp/>POINT<sp/>m_pPrePos;

<sp/><sp/>public:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Window();

<sp/><sp/><sp/><sp/><sp/>Window(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>~Window();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>InitWindow(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>等价于 InitWindow
<sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>Create(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>CloseWindow();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>等价于 CloseWindow
<sp/><sp/><sp/><sp/><sp/>void<sp/>Destroy();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetProcFunc(WNDPROC<sp/>WindowProcess);

<sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>GetHandle();

<sp/><sp/><sp/><sp/><sp/>EasyWindow<sp/>GetInfo();

<sp/><sp/><sp/><sp/><sp/>bool<sp/>isAlive();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/>GetImage();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Canvas*<sp/>GetCanvas();

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>BindCanvas(Canvas*<sp/>pCanvas);

<sp/><sp/><sp/><sp/><sp/>void<sp/>WaitMyTask();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>SetWorkingWindow();

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetQuickDraw(UINT<sp/>nSkipPixels);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>输出绘图缓冲（并非重绘窗口）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>FlushDrawing();

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘窗口
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Redraw();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>BeginTask();

<sp/><sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isInTask();

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isSizeChanged();

<sp/><sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>DeleteTray();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT));

<sp/><sp/><sp/><sp/><sp/>void<sp/>PreSetStyle(long<sp/>lStyle);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>PreSetPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/><sp/><sp/>long<sp/>GetStyle();

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>SetStyle(long<sp/>lNewStyle);

<sp/><sp/><sp/><sp/><sp/>long<sp/>GetExStyle();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>SetExStyle(long<sp/>lNewExStyle);

<sp/><sp/><sp/><sp/><sp/>POINT<sp/>GetPos();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIZE<sp/>GetWindowSize();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的大小

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetWindowWidth();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的宽度

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetWindowHeight();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的高度

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetClientWidth();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取客户区宽度

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetClientHeight();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取客户区高度

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Move(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>MoveRel(int<sp/>dx,<sp/>int<sp/>dy);

<sp/><sp/><sp/><sp/><sp/>void<sp/>Resize(int<sp/>w,<sp/>int<sp/>h);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否为用户正在使用的窗口
<sp/><sp/><sp/><sp/><sp/>bool<sp/>isForegroundWindow();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExMessage<sp/>Get_Message(BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Get_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>Peek_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Flush_Message(BYTE<sp/>filter<sp/>=<sp/>-1);
<sp/><sp/>};

<sp/><sp/><sp/><sp/>////////////******<sp/>窗体相关函数<sp/>******////////////

<sp/><sp/><sp/><sp/>//<sp/>创建<sp/>Win32<sp/>绘图窗口（默认支持窗口双击消息）（跳过了 EasyX<sp/>原生窗口创建的步骤）
<sp/><sp/><sp/>//<sp/>w,<sp/>h<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口大小
<sp/>//<sp/>flag<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口样式标识
<sp/><sp/>//<sp/>lpszWndTitle<sp/><sp/><sp/><sp/><sp/>窗口标题
<sp/><sp/>//<sp/>WindowProcess<sp/><sp/><sp/><sp/>窗口消息处理函数的指针，为空表示使用默认消息处理函数（详见头文件中“窗口消息处理函数规范”）
<sp/>//<sp/>hParent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>父窗口句柄，为空则表示该窗口独立存在（若填写，该窗口将成为模态窗口）
<sp/><sp/><sp/><sp/>//
<sp/>//<sp/>注：若创建大量绘图窗口，请适量添加延时，否则会导致一些问题。
<sp/><sp/><sp/>HWND<sp/>initgraph_win32(
<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/>);

<sp/><sp/><sp/><sp/>//<sp/>关闭某一绘图窗口，若句柄为<sp/>nullptr<sp/>则关闭所有绘图窗口
<sp/><sp/>void<sp/>closegraph_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置某窗口的过程函数（传入空句柄可以标识当前活动窗口）
<sp/><sp/><sp/><sp/>void<sp/>SetWndProcFunc(HWND<sp/>hWnd,<sp/>WNDPROC<sp/>WindowProcess);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的句柄
<sp/>HWND<sp/>GetHWnd_win32();

<sp/>//<sp/>结束初始化窗口
<sp/><sp/>//<sp/>阻塞，直到目标窗口被关闭
<sp/><sp/><sp/><sp/>//<sp/>若传入句柄 nullptr，则等待所有窗口关闭
<sp/><sp/>void<sp/>init_end(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置：当窗口都被销毁时，自动退出程序
<sp/><sp/>void<sp/>AutoExit();

<sp/><sp/>//<sp/>是否还存在未销毁的绘图窗口
<sp/><sp/><sp/>bool<sp/>isAnyWindow();

<sp/><sp/><sp/>//<sp/>判断一窗口是否还存在（不含已被关闭的窗口）
<sp/><sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isAliveWindow(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取某窗口的图像指针
<sp/><sp/><sp/>IMAGE*<sp/>GetWindowImage(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>获取窗口画布指针
<sp/><sp/><sp/><sp/>Canvas*<sp/>GetWindowCanvas(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>绑定窗口画布指针
<sp/><sp/><sp/><sp/>//<sp/>绑定后，使用画布绘图时将自动开启任务，无需用户开启，但不会自动刷新屏幕
<sp/><sp/>//<sp/>绑定画布后，如在外部操作画布，则必须先启动窗口任务
<sp/>void<sp/>BindWindowCanvas(Canvas*<sp/>pCanvas,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>将绘制在 EasyX<sp/>中的内容显示到目标窗口上（任意窗口）
<sp/><sp/><sp/><sp/>void<sp/>FlushDrawingToWnd(IMAGE*<sp/>pImg,<sp/>HWND<sp/>hWnd);

<sp/><sp/><sp/>//<sp/>阻塞等待绘图任务完成
<sp/>//<sp/>如果传入句柄，则只有该句柄窗口是活动窗口时才等待
<sp/><sp/>void<sp/>WaitForTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的详细信息
<sp/><sp/>EasyWindow<sp/>GetWorkingWindow();

<sp/><sp/><sp/><sp/>//<sp/>等待当前任务完成并设置活动窗口，返回是否设置成功
<sp/>bool<sp/>SetWorkingWindow(HWND<sp/>hWnd);

<sp/>//<sp/>设置加速绘制跳过多少像素点
<sp/><sp/><sp/>//<sp/>此加速效果是有损的，加速效果与跳过的像素点数正相关。
<sp/><sp/>void<sp/>QuickDraw(UINT<sp/>nSkipPixels,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>获取全局绘制模式
<sp/><sp/>DrawMode<sp/>GetDrawMode();

<sp/><sp/><sp/>//<sp/>设置全局绘制模式
<sp/><sp/><sp/>void<sp/>SetDrawMode(DrawMode<sp/>mode);

<sp/><sp/>//<sp/>强制重绘绘图窗口（在<sp/>WM_PAINT<sp/>消息内绘图不需要使用此函数）
<sp/><sp/><sp/>void<sp/>EnforceRedraw(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>为当前活动窗口启动任务，返回是否启动成功（若已在任务中也返回 true）
<sp/>//<sp/>调用 EasyX<sp/>函数进行绘图或获取消息时，都应该先启动任务再进行调用。
<sp/>bool<sp/>BeginTask();

<sp/>//<sp/>终止当前任务，（可选）输出绘图缓冲
<sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/>//<sp/>判断当前是否有任务在进行
<sp/><sp/><sp/>//<sp/>若传入句柄，则额外判断它是否为活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isInTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>判断某窗口的大小是否改变
<sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//return<sp/>DefWindowProc(hWnd,<sp/>msg,<sp/>wParam,<sp/>lParam);</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="comment"></highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>窗口 <sp/>struct<sp/>EasyWindow
<sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isAlive;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口是否存在

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hWnd;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口句柄
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>父窗口句柄

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/>pImg;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口图像
<sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/>pBufferImg;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>图像缓冲区
<sp/><sp/><sp/><sp/><sp/><sp/>Canvas*<sp/>pBufferImgCanvas;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>图像缓冲区绑定的画布指针

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>funcWndProc;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口消息处理函数

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;ExMessage&gt;<sp/>vecMessage;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>模拟<sp/>EasyX<sp/>窗口消息队列

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isUseTray;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否使用托盘
<sp/><sp/><sp/><sp/><sp/>NOTIFYICONDATA<sp/>nid;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘信息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isUseTrayMenu;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否使用托盘菜单
<sp/><sp/><sp/><sp/><sp/><sp/>HMENU<sp/>hTrayMenu;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘菜单

<sp/><sp/><sp/><sp/><sp/><sp/>void(*funcTrayMenuProc)(UINT);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘菜单消息处理函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>给出此函数是为了方便响应托盘的菜单消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>如需响应完整的托盘消息，请自定义窗口过程函数并处理<sp/>WM_TRAY<sp/>消息

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isNewSize;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口大小是否改变
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isBusyProcessing;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否正忙于处理内部消息（指不允许用户启动任务的情况）

<sp/><sp/><sp/><sp/><sp/>int<sp/>nSkipPixels;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>绘制时跳过的像素点数量（降质性速绘）

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;SysControlBase*&gt;<sp/>vecSysCtrl;<sp/><sp/><sp/><sp/>//<sp/>记录创建的系统控件
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>bHasCtrl<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否创建过系统控件
<sp/><sp/><sp/>};

<sp/><sp/><sp/><sp/>enum<sp/>DrawMode
<sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/>DM_Real,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>完全按实际绘制（每次要求重绘都立即执行，可能导致程序卡顿）
<sp/><sp/><sp/><sp/><sp/><sp/>DM_Normal,<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>正常绘制（默认，发送<sp/>WM_PAINT<sp/>消息）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_Fast,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>快速绘制（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过部分绘制）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_VeryFast,<sp/><sp/><sp/><sp/>//<sp/>极速绘制（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过很多绘制）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_Fastest,<sp/><sp/><sp/><sp/><sp/>//<sp/>最快的绘制方式（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过大部分绘制）
<sp/><sp/><sp/>};

<sp/><sp/><sp/><sp/>//<sp/>窗口类
<sp/><sp/><sp/><sp/>class<sp/>Window
<sp/><sp/><sp/>{
<sp/><sp/>private:

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>m_nWindowIndex<sp/>=<sp/>NO_WINDOW_INDEX;
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isCreated<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isPreStyle<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isPrePos<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>m_lPreStyle;
<sp/><sp/><sp/><sp/><sp/><sp/>POINT<sp/>m_pPrePos;

<sp/><sp/>public:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Window();

<sp/><sp/><sp/><sp/><sp/>Window(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>~Window();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>InitWindow(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>等价于 InitWindow
<sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>Create(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>CloseWindow();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>等价于 CloseWindow
<sp/><sp/><sp/><sp/><sp/>void<sp/>Destroy();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetProcFunc(WNDPROC<sp/>WindowProcess);

<sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>GetHandle();

<sp/><sp/><sp/><sp/><sp/>EasyWindow<sp/>GetInfo();

<sp/><sp/><sp/><sp/><sp/>bool<sp/>isAlive();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/>GetImage();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Canvas*<sp/>GetCanvas();

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>BindCanvas(Canvas*<sp/>pCanvas);

<sp/><sp/><sp/><sp/><sp/>void<sp/>WaitMyTask();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>SetWorkingWindow();

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetQuickDraw(UINT<sp/>nSkipPixels);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>输出绘图缓冲（并非重绘窗口）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>FlushDrawing();

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘窗口
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Redraw();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>BeginTask();

<sp/><sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isInTask();

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isSizeChanged();

<sp/><sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>DeleteTray();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT));

<sp/><sp/><sp/><sp/><sp/>void<sp/>PreSetStyle(long<sp/>lStyle);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>PreSetPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/><sp/><sp/>long<sp/>GetStyle();

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>SetStyle(long<sp/>lNewStyle);

<sp/><sp/><sp/><sp/><sp/>long<sp/>GetExStyle();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>SetExStyle(long<sp/>lNewExStyle);

<sp/><sp/><sp/><sp/><sp/>POINT<sp/>GetPos();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIZE<sp/>GetWindowSize();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的大小

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetWindowWidth();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的宽度

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetWindowHeight();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的高度

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetClientWidth();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取客户区宽度

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetClientHeight();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取客户区高度

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Move(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>MoveRel(int<sp/>dx,<sp/>int<sp/>dy);

<sp/><sp/><sp/><sp/><sp/>void<sp/>Resize(int<sp/>w,<sp/>int<sp/>h);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否为用户正在使用的窗口
<sp/><sp/><sp/><sp/><sp/>bool<sp/>isForegroundWindow();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExMessage<sp/>Get_Message(BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Get_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>Peek_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Flush_Message(BYTE<sp/>filter<sp/>=<sp/>-1);
<sp/><sp/>};

<sp/><sp/><sp/><sp/>////////////******<sp/>窗体相关函数<sp/>******////////////

<sp/><sp/><sp/><sp/>//<sp/>创建<sp/>Win32<sp/>绘图窗口（默认支持窗口双击消息）（跳过了 EasyX<sp/>原生窗口创建的步骤）
<sp/><sp/><sp/>//<sp/>w,<sp/>h<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口大小
<sp/>//<sp/>flag<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口样式标识
<sp/><sp/>//<sp/>lpszWndTitle<sp/><sp/><sp/><sp/><sp/>窗口标题
<sp/><sp/>//<sp/>WindowProcess<sp/><sp/><sp/><sp/>窗口消息处理函数的指针，为空表示使用默认消息处理函数（详见头文件中“窗口消息处理函数规范”）
<sp/>//<sp/>hParent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>父窗口句柄，为空则表示该窗口独立存在（若填写，该窗口将成为模态窗口）
<sp/><sp/><sp/><sp/>//
<sp/>//<sp/>注：若创建大量绘图窗口，请适量添加延时，否则会导致一些问题。
<sp/><sp/><sp/>HWND<sp/>initgraph_win32(
<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/>);

<sp/><sp/><sp/><sp/>//<sp/>关闭某一绘图窗口，若句柄为<sp/>nullptr<sp/>则关闭所有绘图窗口
<sp/><sp/>void<sp/>closegraph_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置某窗口的过程函数（传入空句柄可以标识当前活动窗口）
<sp/><sp/><sp/><sp/>void<sp/>SetWndProcFunc(HWND<sp/>hWnd,<sp/>WNDPROC<sp/>WindowProcess);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的句柄
<sp/>HWND<sp/>GetHWnd_win32();

<sp/>//<sp/>结束初始化窗口
<sp/><sp/>//<sp/>阻塞，直到目标窗口被关闭
<sp/><sp/><sp/><sp/>//<sp/>若传入句柄 nullptr，则等待所有窗口关闭
<sp/><sp/>void<sp/>init_end(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置：当窗口都被销毁时，自动退出程序
<sp/><sp/>void<sp/>AutoExit();

<sp/><sp/>//<sp/>是否还存在未销毁的绘图窗口
<sp/><sp/><sp/>bool<sp/>isAnyWindow();

<sp/><sp/><sp/>//<sp/>判断一窗口是否还存在（不含已被关闭的窗口）
<sp/><sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isAliveWindow(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取某窗口的图像指针
<sp/><sp/><sp/>IMAGE*<sp/>GetWindowImage(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>获取窗口画布指针
<sp/><sp/><sp/><sp/>Canvas*<sp/>GetWindowCanvas(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>绑定窗口画布指针
<sp/><sp/><sp/><sp/>//<sp/>绑定后，使用画布绘图时将自动开启任务，无需用户开启，但不会自动刷新屏幕
<sp/><sp/>//<sp/>绑定画布后，如在外部操作画布，则必须先启动窗口任务
<sp/>void<sp/>BindWindowCanvas(Canvas*<sp/>pCanvas,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>将绘制在 EasyX<sp/>中的内容显示到目标窗口上（任意窗口）
<sp/><sp/><sp/><sp/>void<sp/>FlushDrawingToWnd(IMAGE*<sp/>pImg,<sp/>HWND<sp/>hWnd);

<sp/><sp/><sp/>//<sp/>阻塞等待绘图任务完成
<sp/>//<sp/>如果传入句柄，则只有该句柄窗口是活动窗口时才等待
<sp/><sp/>void<sp/>WaitForTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的详细信息
<sp/><sp/>EasyWindow<sp/>GetWorkingWindow();

<sp/><sp/><sp/><sp/>//<sp/>等待当前任务完成并设置活动窗口，返回是否设置成功
<sp/>bool<sp/>SetWorkingWindow(HWND<sp/>hWnd);

<sp/>//<sp/>设置加速绘制跳过多少像素点
<sp/><sp/><sp/>//<sp/>此加速效果是有损的，加速效果与跳过的像素点数正相关。
<sp/><sp/>void<sp/>QuickDraw(UINT<sp/>nSkipPixels,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>获取全局绘制模式
<sp/><sp/>DrawMode<sp/>GetDrawMode();

<sp/><sp/><sp/>//<sp/>设置全局绘制模式
<sp/><sp/><sp/>void<sp/>SetDrawMode(DrawMode<sp/>mode);

<sp/><sp/>//<sp/>强制重绘绘图窗口（在<sp/>WM_PAINT<sp/>消息内绘图不需要使用此函数）
<sp/><sp/><sp/>void<sp/>EnforceRedraw(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>为当前活动窗口启动任务，返回是否启动成功（若已在任务中也返回 true）
<sp/>//<sp/>调用 EasyX<sp/>函数进行绘图或获取消息时，都应该先启动任务再进行调用。
<sp/>bool<sp/>BeginTask();

<sp/>//<sp/>终止当前任务，（可选）输出绘图缓冲
<sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/>//<sp/>判断当前是否有任务在进行
<sp/><sp/><sp/>//<sp/>若传入句柄，则额外判断它是否为活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isInTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>判断某窗口的大小是否改变
<sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="struct_hi_easy_x_1_1_easy_window" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_hi_easy_x_1_1_easy_window" kindref="compound">EasyWindow</ref></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="98" refid="struct_hi_easy_x_1_1_easy_window_1a2269803221f80d58069c0cd78d8f3395" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_hi_easy_x_1_1_easy_window_1a2269803221f80d58069c0cd78d8f3395" kindref="member">isAlive</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>窗口是否存在 
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hWnd;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口句柄
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>父窗口句柄

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/>pImg;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口图像
<sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/>pBufferImg;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>图像缓冲区
<sp/><sp/><sp/><sp/><sp/><sp/>Canvas*<sp/>pBufferImgCanvas;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>图像缓冲区绑定的画布指针

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>funcWndProc;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口消息处理函数

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;ExMessage&gt;<sp/>vecMessage;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>模拟<sp/>EasyX<sp/>窗口消息队列

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isUseTray;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否使用托盘
<sp/><sp/><sp/><sp/><sp/>NOTIFYICONDATA<sp/>nid;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘信息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isUseTrayMenu;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否使用托盘菜单
<sp/><sp/><sp/><sp/><sp/><sp/>HMENU<sp/>hTrayMenu;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘菜单

<sp/><sp/><sp/><sp/><sp/><sp/>void(*funcTrayMenuProc)(UINT);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘菜单消息处理函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>给出此函数是为了方便响应托盘的菜单消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>如需响应完整的托盘消息，请自定义窗口过程函数并处理<sp/>WM_TRAY<sp/>消息

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isNewSize;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口大小是否改变
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isBusyProcessing;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否正忙于处理内部消息（指不允许用户启动任务的情况）

<sp/><sp/><sp/><sp/><sp/>int<sp/>nSkipPixels;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>绘制时跳过的像素点数量（降质性速绘）

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;SysControlBase*&gt;<sp/>vecSysCtrl;<sp/><sp/><sp/><sp/>//<sp/>记录创建的系统控件
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>bHasCtrl<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否创建过系统控件
<sp/><sp/><sp/>};

<sp/><sp/><sp/><sp/>enum<sp/>DrawMode
<sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/>DM_Real,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>完全按实际绘制（每次要求重绘都立即执行，可能导致程序卡顿）
<sp/><sp/><sp/><sp/><sp/><sp/>DM_Normal,<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>正常绘制（默认，发送<sp/>WM_PAINT<sp/>消息）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_Fast,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>快速绘制（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过部分绘制）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_VeryFast,<sp/><sp/><sp/><sp/>//<sp/>极速绘制（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过很多绘制）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_Fastest,<sp/><sp/><sp/><sp/><sp/>//<sp/>最快的绘制方式（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过大部分绘制）
<sp/><sp/><sp/>};

<sp/><sp/><sp/><sp/>//<sp/>窗口类
<sp/><sp/><sp/><sp/>class<sp/>Window
<sp/><sp/><sp/>{
<sp/><sp/>private:

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>m_nWindowIndex<sp/>=<sp/>NO_WINDOW_INDEX;
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isCreated<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isPreStyle<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isPrePos<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>m_lPreStyle;
<sp/><sp/><sp/><sp/><sp/><sp/>POINT<sp/>m_pPrePos;

<sp/><sp/>public:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Window();

<sp/><sp/><sp/><sp/><sp/>Window(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>~Window();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>InitWindow(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>等价于 InitWindow
<sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>Create(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>CloseWindow();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>等价于 CloseWindow
<sp/><sp/><sp/><sp/><sp/>void<sp/>Destroy();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetProcFunc(WNDPROC<sp/>WindowProcess);

<sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>GetHandle();

<sp/><sp/><sp/><sp/><sp/>EasyWindow<sp/>GetInfo();

<sp/><sp/><sp/><sp/><sp/>bool<sp/>isAlive();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/>GetImage();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Canvas*<sp/>GetCanvas();

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>BindCanvas(Canvas*<sp/>pCanvas);

<sp/><sp/><sp/><sp/><sp/>void<sp/>WaitMyTask();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>SetWorkingWindow();

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetQuickDraw(UINT<sp/>nSkipPixels);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>输出绘图缓冲（并非重绘窗口）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>FlushDrawing();

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘窗口
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Redraw();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>BeginTask();

<sp/><sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isInTask();

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isSizeChanged();

<sp/><sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>DeleteTray();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT));

<sp/><sp/><sp/><sp/><sp/>void<sp/>PreSetStyle(long<sp/>lStyle);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>PreSetPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/><sp/><sp/>long<sp/>GetStyle();

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>SetStyle(long<sp/>lNewStyle);

<sp/><sp/><sp/><sp/><sp/>long<sp/>GetExStyle();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>SetExStyle(long<sp/>lNewExStyle);

<sp/><sp/><sp/><sp/><sp/>POINT<sp/>GetPos();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIZE<sp/>GetWindowSize();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的大小

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetWindowWidth();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的宽度

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetWindowHeight();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的高度

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetClientWidth();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取客户区宽度

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetClientHeight();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取客户区高度

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Move(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>MoveRel(int<sp/>dx,<sp/>int<sp/>dy);

<sp/><sp/><sp/><sp/><sp/>void<sp/>Resize(int<sp/>w,<sp/>int<sp/>h);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否为用户正在使用的窗口
<sp/><sp/><sp/><sp/><sp/>bool<sp/>isForegroundWindow();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExMessage<sp/>Get_Message(BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Get_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>Peek_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Flush_Message(BYTE<sp/>filter<sp/>=<sp/>-1);
<sp/><sp/>};

<sp/><sp/><sp/><sp/>////////////******<sp/>窗体相关函数<sp/>******////////////

<sp/><sp/><sp/><sp/>//<sp/>创建<sp/>Win32<sp/>绘图窗口（默认支持窗口双击消息）（跳过了 EasyX<sp/>原生窗口创建的步骤）
<sp/><sp/><sp/>//<sp/>w,<sp/>h<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口大小
<sp/>//<sp/>flag<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口样式标识
<sp/><sp/>//<sp/>lpszWndTitle<sp/><sp/><sp/><sp/><sp/>窗口标题
<sp/><sp/>//<sp/>WindowProcess<sp/><sp/><sp/><sp/>窗口消息处理函数的指针，为空表示使用默认消息处理函数（详见头文件中“窗口消息处理函数规范”）
<sp/>//<sp/>hParent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>父窗口句柄，为空则表示该窗口独立存在（若填写，该窗口将成为模态窗口）
<sp/><sp/><sp/><sp/>//
<sp/>//<sp/>注：若创建大量绘图窗口，请适量添加延时，否则会导致一些问题。
<sp/><sp/><sp/>HWND<sp/>initgraph_win32(
<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/>);

<sp/><sp/><sp/><sp/>//<sp/>关闭某一绘图窗口，若句柄为<sp/>nullptr<sp/>则关闭所有绘图窗口
<sp/><sp/>void<sp/>closegraph_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置某窗口的过程函数（传入空句柄可以标识当前活动窗口）
<sp/><sp/><sp/><sp/>void<sp/>SetWndProcFunc(HWND<sp/>hWnd,<sp/>WNDPROC<sp/>WindowProcess);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的句柄
<sp/>HWND<sp/>GetHWnd_win32();

<sp/>//<sp/>结束初始化窗口
<sp/><sp/>//<sp/>阻塞，直到目标窗口被关闭
<sp/><sp/><sp/><sp/>//<sp/>若传入句柄 nullptr，则等待所有窗口关闭
<sp/><sp/>void<sp/>init_end(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置：当窗口都被销毁时，自动退出程序
<sp/><sp/>void<sp/>AutoExit();

<sp/><sp/>//<sp/>是否还存在未销毁的绘图窗口
<sp/><sp/><sp/>bool<sp/>isAnyWindow();

<sp/><sp/><sp/>//<sp/>判断一窗口是否还存在（不含已被关闭的窗口）
<sp/><sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isAliveWindow(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取某窗口的图像指针
<sp/><sp/><sp/>IMAGE*<sp/>GetWindowImage(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>获取窗口画布指针
<sp/><sp/><sp/><sp/>Canvas*<sp/>GetWindowCanvas(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>绑定窗口画布指针
<sp/><sp/><sp/><sp/>//<sp/>绑定后，使用画布绘图时将自动开启任务，无需用户开启，但不会自动刷新屏幕
<sp/><sp/>//<sp/>绑定画布后，如在外部操作画布，则必须先启动窗口任务
<sp/>void<sp/>BindWindowCanvas(Canvas*<sp/>pCanvas,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>将绘制在 EasyX<sp/>中的内容显示到目标窗口上（任意窗口）
<sp/><sp/><sp/><sp/>void<sp/>FlushDrawingToWnd(IMAGE*<sp/>pImg,<sp/>HWND<sp/>hWnd);

<sp/><sp/><sp/>//<sp/>阻塞等待绘图任务完成
<sp/>//<sp/>如果传入句柄，则只有该句柄窗口是活动窗口时才等待
<sp/><sp/>void<sp/>WaitForTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的详细信息
<sp/><sp/>EasyWindow<sp/>GetWorkingWindow();

<sp/><sp/><sp/><sp/>//<sp/>等待当前任务完成并设置活动窗口，返回是否设置成功
<sp/>bool<sp/>SetWorkingWindow(HWND<sp/>hWnd);

<sp/>//<sp/>设置加速绘制跳过多少像素点
<sp/><sp/><sp/>//<sp/>此加速效果是有损的，加速效果与跳过的像素点数正相关。
<sp/><sp/>void<sp/>QuickDraw(UINT<sp/>nSkipPixels,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>获取全局绘制模式
<sp/><sp/>DrawMode<sp/>GetDrawMode();

<sp/><sp/><sp/>//<sp/>设置全局绘制模式
<sp/><sp/><sp/>void<sp/>SetDrawMode(DrawMode<sp/>mode);

<sp/><sp/>//<sp/>强制重绘绘图窗口（在<sp/>WM_PAINT<sp/>消息内绘图不需要使用此函数）
<sp/><sp/><sp/>void<sp/>EnforceRedraw(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>为当前活动窗口启动任务，返回是否启动成功（若已在任务中也返回 true）
<sp/>//<sp/>调用 EasyX<sp/>函数进行绘图或获取消息时，都应该先启动任务再进行调用。
<sp/>bool<sp/>BeginTask();

<sp/>//<sp/>终止当前任务，（可选）输出绘图缓冲
<sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/>//<sp/>判断当前是否有任务在进行
<sp/><sp/><sp/>//<sp/>若传入句柄，则额外判断它是否为活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isInTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>判断某窗口的大小是否改变
<sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="struct_hi_easy_x_1_1_easy_window_1ac28954486f1afeeb94f96e3324f5e67f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/><ref refid="struct_hi_easy_x_1_1_easy_window_1ac28954486f1afeeb94f96e3324f5e67f" kindref="member">hWnd</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>窗口句柄 <sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>父窗口句柄

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/>pImg;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口图像
<sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/>pBufferImg;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>图像缓冲区
<sp/><sp/><sp/><sp/><sp/><sp/>Canvas*<sp/>pBufferImgCanvas;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>图像缓冲区绑定的画布指针

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>funcWndProc;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口消息处理函数

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;ExMessage&gt;<sp/>vecMessage;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>模拟<sp/>EasyX<sp/>窗口消息队列

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isUseTray;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否使用托盘
<sp/><sp/><sp/><sp/><sp/>NOTIFYICONDATA<sp/>nid;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘信息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isUseTrayMenu;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否使用托盘菜单
<sp/><sp/><sp/><sp/><sp/><sp/>HMENU<sp/>hTrayMenu;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘菜单

<sp/><sp/><sp/><sp/><sp/><sp/>void(*funcTrayMenuProc)(UINT);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘菜单消息处理函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>给出此函数是为了方便响应托盘的菜单消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>如需响应完整的托盘消息，请自定义窗口过程函数并处理<sp/>WM_TRAY<sp/>消息

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isNewSize;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口大小是否改变
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isBusyProcessing;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否正忙于处理内部消息（指不允许用户启动任务的情况）

<sp/><sp/><sp/><sp/><sp/>int<sp/>nSkipPixels;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>绘制时跳过的像素点数量（降质性速绘）

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;SysControlBase*&gt;<sp/>vecSysCtrl;<sp/><sp/><sp/><sp/>//<sp/>记录创建的系统控件
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>bHasCtrl<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否创建过系统控件
<sp/><sp/><sp/>};

<sp/><sp/><sp/><sp/>enum<sp/>DrawMode
<sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/>DM_Real,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>完全按实际绘制（每次要求重绘都立即执行，可能导致程序卡顿）
<sp/><sp/><sp/><sp/><sp/><sp/>DM_Normal,<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>正常绘制（默认，发送<sp/>WM_PAINT<sp/>消息）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_Fast,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>快速绘制（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过部分绘制）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_VeryFast,<sp/><sp/><sp/><sp/>//<sp/>极速绘制（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过很多绘制）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_Fastest,<sp/><sp/><sp/><sp/><sp/>//<sp/>最快的绘制方式（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过大部分绘制）
<sp/><sp/><sp/>};

<sp/><sp/><sp/><sp/>//<sp/>窗口类
<sp/><sp/><sp/><sp/>class<sp/>Window
<sp/><sp/><sp/>{
<sp/><sp/>private:

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>m_nWindowIndex<sp/>=<sp/>NO_WINDOW_INDEX;
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isCreated<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isPreStyle<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isPrePos<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>m_lPreStyle;
<sp/><sp/><sp/><sp/><sp/><sp/>POINT<sp/>m_pPrePos;

<sp/><sp/>public:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Window();

<sp/><sp/><sp/><sp/><sp/>Window(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>~Window();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>InitWindow(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>等价于 InitWindow
<sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>Create(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>CloseWindow();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>等价于 CloseWindow
<sp/><sp/><sp/><sp/><sp/>void<sp/>Destroy();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetProcFunc(WNDPROC<sp/>WindowProcess);

<sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>GetHandle();

<sp/><sp/><sp/><sp/><sp/>EasyWindow<sp/>GetInfo();

<sp/><sp/><sp/><sp/><sp/>bool<sp/>isAlive();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/>GetImage();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Canvas*<sp/>GetCanvas();

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>BindCanvas(Canvas*<sp/>pCanvas);

<sp/><sp/><sp/><sp/><sp/>void<sp/>WaitMyTask();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>SetWorkingWindow();

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetQuickDraw(UINT<sp/>nSkipPixels);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>输出绘图缓冲（并非重绘窗口）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>FlushDrawing();

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘窗口
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Redraw();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>BeginTask();

<sp/><sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isInTask();

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isSizeChanged();

<sp/><sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>DeleteTray();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT));

<sp/><sp/><sp/><sp/><sp/>void<sp/>PreSetStyle(long<sp/>lStyle);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>PreSetPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/><sp/><sp/>long<sp/>GetStyle();

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>SetStyle(long<sp/>lNewStyle);

<sp/><sp/><sp/><sp/><sp/>long<sp/>GetExStyle();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>SetExStyle(long<sp/>lNewExStyle);

<sp/><sp/><sp/><sp/><sp/>POINT<sp/>GetPos();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIZE<sp/>GetWindowSize();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的大小

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetWindowWidth();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的宽度

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetWindowHeight();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的高度

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetClientWidth();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取客户区宽度

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetClientHeight();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取客户区高度

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Move(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>MoveRel(int<sp/>dx,<sp/>int<sp/>dy);

<sp/><sp/><sp/><sp/><sp/>void<sp/>Resize(int<sp/>w,<sp/>int<sp/>h);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否为用户正在使用的窗口
<sp/><sp/><sp/><sp/><sp/>bool<sp/>isForegroundWindow();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExMessage<sp/>Get_Message(BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Get_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>Peek_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Flush_Message(BYTE<sp/>filter<sp/>=<sp/>-1);
<sp/><sp/>};

<sp/><sp/><sp/><sp/>////////////******<sp/>窗体相关函数<sp/>******////////////

<sp/><sp/><sp/><sp/>//<sp/>创建<sp/>Win32<sp/>绘图窗口（默认支持窗口双击消息）（跳过了 EasyX<sp/>原生窗口创建的步骤）
<sp/><sp/><sp/>//<sp/>w,<sp/>h<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口大小
<sp/>//<sp/>flag<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口样式标识
<sp/><sp/>//<sp/>lpszWndTitle<sp/><sp/><sp/><sp/><sp/>窗口标题
<sp/><sp/>//<sp/>WindowProcess<sp/><sp/><sp/><sp/>窗口消息处理函数的指针，为空表示使用默认消息处理函数（详见头文件中“窗口消息处理函数规范”）
<sp/>//<sp/>hParent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>父窗口句柄，为空则表示该窗口独立存在（若填写，该窗口将成为模态窗口）
<sp/><sp/><sp/><sp/>//
<sp/>//<sp/>注：若创建大量绘图窗口，请适量添加延时，否则会导致一些问题。
<sp/><sp/><sp/>HWND<sp/>initgraph_win32(
<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/>);

<sp/><sp/><sp/><sp/>//<sp/>关闭某一绘图窗口，若句柄为<sp/>nullptr<sp/>则关闭所有绘图窗口
<sp/><sp/>void<sp/>closegraph_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置某窗口的过程函数（传入空句柄可以标识当前活动窗口）
<sp/><sp/><sp/><sp/>void<sp/>SetWndProcFunc(HWND<sp/>hWnd,<sp/>WNDPROC<sp/>WindowProcess);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的句柄
<sp/>HWND<sp/>GetHWnd_win32();

<sp/>//<sp/>结束初始化窗口
<sp/><sp/>//<sp/>阻塞，直到目标窗口被关闭
<sp/><sp/><sp/><sp/>//<sp/>若传入句柄 nullptr，则等待所有窗口关闭
<sp/><sp/>void<sp/>init_end(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置：当窗口都被销毁时，自动退出程序
<sp/><sp/>void<sp/>AutoExit();

<sp/><sp/>//<sp/>是否还存在未销毁的绘图窗口
<sp/><sp/><sp/>bool<sp/>isAnyWindow();

<sp/><sp/><sp/>//<sp/>判断一窗口是否还存在（不含已被关闭的窗口）
<sp/><sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isAliveWindow(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取某窗口的图像指针
<sp/><sp/><sp/>IMAGE*<sp/>GetWindowImage(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>获取窗口画布指针
<sp/><sp/><sp/><sp/>Canvas*<sp/>GetWindowCanvas(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>绑定窗口画布指针
<sp/><sp/><sp/><sp/>//<sp/>绑定后，使用画布绘图时将自动开启任务，无需用户开启，但不会自动刷新屏幕
<sp/><sp/>//<sp/>绑定画布后，如在外部操作画布，则必须先启动窗口任务
<sp/>void<sp/>BindWindowCanvas(Canvas*<sp/>pCanvas,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>将绘制在 EasyX<sp/>中的内容显示到目标窗口上（任意窗口）
<sp/><sp/><sp/><sp/>void<sp/>FlushDrawingToWnd(IMAGE*<sp/>pImg,<sp/>HWND<sp/>hWnd);

<sp/><sp/><sp/>//<sp/>阻塞等待绘图任务完成
<sp/>//<sp/>如果传入句柄，则只有该句柄窗口是活动窗口时才等待
<sp/><sp/>void<sp/>WaitForTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的详细信息
<sp/><sp/>EasyWindow<sp/>GetWorkingWindow();

<sp/><sp/><sp/><sp/>//<sp/>等待当前任务完成并设置活动窗口，返回是否设置成功
<sp/>bool<sp/>SetWorkingWindow(HWND<sp/>hWnd);

<sp/>//<sp/>设置加速绘制跳过多少像素点
<sp/><sp/><sp/>//<sp/>此加速效果是有损的，加速效果与跳过的像素点数正相关。
<sp/><sp/>void<sp/>QuickDraw(UINT<sp/>nSkipPixels,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>获取全局绘制模式
<sp/><sp/>DrawMode<sp/>GetDrawMode();

<sp/><sp/><sp/>//<sp/>设置全局绘制模式
<sp/><sp/><sp/>void<sp/>SetDrawMode(DrawMode<sp/>mode);

<sp/><sp/>//<sp/>强制重绘绘图窗口（在<sp/>WM_PAINT<sp/>消息内绘图不需要使用此函数）
<sp/><sp/><sp/>void<sp/>EnforceRedraw(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>为当前活动窗口启动任务，返回是否启动成功（若已在任务中也返回 true）
<sp/>//<sp/>调用 EasyX<sp/>函数进行绘图或获取消息时，都应该先启动任务再进行调用。
<sp/>bool<sp/>BeginTask();

<sp/>//<sp/>终止当前任务，（可选）输出绘图缓冲
<sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/>//<sp/>判断当前是否有任务在进行
<sp/><sp/><sp/>//<sp/>若传入句柄，则额外判断它是否为活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isInTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>判断某窗口的大小是否改变
<sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="struct_hi_easy_x_1_1_easy_window_1aa39b10e2ad2b1257b943feb3888310f5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/><ref refid="struct_hi_easy_x_1_1_easy_window_1aa39b10e2ad2b1257b943feb3888310f5" kindref="member">hParent</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>父窗口句柄 
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/>pImg;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口图像
<sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/>pBufferImg;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>图像缓冲区
<sp/><sp/><sp/><sp/><sp/><sp/>Canvas*<sp/>pBufferImgCanvas;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>图像缓冲区绑定的画布指针

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>funcWndProc;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口消息处理函数

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;ExMessage&gt;<sp/>vecMessage;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>模拟<sp/>EasyX<sp/>窗口消息队列

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isUseTray;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否使用托盘
<sp/><sp/><sp/><sp/><sp/>NOTIFYICONDATA<sp/>nid;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘信息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isUseTrayMenu;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否使用托盘菜单
<sp/><sp/><sp/><sp/><sp/><sp/>HMENU<sp/>hTrayMenu;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘菜单

<sp/><sp/><sp/><sp/><sp/><sp/>void(*funcTrayMenuProc)(UINT);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘菜单消息处理函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>给出此函数是为了方便响应托盘的菜单消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>如需响应完整的托盘消息，请自定义窗口过程函数并处理<sp/>WM_TRAY<sp/>消息

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isNewSize;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口大小是否改变
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isBusyProcessing;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否正忙于处理内部消息（指不允许用户启动任务的情况）

<sp/><sp/><sp/><sp/><sp/>int<sp/>nSkipPixels;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>绘制时跳过的像素点数量（降质性速绘）

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;SysControlBase*&gt;<sp/>vecSysCtrl;<sp/><sp/><sp/><sp/>//<sp/>记录创建的系统控件
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>bHasCtrl<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否创建过系统控件
<sp/><sp/><sp/>};

<sp/><sp/><sp/><sp/>enum<sp/>DrawMode
<sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/>DM_Real,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>完全按实际绘制（每次要求重绘都立即执行，可能导致程序卡顿）
<sp/><sp/><sp/><sp/><sp/><sp/>DM_Normal,<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>正常绘制（默认，发送<sp/>WM_PAINT<sp/>消息）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_Fast,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>快速绘制（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过部分绘制）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_VeryFast,<sp/><sp/><sp/><sp/>//<sp/>极速绘制（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过很多绘制）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_Fastest,<sp/><sp/><sp/><sp/><sp/>//<sp/>最快的绘制方式（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过大部分绘制）
<sp/><sp/><sp/>};

<sp/><sp/><sp/><sp/>//<sp/>窗口类
<sp/><sp/><sp/><sp/>class<sp/>Window
<sp/><sp/><sp/>{
<sp/><sp/>private:

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>m_nWindowIndex<sp/>=<sp/>NO_WINDOW_INDEX;
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isCreated<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isPreStyle<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isPrePos<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>m_lPreStyle;
<sp/><sp/><sp/><sp/><sp/><sp/>POINT<sp/>m_pPrePos;

<sp/><sp/>public:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Window();

<sp/><sp/><sp/><sp/><sp/>Window(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>~Window();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>InitWindow(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>等价于 InitWindow
<sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>Create(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>CloseWindow();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>等价于 CloseWindow
<sp/><sp/><sp/><sp/><sp/>void<sp/>Destroy();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetProcFunc(WNDPROC<sp/>WindowProcess);

<sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>GetHandle();

<sp/><sp/><sp/><sp/><sp/>EasyWindow<sp/>GetInfo();

<sp/><sp/><sp/><sp/><sp/>bool<sp/>isAlive();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/>GetImage();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Canvas*<sp/>GetCanvas();

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>BindCanvas(Canvas*<sp/>pCanvas);

<sp/><sp/><sp/><sp/><sp/>void<sp/>WaitMyTask();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>SetWorkingWindow();

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetQuickDraw(UINT<sp/>nSkipPixels);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>输出绘图缓冲（并非重绘窗口）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>FlushDrawing();

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘窗口
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Redraw();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>BeginTask();

<sp/><sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isInTask();

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isSizeChanged();

<sp/><sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>DeleteTray();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT));

<sp/><sp/><sp/><sp/><sp/>void<sp/>PreSetStyle(long<sp/>lStyle);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>PreSetPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/><sp/><sp/>long<sp/>GetStyle();

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>SetStyle(long<sp/>lNewStyle);

<sp/><sp/><sp/><sp/><sp/>long<sp/>GetExStyle();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>SetExStyle(long<sp/>lNewExStyle);

<sp/><sp/><sp/><sp/><sp/>POINT<sp/>GetPos();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIZE<sp/>GetWindowSize();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的大小

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetWindowWidth();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的宽度

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetWindowHeight();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的高度

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetClientWidth();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取客户区宽度

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetClientHeight();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取客户区高度

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Move(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>MoveRel(int<sp/>dx,<sp/>int<sp/>dy);

<sp/><sp/><sp/><sp/><sp/>void<sp/>Resize(int<sp/>w,<sp/>int<sp/>h);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否为用户正在使用的窗口
<sp/><sp/><sp/><sp/><sp/>bool<sp/>isForegroundWindow();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExMessage<sp/>Get_Message(BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Get_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>Peek_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Flush_Message(BYTE<sp/>filter<sp/>=<sp/>-1);
<sp/><sp/>};

<sp/><sp/><sp/><sp/>////////////******<sp/>窗体相关函数<sp/>******////////////

<sp/><sp/><sp/><sp/>//<sp/>创建<sp/>Win32<sp/>绘图窗口（默认支持窗口双击消息）（跳过了 EasyX<sp/>原生窗口创建的步骤）
<sp/><sp/><sp/>//<sp/>w,<sp/>h<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口大小
<sp/>//<sp/>flag<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口样式标识
<sp/><sp/>//<sp/>lpszWndTitle<sp/><sp/><sp/><sp/><sp/>窗口标题
<sp/><sp/>//<sp/>WindowProcess<sp/><sp/><sp/><sp/>窗口消息处理函数的指针，为空表示使用默认消息处理函数（详见头文件中“窗口消息处理函数规范”）
<sp/>//<sp/>hParent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>父窗口句柄，为空则表示该窗口独立存在（若填写，该窗口将成为模态窗口）
<sp/><sp/><sp/><sp/>//
<sp/>//<sp/>注：若创建大量绘图窗口，请适量添加延时，否则会导致一些问题。
<sp/><sp/><sp/>HWND<sp/>initgraph_win32(
<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/>);

<sp/><sp/><sp/><sp/>//<sp/>关闭某一绘图窗口，若句柄为<sp/>nullptr<sp/>则关闭所有绘图窗口
<sp/><sp/>void<sp/>closegraph_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置某窗口的过程函数（传入空句柄可以标识当前活动窗口）
<sp/><sp/><sp/><sp/>void<sp/>SetWndProcFunc(HWND<sp/>hWnd,<sp/>WNDPROC<sp/>WindowProcess);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的句柄
<sp/>HWND<sp/>GetHWnd_win32();

<sp/>//<sp/>结束初始化窗口
<sp/><sp/>//<sp/>阻塞，直到目标窗口被关闭
<sp/><sp/><sp/><sp/>//<sp/>若传入句柄 nullptr，则等待所有窗口关闭
<sp/><sp/>void<sp/>init_end(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置：当窗口都被销毁时，自动退出程序
<sp/><sp/>void<sp/>AutoExit();

<sp/><sp/>//<sp/>是否还存在未销毁的绘图窗口
<sp/><sp/><sp/>bool<sp/>isAnyWindow();

<sp/><sp/><sp/>//<sp/>判断一窗口是否还存在（不含已被关闭的窗口）
<sp/><sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isAliveWindow(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取某窗口的图像指针
<sp/><sp/><sp/>IMAGE*<sp/>GetWindowImage(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>获取窗口画布指针
<sp/><sp/><sp/><sp/>Canvas*<sp/>GetWindowCanvas(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>绑定窗口画布指针
<sp/><sp/><sp/><sp/>//<sp/>绑定后，使用画布绘图时将自动开启任务，无需用户开启，但不会自动刷新屏幕
<sp/><sp/>//<sp/>绑定画布后，如在外部操作画布，则必须先启动窗口任务
<sp/>void<sp/>BindWindowCanvas(Canvas*<sp/>pCanvas,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>将绘制在 EasyX<sp/>中的内容显示到目标窗口上（任意窗口）
<sp/><sp/><sp/><sp/>void<sp/>FlushDrawingToWnd(IMAGE*<sp/>pImg,<sp/>HWND<sp/>hWnd);

<sp/><sp/><sp/>//<sp/>阻塞等待绘图任务完成
<sp/>//<sp/>如果传入句柄，则只有该句柄窗口是活动窗口时才等待
<sp/><sp/>void<sp/>WaitForTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的详细信息
<sp/><sp/>EasyWindow<sp/>GetWorkingWindow();

<sp/><sp/><sp/><sp/>//<sp/>等待当前任务完成并设置活动窗口，返回是否设置成功
<sp/>bool<sp/>SetWorkingWindow(HWND<sp/>hWnd);

<sp/>//<sp/>设置加速绘制跳过多少像素点
<sp/><sp/><sp/>//<sp/>此加速效果是有损的，加速效果与跳过的像素点数正相关。
<sp/><sp/>void<sp/>QuickDraw(UINT<sp/>nSkipPixels,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>获取全局绘制模式
<sp/><sp/>DrawMode<sp/>GetDrawMode();

<sp/><sp/><sp/>//<sp/>设置全局绘制模式
<sp/><sp/><sp/>void<sp/>SetDrawMode(DrawMode<sp/>mode);

<sp/><sp/>//<sp/>强制重绘绘图窗口（在<sp/>WM_PAINT<sp/>消息内绘图不需要使用此函数）
<sp/><sp/><sp/>void<sp/>EnforceRedraw(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>为当前活动窗口启动任务，返回是否启动成功（若已在任务中也返回 true）
<sp/>//<sp/>调用 EasyX<sp/>函数进行绘图或获取消息时，都应该先启动任务再进行调用。
<sp/>bool<sp/>BeginTask();

<sp/>//<sp/>终止当前任务，（可选）输出绘图缓冲
<sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/>//<sp/>判断当前是否有任务在进行
<sp/><sp/><sp/>//<sp/>若传入句柄，则额外判断它是否为活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isInTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>判断某窗口的大小是否改变
<sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="struct_hi_easy_x_1_1_easy_window_1ab7ca6551259b82fedcd03d37123e63af" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/><ref refid="struct_hi_easy_x_1_1_easy_window_1ab7ca6551259b82fedcd03d37123e63af" kindref="member">pImg</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>窗口图像</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="struct_hi_easy_x_1_1_easy_window_1a74199abe1a8551b0332ca9fc7168961d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/><ref refid="struct_hi_easy_x_1_1_easy_window_1a74199abe1a8551b0332ca9fc7168961d" kindref="member">pBufferImg</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>图像缓冲区 <sp/><sp/><sp/><sp/><sp/><sp/>Canvas*<sp/>pBufferImgCanvas;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>图像缓冲区绑定的画布指针

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>funcWndProc;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口消息处理函数

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;ExMessage&gt;<sp/>vecMessage;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>模拟<sp/>EasyX<sp/>窗口消息队列

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isUseTray;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否使用托盘
<sp/><sp/><sp/><sp/><sp/>NOTIFYICONDATA<sp/>nid;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘信息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isUseTrayMenu;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否使用托盘菜单
<sp/><sp/><sp/><sp/><sp/><sp/>HMENU<sp/>hTrayMenu;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘菜单

<sp/><sp/><sp/><sp/><sp/><sp/>void(*funcTrayMenuProc)(UINT);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘菜单消息处理函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>给出此函数是为了方便响应托盘的菜单消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>如需响应完整的托盘消息，请自定义窗口过程函数并处理<sp/>WM_TRAY<sp/>消息

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isNewSize;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口大小是否改变
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isBusyProcessing;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否正忙于处理内部消息（指不允许用户启动任务的情况）

<sp/><sp/><sp/><sp/><sp/>int<sp/>nSkipPixels;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>绘制时跳过的像素点数量（降质性速绘）

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;SysControlBase*&gt;<sp/>vecSysCtrl;<sp/><sp/><sp/><sp/>//<sp/>记录创建的系统控件
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>bHasCtrl<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否创建过系统控件
<sp/><sp/><sp/>};

<sp/><sp/><sp/><sp/>enum<sp/>DrawMode
<sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/>DM_Real,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>完全按实际绘制（每次要求重绘都立即执行，可能导致程序卡顿）
<sp/><sp/><sp/><sp/><sp/><sp/>DM_Normal,<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>正常绘制（默认，发送<sp/>WM_PAINT<sp/>消息）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_Fast,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>快速绘制（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过部分绘制）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_VeryFast,<sp/><sp/><sp/><sp/>//<sp/>极速绘制（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过很多绘制）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_Fastest,<sp/><sp/><sp/><sp/><sp/>//<sp/>最快的绘制方式（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过大部分绘制）
<sp/><sp/><sp/>};

<sp/><sp/><sp/><sp/>//<sp/>窗口类
<sp/><sp/><sp/><sp/>class<sp/>Window
<sp/><sp/><sp/>{
<sp/><sp/>private:

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>m_nWindowIndex<sp/>=<sp/>NO_WINDOW_INDEX;
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isCreated<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isPreStyle<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isPrePos<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>m_lPreStyle;
<sp/><sp/><sp/><sp/><sp/><sp/>POINT<sp/>m_pPrePos;

<sp/><sp/>public:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Window();

<sp/><sp/><sp/><sp/><sp/>Window(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>~Window();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>InitWindow(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>等价于 InitWindow
<sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>Create(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>CloseWindow();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>等价于 CloseWindow
<sp/><sp/><sp/><sp/><sp/>void<sp/>Destroy();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetProcFunc(WNDPROC<sp/>WindowProcess);

<sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>GetHandle();

<sp/><sp/><sp/><sp/><sp/>EasyWindow<sp/>GetInfo();

<sp/><sp/><sp/><sp/><sp/>bool<sp/>isAlive();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/>GetImage();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Canvas*<sp/>GetCanvas();

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>BindCanvas(Canvas*<sp/>pCanvas);

<sp/><sp/><sp/><sp/><sp/>void<sp/>WaitMyTask();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>SetWorkingWindow();

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetQuickDraw(UINT<sp/>nSkipPixels);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>输出绘图缓冲（并非重绘窗口）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>FlushDrawing();

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘窗口
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Redraw();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>BeginTask();

<sp/><sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isInTask();

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isSizeChanged();

<sp/><sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>DeleteTray();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT));

<sp/><sp/><sp/><sp/><sp/>void<sp/>PreSetStyle(long<sp/>lStyle);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>PreSetPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/><sp/><sp/>long<sp/>GetStyle();

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>SetStyle(long<sp/>lNewStyle);

<sp/><sp/><sp/><sp/><sp/>long<sp/>GetExStyle();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>SetExStyle(long<sp/>lNewExStyle);

<sp/><sp/><sp/><sp/><sp/>POINT<sp/>GetPos();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIZE<sp/>GetWindowSize();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的大小

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetWindowWidth();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的宽度

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetWindowHeight();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的高度

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetClientWidth();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取客户区宽度

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetClientHeight();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取客户区高度

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Move(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>MoveRel(int<sp/>dx,<sp/>int<sp/>dy);

<sp/><sp/><sp/><sp/><sp/>void<sp/>Resize(int<sp/>w,<sp/>int<sp/>h);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否为用户正在使用的窗口
<sp/><sp/><sp/><sp/><sp/>bool<sp/>isForegroundWindow();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExMessage<sp/>Get_Message(BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Get_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>Peek_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Flush_Message(BYTE<sp/>filter<sp/>=<sp/>-1);
<sp/><sp/>};

<sp/><sp/><sp/><sp/>////////////******<sp/>窗体相关函数<sp/>******////////////

<sp/><sp/><sp/><sp/>//<sp/>创建<sp/>Win32<sp/>绘图窗口（默认支持窗口双击消息）（跳过了 EasyX<sp/>原生窗口创建的步骤）
<sp/><sp/><sp/>//<sp/>w,<sp/>h<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口大小
<sp/>//<sp/>flag<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口样式标识
<sp/><sp/>//<sp/>lpszWndTitle<sp/><sp/><sp/><sp/><sp/>窗口标题
<sp/><sp/>//<sp/>WindowProcess<sp/><sp/><sp/><sp/>窗口消息处理函数的指针，为空表示使用默认消息处理函数（详见头文件中“窗口消息处理函数规范”）
<sp/>//<sp/>hParent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>父窗口句柄，为空则表示该窗口独立存在（若填写，该窗口将成为模态窗口）
<sp/><sp/><sp/><sp/>//
<sp/>//<sp/>注：若创建大量绘图窗口，请适量添加延时，否则会导致一些问题。
<sp/><sp/><sp/>HWND<sp/>initgraph_win32(
<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/>);

<sp/><sp/><sp/><sp/>//<sp/>关闭某一绘图窗口，若句柄为<sp/>nullptr<sp/>则关闭所有绘图窗口
<sp/><sp/>void<sp/>closegraph_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置某窗口的过程函数（传入空句柄可以标识当前活动窗口）
<sp/><sp/><sp/><sp/>void<sp/>SetWndProcFunc(HWND<sp/>hWnd,<sp/>WNDPROC<sp/>WindowProcess);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的句柄
<sp/>HWND<sp/>GetHWnd_win32();

<sp/>//<sp/>结束初始化窗口
<sp/><sp/>//<sp/>阻塞，直到目标窗口被关闭
<sp/><sp/><sp/><sp/>//<sp/>若传入句柄 nullptr，则等待所有窗口关闭
<sp/><sp/>void<sp/>init_end(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置：当窗口都被销毁时，自动退出程序
<sp/><sp/>void<sp/>AutoExit();

<sp/><sp/>//<sp/>是否还存在未销毁的绘图窗口
<sp/><sp/><sp/>bool<sp/>isAnyWindow();

<sp/><sp/><sp/>//<sp/>判断一窗口是否还存在（不含已被关闭的窗口）
<sp/><sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isAliveWindow(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取某窗口的图像指针
<sp/><sp/><sp/>IMAGE*<sp/>GetWindowImage(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>获取窗口画布指针
<sp/><sp/><sp/><sp/>Canvas*<sp/>GetWindowCanvas(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>绑定窗口画布指针
<sp/><sp/><sp/><sp/>//<sp/>绑定后，使用画布绘图时将自动开启任务，无需用户开启，但不会自动刷新屏幕
<sp/><sp/>//<sp/>绑定画布后，如在外部操作画布，则必须先启动窗口任务
<sp/>void<sp/>BindWindowCanvas(Canvas*<sp/>pCanvas,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>将绘制在 EasyX<sp/>中的内容显示到目标窗口上（任意窗口）
<sp/><sp/><sp/><sp/>void<sp/>FlushDrawingToWnd(IMAGE*<sp/>pImg,<sp/>HWND<sp/>hWnd);

<sp/><sp/><sp/>//<sp/>阻塞等待绘图任务完成
<sp/>//<sp/>如果传入句柄，则只有该句柄窗口是活动窗口时才等待
<sp/><sp/>void<sp/>WaitForTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的详细信息
<sp/><sp/>EasyWindow<sp/>GetWorkingWindow();

<sp/><sp/><sp/><sp/>//<sp/>等待当前任务完成并设置活动窗口，返回是否设置成功
<sp/>bool<sp/>SetWorkingWindow(HWND<sp/>hWnd);

<sp/>//<sp/>设置加速绘制跳过多少像素点
<sp/><sp/><sp/>//<sp/>此加速效果是有损的，加速效果与跳过的像素点数正相关。
<sp/><sp/>void<sp/>QuickDraw(UINT<sp/>nSkipPixels,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>获取全局绘制模式
<sp/><sp/>DrawMode<sp/>GetDrawMode();

<sp/><sp/><sp/>//<sp/>设置全局绘制模式
<sp/><sp/><sp/>void<sp/>SetDrawMode(DrawMode<sp/>mode);

<sp/><sp/>//<sp/>强制重绘绘图窗口（在<sp/>WM_PAINT<sp/>消息内绘图不需要使用此函数）
<sp/><sp/><sp/>void<sp/>EnforceRedraw(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>为当前活动窗口启动任务，返回是否启动成功（若已在任务中也返回 true）
<sp/>//<sp/>调用 EasyX<sp/>函数进行绘图或获取消息时，都应该先启动任务再进行调用。
<sp/>bool<sp/>BeginTask();

<sp/>//<sp/>终止当前任务，（可选）输出绘图缓冲
<sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/>//<sp/>判断当前是否有任务在进行
<sp/><sp/><sp/>//<sp/>若传入句柄，则额外判断它是否为活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isInTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>判断某窗口的大小是否改变
<sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="struct_hi_easy_x_1_1_easy_window_1ad1ce946444c3887dd8b6580ffe2abb49" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hi_easy_x_1_1_canvas" kindref="compound">Canvas</ref>*<sp/><ref refid="struct_hi_easy_x_1_1_easy_window_1ad1ce946444c3887dd8b6580ffe2abb49" kindref="member">pBufferImgCanvas</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>图像缓冲区绑定的画布指针</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="struct_hi_easy_x_1_1_easy_window_1a94201a62d26e45b44b7f3201d0dbcc3a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/><ref refid="struct_hi_easy_x_1_1_easy_window_1a94201a62d26e45b44b7f3201d0dbcc3a" kindref="member">funcWndProc</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>窗口消息处理函数</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="struct_hi_easy_x_1_1_easy_window_1a3f0f4bdf672f602346b43245a66ffdaf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;ExMessage&gt;<sp/><ref refid="struct_hi_easy_x_1_1_easy_window_1a3f0f4bdf672f602346b43245a66ffdaf" kindref="member">vecMessage</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>模拟<sp/>EasyX<sp/>窗口消息队列 
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isUseTray;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否使用托盘
<sp/><sp/><sp/><sp/><sp/>NOTIFYICONDATA<sp/>nid;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘信息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isUseTrayMenu;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否使用托盘菜单
<sp/><sp/><sp/><sp/><sp/><sp/>HMENU<sp/>hTrayMenu;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘菜单

<sp/><sp/><sp/><sp/><sp/><sp/>void(*funcTrayMenuProc)(UINT);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>托盘菜单消息处理函数
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>给出此函数是为了方便响应托盘的菜单消息
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>如需响应完整的托盘消息，请自定义窗口过程函数并处理<sp/>WM_TRAY<sp/>消息

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isNewSize;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>窗口大小是否改变
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isBusyProcessing;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否正忙于处理内部消息（指不允许用户启动任务的情况）

<sp/><sp/><sp/><sp/><sp/>int<sp/>nSkipPixels;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>绘制时跳过的像素点数量（降质性速绘）

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;SysControlBase*&gt;<sp/>vecSysCtrl;<sp/><sp/><sp/><sp/>//<sp/>记录创建的系统控件
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>bHasCtrl<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否创建过系统控件
<sp/><sp/><sp/>};

<sp/><sp/><sp/><sp/>enum<sp/>DrawMode
<sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/>DM_Real,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>完全按实际绘制（每次要求重绘都立即执行，可能导致程序卡顿）
<sp/><sp/><sp/><sp/><sp/><sp/>DM_Normal,<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>正常绘制（默认，发送<sp/>WM_PAINT<sp/>消息）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_Fast,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>快速绘制（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过部分绘制）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_VeryFast,<sp/><sp/><sp/><sp/>//<sp/>极速绘制（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过很多绘制）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_Fastest,<sp/><sp/><sp/><sp/><sp/>//<sp/>最快的绘制方式（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过大部分绘制）
<sp/><sp/><sp/>};

<sp/><sp/><sp/><sp/>//<sp/>窗口类
<sp/><sp/><sp/><sp/>class<sp/>Window
<sp/><sp/><sp/>{
<sp/><sp/>private:

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>m_nWindowIndex<sp/>=<sp/>NO_WINDOW_INDEX;
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isCreated<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isPreStyle<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isPrePos<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>m_lPreStyle;
<sp/><sp/><sp/><sp/><sp/><sp/>POINT<sp/>m_pPrePos;

<sp/><sp/>public:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Window();

<sp/><sp/><sp/><sp/><sp/>Window(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>~Window();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>InitWindow(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>等价于 InitWindow
<sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>Create(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>CloseWindow();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>等价于 CloseWindow
<sp/><sp/><sp/><sp/><sp/>void<sp/>Destroy();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetProcFunc(WNDPROC<sp/>WindowProcess);

<sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>GetHandle();

<sp/><sp/><sp/><sp/><sp/>EasyWindow<sp/>GetInfo();

<sp/><sp/><sp/><sp/><sp/>bool<sp/>isAlive();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/>GetImage();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Canvas*<sp/>GetCanvas();

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>BindCanvas(Canvas*<sp/>pCanvas);

<sp/><sp/><sp/><sp/><sp/>void<sp/>WaitMyTask();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>SetWorkingWindow();

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetQuickDraw(UINT<sp/>nSkipPixels);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>输出绘图缓冲（并非重绘窗口）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>FlushDrawing();

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘窗口
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Redraw();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>BeginTask();

<sp/><sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isInTask();

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isSizeChanged();

<sp/><sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>DeleteTray();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT));

<sp/><sp/><sp/><sp/><sp/>void<sp/>PreSetStyle(long<sp/>lStyle);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>PreSetPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/><sp/><sp/>long<sp/>GetStyle();

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>SetStyle(long<sp/>lNewStyle);

<sp/><sp/><sp/><sp/><sp/>long<sp/>GetExStyle();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>SetExStyle(long<sp/>lNewExStyle);

<sp/><sp/><sp/><sp/><sp/>POINT<sp/>GetPos();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIZE<sp/>GetWindowSize();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的大小

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetWindowWidth();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的宽度

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetWindowHeight();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的高度

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetClientWidth();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取客户区宽度

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetClientHeight();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取客户区高度

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Move(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>MoveRel(int<sp/>dx,<sp/>int<sp/>dy);

<sp/><sp/><sp/><sp/><sp/>void<sp/>Resize(int<sp/>w,<sp/>int<sp/>h);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否为用户正在使用的窗口
<sp/><sp/><sp/><sp/><sp/>bool<sp/>isForegroundWindow();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExMessage<sp/>Get_Message(BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Get_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>Peek_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Flush_Message(BYTE<sp/>filter<sp/>=<sp/>-1);
<sp/><sp/>};

<sp/><sp/><sp/><sp/>////////////******<sp/>窗体相关函数<sp/>******////////////

<sp/><sp/><sp/><sp/>//<sp/>创建<sp/>Win32<sp/>绘图窗口（默认支持窗口双击消息）（跳过了 EasyX<sp/>原生窗口创建的步骤）
<sp/><sp/><sp/>//<sp/>w,<sp/>h<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口大小
<sp/>//<sp/>flag<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口样式标识
<sp/><sp/>//<sp/>lpszWndTitle<sp/><sp/><sp/><sp/><sp/>窗口标题
<sp/><sp/>//<sp/>WindowProcess<sp/><sp/><sp/><sp/>窗口消息处理函数的指针，为空表示使用默认消息处理函数（详见头文件中“窗口消息处理函数规范”）
<sp/>//<sp/>hParent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>父窗口句柄，为空则表示该窗口独立存在（若填写，该窗口将成为模态窗口）
<sp/><sp/><sp/><sp/>//
<sp/>//<sp/>注：若创建大量绘图窗口，请适量添加延时，否则会导致一些问题。
<sp/><sp/><sp/>HWND<sp/>initgraph_win32(
<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/>);

<sp/><sp/><sp/><sp/>//<sp/>关闭某一绘图窗口，若句柄为<sp/>nullptr<sp/>则关闭所有绘图窗口
<sp/><sp/>void<sp/>closegraph_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置某窗口的过程函数（传入空句柄可以标识当前活动窗口）
<sp/><sp/><sp/><sp/>void<sp/>SetWndProcFunc(HWND<sp/>hWnd,<sp/>WNDPROC<sp/>WindowProcess);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的句柄
<sp/>HWND<sp/>GetHWnd_win32();

<sp/>//<sp/>结束初始化窗口
<sp/><sp/>//<sp/>阻塞，直到目标窗口被关闭
<sp/><sp/><sp/><sp/>//<sp/>若传入句柄 nullptr，则等待所有窗口关闭
<sp/><sp/>void<sp/>init_end(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置：当窗口都被销毁时，自动退出程序
<sp/><sp/>void<sp/>AutoExit();

<sp/><sp/>//<sp/>是否还存在未销毁的绘图窗口
<sp/><sp/><sp/>bool<sp/>isAnyWindow();

<sp/><sp/><sp/>//<sp/>判断一窗口是否还存在（不含已被关闭的窗口）
<sp/><sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isAliveWindow(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取某窗口的图像指针
<sp/><sp/><sp/>IMAGE*<sp/>GetWindowImage(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>获取窗口画布指针
<sp/><sp/><sp/><sp/>Canvas*<sp/>GetWindowCanvas(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>绑定窗口画布指针
<sp/><sp/><sp/><sp/>//<sp/>绑定后，使用画布绘图时将自动开启任务，无需用户开启，但不会自动刷新屏幕
<sp/><sp/>//<sp/>绑定画布后，如在外部操作画布，则必须先启动窗口任务
<sp/>void<sp/>BindWindowCanvas(Canvas*<sp/>pCanvas,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>将绘制在 EasyX<sp/>中的内容显示到目标窗口上（任意窗口）
<sp/><sp/><sp/><sp/>void<sp/>FlushDrawingToWnd(IMAGE*<sp/>pImg,<sp/>HWND<sp/>hWnd);

<sp/><sp/><sp/>//<sp/>阻塞等待绘图任务完成
<sp/>//<sp/>如果传入句柄，则只有该句柄窗口是活动窗口时才等待
<sp/><sp/>void<sp/>WaitForTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的详细信息
<sp/><sp/>EasyWindow<sp/>GetWorkingWindow();

<sp/><sp/><sp/><sp/>//<sp/>等待当前任务完成并设置活动窗口，返回是否设置成功
<sp/>bool<sp/>SetWorkingWindow(HWND<sp/>hWnd);

<sp/>//<sp/>设置加速绘制跳过多少像素点
<sp/><sp/><sp/>//<sp/>此加速效果是有损的，加速效果与跳过的像素点数正相关。
<sp/><sp/>void<sp/>QuickDraw(UINT<sp/>nSkipPixels,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>获取全局绘制模式
<sp/><sp/>DrawMode<sp/>GetDrawMode();

<sp/><sp/><sp/>//<sp/>设置全局绘制模式
<sp/><sp/><sp/>void<sp/>SetDrawMode(DrawMode<sp/>mode);

<sp/><sp/>//<sp/>强制重绘绘图窗口（在<sp/>WM_PAINT<sp/>消息内绘图不需要使用此函数）
<sp/><sp/><sp/>void<sp/>EnforceRedraw(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>为当前活动窗口启动任务，返回是否启动成功（若已在任务中也返回 true）
<sp/>//<sp/>调用 EasyX<sp/>函数进行绘图或获取消息时，都应该先启动任务再进行调用。
<sp/>bool<sp/>BeginTask();

<sp/>//<sp/>终止当前任务，（可选）输出绘图缓冲
<sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/>//<sp/>判断当前是否有任务在进行
<sp/><sp/><sp/>//<sp/>若传入句柄，则额外判断它是否为活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isInTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>判断某窗口的大小是否改变
<sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="struct_hi_easy_x_1_1_easy_window_1a00417e6fcb1ef0cc801bc158834a450e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_hi_easy_x_1_1_easy_window_1a00417e6fcb1ef0cc801bc158834a450e" kindref="member">isUseTray</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>是否使用托盘</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="struct_hi_easy_x_1_1_easy_window_1a568359bc178cdafc545a8613e650661e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOTIFYICONDATA<sp/><ref refid="struct_hi_easy_x_1_1_easy_window_1a568359bc178cdafc545a8613e650661e" kindref="member">nid</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>托盘信息</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="struct_hi_easy_x_1_1_easy_window_1ad7209f098495dccc18792ab3c3aa1bce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_hi_easy_x_1_1_easy_window_1ad7209f098495dccc18792ab3c3aa1bce" kindref="member">isUseTrayMenu</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>是否使用托盘菜单</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="struct_hi_easy_x_1_1_easy_window_1ab67dea6acc8fe2005fe0b616126d9036" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HMENU<sp/><ref refid="struct_hi_easy_x_1_1_easy_window_1ab67dea6acc8fe2005fe0b616126d9036" kindref="member">hTrayMenu</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>托盘菜单</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="struct_hi_easy_x_1_1_easy_window_1a6fd983c40310cb01bf3f3631426f8270" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void(*<ref refid="struct_hi_easy_x_1_1_easy_window_1a6fd983c40310cb01bf3f3631426f8270" kindref="member">funcTrayMenuProc</ref>)(UINT);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>托盘菜单消息处理函数</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>给出此函数是为了方便响应托盘的菜单消息</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>如需响应完整的托盘消息，请自定义窗口过程函数并处理<sp/>WM_TRAY<sp/>消息</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="struct_hi_easy_x_1_1_easy_window_1afd73c9304cbda5dc953cbf60178eb420" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_hi_easy_x_1_1_easy_window_1afd73c9304cbda5dc953cbf60178eb420" kindref="member">isNewSize</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>窗口大小是否改变 <sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isBusyProcessing;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否正忙于处理内部消息（指不允许用户启动任务的情况）

<sp/><sp/><sp/><sp/><sp/>int<sp/>nSkipPixels;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>绘制时跳过的像素点数量（降质性速绘）

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;SysControlBase*&gt;<sp/>vecSysCtrl;<sp/><sp/><sp/><sp/>//<sp/>记录创建的系统控件
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>bHasCtrl<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否创建过系统控件
<sp/><sp/><sp/>};

<sp/><sp/><sp/><sp/>enum<sp/>DrawMode
<sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/>DM_Real,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>完全按实际绘制（每次要求重绘都立即执行，可能导致程序卡顿）
<sp/><sp/><sp/><sp/><sp/><sp/>DM_Normal,<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>正常绘制（默认，发送<sp/>WM_PAINT<sp/>消息）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_Fast,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>快速绘制（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过部分绘制）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_VeryFast,<sp/><sp/><sp/><sp/>//<sp/>极速绘制（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过很多绘制）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DM_Fastest,<sp/><sp/><sp/><sp/><sp/>//<sp/>最快的绘制方式（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过大部分绘制）
<sp/><sp/><sp/>};

<sp/><sp/><sp/><sp/>//<sp/>窗口类
<sp/><sp/><sp/><sp/>class<sp/>Window
<sp/><sp/><sp/>{
<sp/><sp/>private:

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>m_nWindowIndex<sp/>=<sp/>NO_WINDOW_INDEX;
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isCreated<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isPreStyle<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isPrePos<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>m_lPreStyle;
<sp/><sp/><sp/><sp/><sp/><sp/>POINT<sp/>m_pPrePos;

<sp/><sp/>public:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Window();

<sp/><sp/><sp/><sp/><sp/>Window(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>~Window();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>InitWindow(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>等价于 InitWindow
<sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>Create(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>CloseWindow();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>等价于 CloseWindow
<sp/><sp/><sp/><sp/><sp/>void<sp/>Destroy();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetProcFunc(WNDPROC<sp/>WindowProcess);

<sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>GetHandle();

<sp/><sp/><sp/><sp/><sp/>EasyWindow<sp/>GetInfo();

<sp/><sp/><sp/><sp/><sp/>bool<sp/>isAlive();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/>GetImage();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Canvas*<sp/>GetCanvas();

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>BindCanvas(Canvas*<sp/>pCanvas);

<sp/><sp/><sp/><sp/><sp/>void<sp/>WaitMyTask();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>SetWorkingWindow();

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetQuickDraw(UINT<sp/>nSkipPixels);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>输出绘图缓冲（并非重绘窗口）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>FlushDrawing();

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘窗口
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Redraw();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>BeginTask();

<sp/><sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isInTask();

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isSizeChanged();

<sp/><sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>DeleteTray();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT));

<sp/><sp/><sp/><sp/><sp/>void<sp/>PreSetStyle(long<sp/>lStyle);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>PreSetPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/><sp/><sp/>long<sp/>GetStyle();

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>SetStyle(long<sp/>lNewStyle);

<sp/><sp/><sp/><sp/><sp/>long<sp/>GetExStyle();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>SetExStyle(long<sp/>lNewExStyle);

<sp/><sp/><sp/><sp/><sp/>POINT<sp/>GetPos();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIZE<sp/>GetWindowSize();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的大小

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetWindowWidth();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的宽度

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetWindowHeight();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的高度

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetClientWidth();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取客户区宽度

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetClientHeight();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取客户区高度

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Move(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>MoveRel(int<sp/>dx,<sp/>int<sp/>dy);

<sp/><sp/><sp/><sp/><sp/>void<sp/>Resize(int<sp/>w,<sp/>int<sp/>h);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否为用户正在使用的窗口
<sp/><sp/><sp/><sp/><sp/>bool<sp/>isForegroundWindow();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExMessage<sp/>Get_Message(BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Get_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>Peek_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Flush_Message(BYTE<sp/>filter<sp/>=<sp/>-1);
<sp/><sp/>};

<sp/><sp/><sp/><sp/>////////////******<sp/>窗体相关函数<sp/>******////////////

<sp/><sp/><sp/><sp/>//<sp/>创建<sp/>Win32<sp/>绘图窗口（默认支持窗口双击消息）（跳过了 EasyX<sp/>原生窗口创建的步骤）
<sp/><sp/><sp/>//<sp/>w,<sp/>h<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口大小
<sp/>//<sp/>flag<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口样式标识
<sp/><sp/>//<sp/>lpszWndTitle<sp/><sp/><sp/><sp/><sp/>窗口标题
<sp/><sp/>//<sp/>WindowProcess<sp/><sp/><sp/><sp/>窗口消息处理函数的指针，为空表示使用默认消息处理函数（详见头文件中“窗口消息处理函数规范”）
<sp/>//<sp/>hParent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>父窗口句柄，为空则表示该窗口独立存在（若填写，该窗口将成为模态窗口）
<sp/><sp/><sp/><sp/>//
<sp/>//<sp/>注：若创建大量绘图窗口，请适量添加延时，否则会导致一些问题。
<sp/><sp/><sp/>HWND<sp/>initgraph_win32(
<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/>);

<sp/><sp/><sp/><sp/>//<sp/>关闭某一绘图窗口，若句柄为<sp/>nullptr<sp/>则关闭所有绘图窗口
<sp/><sp/>void<sp/>closegraph_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置某窗口的过程函数（传入空句柄可以标识当前活动窗口）
<sp/><sp/><sp/><sp/>void<sp/>SetWndProcFunc(HWND<sp/>hWnd,<sp/>WNDPROC<sp/>WindowProcess);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的句柄
<sp/>HWND<sp/>GetHWnd_win32();

<sp/>//<sp/>结束初始化窗口
<sp/><sp/>//<sp/>阻塞，直到目标窗口被关闭
<sp/><sp/><sp/><sp/>//<sp/>若传入句柄 nullptr，则等待所有窗口关闭
<sp/><sp/>void<sp/>init_end(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置：当窗口都被销毁时，自动退出程序
<sp/><sp/>void<sp/>AutoExit();

<sp/><sp/>//<sp/>是否还存在未销毁的绘图窗口
<sp/><sp/><sp/>bool<sp/>isAnyWindow();

<sp/><sp/><sp/>//<sp/>判断一窗口是否还存在（不含已被关闭的窗口）
<sp/><sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isAliveWindow(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取某窗口的图像指针
<sp/><sp/><sp/>IMAGE*<sp/>GetWindowImage(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>获取窗口画布指针
<sp/><sp/><sp/><sp/>Canvas*<sp/>GetWindowCanvas(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>绑定窗口画布指针
<sp/><sp/><sp/><sp/>//<sp/>绑定后，使用画布绘图时将自动开启任务，无需用户开启，但不会自动刷新屏幕
<sp/><sp/>//<sp/>绑定画布后，如在外部操作画布，则必须先启动窗口任务
<sp/>void<sp/>BindWindowCanvas(Canvas*<sp/>pCanvas,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>将绘制在 EasyX<sp/>中的内容显示到目标窗口上（任意窗口）
<sp/><sp/><sp/><sp/>void<sp/>FlushDrawingToWnd(IMAGE*<sp/>pImg,<sp/>HWND<sp/>hWnd);

<sp/><sp/><sp/>//<sp/>阻塞等待绘图任务完成
<sp/>//<sp/>如果传入句柄，则只有该句柄窗口是活动窗口时才等待
<sp/><sp/>void<sp/>WaitForTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的详细信息
<sp/><sp/>EasyWindow<sp/>GetWorkingWindow();

<sp/><sp/><sp/><sp/>//<sp/>等待当前任务完成并设置活动窗口，返回是否设置成功
<sp/>bool<sp/>SetWorkingWindow(HWND<sp/>hWnd);

<sp/>//<sp/>设置加速绘制跳过多少像素点
<sp/><sp/><sp/>//<sp/>此加速效果是有损的，加速效果与跳过的像素点数正相关。
<sp/><sp/>void<sp/>QuickDraw(UINT<sp/>nSkipPixels,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>获取全局绘制模式
<sp/><sp/>DrawMode<sp/>GetDrawMode();

<sp/><sp/><sp/>//<sp/>设置全局绘制模式
<sp/><sp/><sp/>void<sp/>SetDrawMode(DrawMode<sp/>mode);

<sp/><sp/>//<sp/>强制重绘绘图窗口（在<sp/>WM_PAINT<sp/>消息内绘图不需要使用此函数）
<sp/><sp/><sp/>void<sp/>EnforceRedraw(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>为当前活动窗口启动任务，返回是否启动成功（若已在任务中也返回 true）
<sp/>//<sp/>调用 EasyX<sp/>函数进行绘图或获取消息时，都应该先启动任务再进行调用。
<sp/>bool<sp/>BeginTask();

<sp/>//<sp/>终止当前任务，（可选）输出绘图缓冲
<sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/>//<sp/>判断当前是否有任务在进行
<sp/><sp/><sp/>//<sp/>若传入句柄，则额外判断它是否为活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isInTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>判断某窗口的大小是否改变
<sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="struct_hi_easy_x_1_1_easy_window_1a6a61c4e03119042f085f9b9ed8bedd8c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_hi_easy_x_1_1_easy_window_1a6a61c4e03119042f085f9b9ed8bedd8c" kindref="member">isBusyProcessing</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>是否正忙于处理内部消息（指不允许用户启动任务的情况）</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="struct_hi_easy_x_1_1_easy_window_1a1fd7608d40b28dc6fd98f1ddf53347fd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_hi_easy_x_1_1_easy_window_1a1fd7608d40b28dc6fd98f1ddf53347fd" kindref="member">nSkipPixels</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>绘制时跳过的像素点数量（降质性速绘）</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="struct_hi_easy_x_1_1_easy_window_1a99c482b8525448ec0cc8d5a8f5ead0df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;SysControlBase*&gt;<sp/><ref refid="struct_hi_easy_x_1_1_easy_window_1a99c482b8525448ec0cc8d5a8f5ead0df" kindref="member">vecSysCtrl</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>记录创建的系统控件</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="struct_hi_easy_x_1_1_easy_window_1ac359322f8d79b0fa247d6cf4a7896419" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_hi_easy_x_1_1_easy_window_1ac359322f8d79b0fa247d6cf4a7896419" kindref="member">bHasCtrl</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>是否创建过系统控件</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="namespace_hi_easy_x_1aadd191826ef50747dda8a364644e7097" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="namespace_hi_easy_x_1aadd191826ef50747dda8a364644e7097" kindref="member">DrawMode</ref></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="131" refid="namespace_hi_easy_x_1aadd191826ef50747dda8a364644e7097ae907e1c1dd7be8e70242f4c616cb8add" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_hi_easy_x_1aadd191826ef50747dda8a364644e7097ae907e1c1dd7be8e70242f4c616cb8add" kindref="member">DM_Real</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>完全按实际绘制（每次要求重绘都立即执行，可能导致程序卡顿）</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="namespace_hi_easy_x_1aadd191826ef50747dda8a364644e7097a19a3145cadc4b5a085d2bea0a6ff798b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_hi_easy_x_1aadd191826ef50747dda8a364644e7097a19a3145cadc4b5a085d2bea0a6ff798b" kindref="member">DM_Normal</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>正常绘制（默认，发送<sp/>WM_PAINT<sp/>消息）</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="namespace_hi_easy_x_1aadd191826ef50747dda8a364644e7097ab7b369dbf50422be36e62d6d7406eda9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_hi_easy_x_1aadd191826ef50747dda8a364644e7097ab7b369dbf50422be36e62d6d7406eda9" kindref="member">DM_Fast</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>快速绘制（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过部分绘制）</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="namespace_hi_easy_x_1aadd191826ef50747dda8a364644e7097a5838835dbef4a0f6a6df29a6183ad537" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_hi_easy_x_1aadd191826ef50747dda8a364644e7097a5838835dbef4a0f6a6df29a6183ad537" kindref="member">DM_VeryFast</ref>,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>极速绘制（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过很多绘制）</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135" refid="namespace_hi_easy_x_1aadd191826ef50747dda8a364644e7097ac1919e768deedb405576941306825bac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_hi_easy_x_1aadd191826ef50747dda8a364644e7097ac1919e768deedb405576941306825bac" kindref="member">DM_Fastest</ref>,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>最快的绘制方式（发送<sp/>WM_USER_REDRAW<sp/>消息，可能跳过大部分绘制）</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>窗口类 <sp/><sp/><sp/><sp/>class<sp/>Window
<sp/><sp/><sp/>{
<sp/><sp/>private:

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>m_nWindowIndex<sp/>=<sp/>NO_WINDOW_INDEX;
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isCreated<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isPreStyle<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/>bool<sp/>m_isPrePos<sp/>=<sp/>false;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>m_lPreStyle;
<sp/><sp/><sp/><sp/><sp/><sp/>POINT<sp/>m_pPrePos;

<sp/><sp/>public:

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Window();

<sp/><sp/><sp/><sp/><sp/>Window(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>~Window();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>InitWindow(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>等价于 InitWindow
<sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>Create(
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/><sp/><sp/><sp/><sp/>);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>CloseWindow();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>等价于 CloseWindow
<sp/><sp/><sp/><sp/><sp/>void<sp/>Destroy();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetProcFunc(WNDPROC<sp/>WindowProcess);

<sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>GetHandle();

<sp/><sp/><sp/><sp/><sp/>EasyWindow<sp/>GetInfo();

<sp/><sp/><sp/><sp/><sp/>bool<sp/>isAlive();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/>GetImage();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Canvas*<sp/>GetCanvas();

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>BindCanvas(Canvas*<sp/>pCanvas);

<sp/><sp/><sp/><sp/><sp/>void<sp/>WaitMyTask();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>SetWorkingWindow();

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetQuickDraw(UINT<sp/>nSkipPixels);

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>输出绘图缓冲（并非重绘窗口）
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>FlushDrawing();

<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>重绘窗口
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Redraw();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>BeginTask();

<sp/><sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isInTask();

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isSizeChanged();

<sp/><sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>DeleteTray();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT));

<sp/><sp/><sp/><sp/><sp/>void<sp/>PreSetStyle(long<sp/>lStyle);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>PreSetPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/><sp/><sp/>long<sp/>GetStyle();

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>SetStyle(long<sp/>lNewStyle);

<sp/><sp/><sp/><sp/><sp/>long<sp/>GetExStyle();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>SetExStyle(long<sp/>lNewExStyle);

<sp/><sp/><sp/><sp/><sp/>POINT<sp/>GetPos();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIZE<sp/>GetWindowSize();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的大小

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetWindowWidth();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的宽度

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetWindowHeight();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的高度

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetClientWidth();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取客户区宽度

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetClientHeight();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取客户区高度

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Move(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>MoveRel(int<sp/>dx,<sp/>int<sp/>dy);

<sp/><sp/><sp/><sp/><sp/>void<sp/>Resize(int<sp/>w,<sp/>int<sp/>h);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否为用户正在使用的窗口
<sp/><sp/><sp/><sp/><sp/>bool<sp/>isForegroundWindow();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExMessage<sp/>Get_Message(BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Get_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>Peek_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Flush_Message(BYTE<sp/>filter<sp/>=<sp/>-1);
<sp/><sp/>};

<sp/><sp/><sp/><sp/>////////////******<sp/>窗体相关函数<sp/>******////////////

<sp/><sp/><sp/><sp/>//<sp/>创建<sp/>Win32<sp/>绘图窗口（默认支持窗口双击消息）（跳过了 EasyX<sp/>原生窗口创建的步骤）
<sp/><sp/><sp/>//<sp/>w,<sp/>h<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口大小
<sp/>//<sp/>flag<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口样式标识
<sp/><sp/>//<sp/>lpszWndTitle<sp/><sp/><sp/><sp/><sp/>窗口标题
<sp/><sp/>//<sp/>WindowProcess<sp/><sp/><sp/><sp/>窗口消息处理函数的指针，为空表示使用默认消息处理函数（详见头文件中“窗口消息处理函数规范”）
<sp/>//<sp/>hParent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>父窗口句柄，为空则表示该窗口独立存在（若填写，该窗口将成为模态窗口）
<sp/><sp/><sp/><sp/>//
<sp/>//<sp/>注：若创建大量绘图窗口，请适量添加延时，否则会导致一些问题。
<sp/><sp/><sp/>HWND<sp/>initgraph_win32(
<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/>);

<sp/><sp/><sp/><sp/>//<sp/>关闭某一绘图窗口，若句柄为<sp/>nullptr<sp/>则关闭所有绘图窗口
<sp/><sp/>void<sp/>closegraph_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置某窗口的过程函数（传入空句柄可以标识当前活动窗口）
<sp/><sp/><sp/><sp/>void<sp/>SetWndProcFunc(HWND<sp/>hWnd,<sp/>WNDPROC<sp/>WindowProcess);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的句柄
<sp/>HWND<sp/>GetHWnd_win32();

<sp/>//<sp/>结束初始化窗口
<sp/><sp/>//<sp/>阻塞，直到目标窗口被关闭
<sp/><sp/><sp/><sp/>//<sp/>若传入句柄 nullptr，则等待所有窗口关闭
<sp/><sp/>void<sp/>init_end(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置：当窗口都被销毁时，自动退出程序
<sp/><sp/>void<sp/>AutoExit();

<sp/><sp/>//<sp/>是否还存在未销毁的绘图窗口
<sp/><sp/><sp/>bool<sp/>isAnyWindow();

<sp/><sp/><sp/>//<sp/>判断一窗口是否还存在（不含已被关闭的窗口）
<sp/><sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isAliveWindow(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取某窗口的图像指针
<sp/><sp/><sp/>IMAGE*<sp/>GetWindowImage(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>获取窗口画布指针
<sp/><sp/><sp/><sp/>Canvas*<sp/>GetWindowCanvas(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>绑定窗口画布指针
<sp/><sp/><sp/><sp/>//<sp/>绑定后，使用画布绘图时将自动开启任务，无需用户开启，但不会自动刷新屏幕
<sp/><sp/>//<sp/>绑定画布后，如在外部操作画布，则必须先启动窗口任务
<sp/>void<sp/>BindWindowCanvas(Canvas*<sp/>pCanvas,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>将绘制在 EasyX<sp/>中的内容显示到目标窗口上（任意窗口）
<sp/><sp/><sp/><sp/>void<sp/>FlushDrawingToWnd(IMAGE*<sp/>pImg,<sp/>HWND<sp/>hWnd);

<sp/><sp/><sp/>//<sp/>阻塞等待绘图任务完成
<sp/>//<sp/>如果传入句柄，则只有该句柄窗口是活动窗口时才等待
<sp/><sp/>void<sp/>WaitForTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的详细信息
<sp/><sp/>EasyWindow<sp/>GetWorkingWindow();

<sp/><sp/><sp/><sp/>//<sp/>等待当前任务完成并设置活动窗口，返回是否设置成功
<sp/>bool<sp/>SetWorkingWindow(HWND<sp/>hWnd);

<sp/>//<sp/>设置加速绘制跳过多少像素点
<sp/><sp/><sp/>//<sp/>此加速效果是有损的，加速效果与跳过的像素点数正相关。
<sp/><sp/>void<sp/>QuickDraw(UINT<sp/>nSkipPixels,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>获取全局绘制模式
<sp/><sp/>DrawMode<sp/>GetDrawMode();

<sp/><sp/><sp/>//<sp/>设置全局绘制模式
<sp/><sp/><sp/>void<sp/>SetDrawMode(DrawMode<sp/>mode);

<sp/><sp/>//<sp/>强制重绘绘图窗口（在<sp/>WM_PAINT<sp/>消息内绘图不需要使用此函数）
<sp/><sp/><sp/>void<sp/>EnforceRedraw(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>为当前活动窗口启动任务，返回是否启动成功（若已在任务中也返回 true）
<sp/>//<sp/>调用 EasyX<sp/>函数进行绘图或获取消息时，都应该先启动任务再进行调用。
<sp/>bool<sp/>BeginTask();

<sp/>//<sp/>终止当前任务，（可选）输出绘图缓冲
<sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/>//<sp/>判断当前是否有任务在进行
<sp/><sp/><sp/>//<sp/>若传入句柄，则额外判断它是否为活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isInTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>判断某窗口的大小是否改变
<sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="class_hi_easy_x_1_1_window" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_hi_easy_x_1_1_window" kindref="compound">Window</ref></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_nWindowIndex<sp/>=<sp/><ref refid="_hi_window_8h_1a84c163038896afa780149de502db4e31" kindref="member">NO_WINDOW_INDEX</ref>;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_isCreated<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_isPreStyle<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_isPrePos<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>m_lPreStyle;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POINT<sp/>m_pPrePos;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hi_easy_x_1_1_window_1a50360ab615b160e2d3f8a351d82b69d6" kindref="member">Window</ref>();</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hi_easy_x_1_1_window_1a50360ab615b160e2d3f8a351d82b69d6" kindref="member">Window</ref>(</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag<sp/>=<sp/><ref refid="_hi_window_8h_1aa08e357fa976894b15d6f5964abe597d" kindref="member">EW_NORMAL</ref>,</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_window_1ab527c57e7a57446c48881b094c53e59e" kindref="member">~Window</ref>();</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/><ref refid="class_hi_easy_x_1_1_window_1a31e537f6e8c0239ee6fa0f720670b885" kindref="member">InitWindow</ref>(</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w<sp/>=<sp/>640,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h<sp/>=<sp/>480,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag<sp/>=<sp/><ref refid="_hi_window_8h_1aa08e357fa976894b15d6f5964abe597d" kindref="member">EW_NORMAL</ref>,</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>等价于 InitWindow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/><ref refid="class_hi_easy_x_1_1_window_1a73ce39b5e8d51aa9da9216950eb43426" kindref="member">Create</ref>(</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w<sp/>=<sp/>640,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h<sp/>=<sp/>480,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag<sp/>=<sp/><ref refid="_hi_window_8h_1aa08e357fa976894b15d6f5964abe597d" kindref="member">EW_NORMAL</ref>,</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_window_1a4a4f383a1ca1be8f9f98e885ce815f18" kindref="member">CloseWindow</ref>();</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>等价于 CloseWindow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_window_1a3874552388af48b0d81b9b1aae6bbd4a" kindref="member">Destroy</ref>();</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_window_1ae864d1d8ad06e5f5d5df1086bc15707b" kindref="member">SetProcFunc</ref>(WNDPROC<sp/>WindowProcess);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/><ref refid="class_hi_easy_x_1_1_window_1a91c708f2f0fbb0c8df0d2cdbfebc26c7" kindref="member">GetHandle</ref>();</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_hi_easy_x_1_1_easy_window" kindref="compound">EasyWindow</ref><sp/><ref refid="class_hi_easy_x_1_1_window_1aa2ddf8de39392f0bae7adcec84d38867" kindref="member">GetInfo</ref>();</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_window_1aa68aa5fbe5ec4ad59e23dfa5d1948d06" kindref="member">isAlive</ref>();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMAGE*<sp/><ref refid="class_hi_easy_x_1_1_window_1affbc2bf66ad1acf5192865e72428192b" kindref="member">GetImage</ref>();</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hi_easy_x_1_1_canvas" kindref="compound">Canvas</ref>*<sp/><ref refid="class_hi_easy_x_1_1_window_1aedfe4fcebf8f9e98342d80da758da7c5" kindref="member">GetCanvas</ref>();</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_window_1a749a74f5ca2960abd91e37011b8f939d" kindref="member">BindCanvas</ref>(<ref refid="class_hi_easy_x_1_1_canvas" kindref="compound">Canvas</ref>*<sp/>pCanvas);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_window_1a10ba42493045b93c67ef70b9a9ab3777" kindref="member">WaitMyTask</ref>();</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_window_1ac7c193a6a393ae32fbbdffd3a2ab8765" kindref="member">SetWorkingWindow</ref>();</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_window_1a4da01cc6784ce26ee4f39bcd640b350c" kindref="member">SetQuickDraw</ref>(UINT<sp/>nSkipPixels);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>输出绘图缓冲（并非重绘窗口）</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_window_1a4208e053ee7ac0718a56c518ebaf9f54" kindref="member">FlushDrawing</ref>();</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>重绘窗口 <sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Redraw();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>BeginTask();

<sp/><sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isInTask();

<sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isSizeChanged();

<sp/><sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>DeleteTray();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT));

<sp/><sp/><sp/><sp/><sp/>void<sp/>PreSetStyle(long<sp/>lStyle);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>PreSetPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/><sp/><sp/>long<sp/>GetStyle();

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>SetStyle(long<sp/>lNewStyle);

<sp/><sp/><sp/><sp/><sp/>long<sp/>GetExStyle();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>SetExStyle(long<sp/>lNewExStyle);

<sp/><sp/><sp/><sp/><sp/>POINT<sp/>GetPos();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIZE<sp/>GetWindowSize();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的大小

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetWindowWidth();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的宽度

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetWindowHeight();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的高度

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetClientWidth();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取客户区宽度

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetClientHeight();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取客户区高度

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Move(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>MoveRel(int<sp/>dx,<sp/>int<sp/>dy);

<sp/><sp/><sp/><sp/><sp/>void<sp/>Resize(int<sp/>w,<sp/>int<sp/>h);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否为用户正在使用的窗口
<sp/><sp/><sp/><sp/><sp/>bool<sp/>isForegroundWindow();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExMessage<sp/>Get_Message(BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Get_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>Peek_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Flush_Message(BYTE<sp/>filter<sp/>=<sp/>-1);
<sp/><sp/>};

<sp/><sp/><sp/><sp/>////////////******<sp/>窗体相关函数<sp/>******////////////

<sp/><sp/><sp/><sp/>//<sp/>创建<sp/>Win32<sp/>绘图窗口（默认支持窗口双击消息）（跳过了 EasyX<sp/>原生窗口创建的步骤）
<sp/><sp/><sp/>//<sp/>w,<sp/>h<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口大小
<sp/>//<sp/>flag<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口样式标识
<sp/><sp/>//<sp/>lpszWndTitle<sp/><sp/><sp/><sp/><sp/>窗口标题
<sp/><sp/>//<sp/>WindowProcess<sp/><sp/><sp/><sp/>窗口消息处理函数的指针，为空表示使用默认消息处理函数（详见头文件中“窗口消息处理函数规范”）
<sp/>//<sp/>hParent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>父窗口句柄，为空则表示该窗口独立存在（若填写，该窗口将成为模态窗口）
<sp/><sp/><sp/><sp/>//
<sp/>//<sp/>注：若创建大量绘图窗口，请适量添加延时，否则会导致一些问题。
<sp/><sp/><sp/>HWND<sp/>initgraph_win32(
<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/>);

<sp/><sp/><sp/><sp/>//<sp/>关闭某一绘图窗口，若句柄为<sp/>nullptr<sp/>则关闭所有绘图窗口
<sp/><sp/>void<sp/>closegraph_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置某窗口的过程函数（传入空句柄可以标识当前活动窗口）
<sp/><sp/><sp/><sp/>void<sp/>SetWndProcFunc(HWND<sp/>hWnd,<sp/>WNDPROC<sp/>WindowProcess);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的句柄
<sp/>HWND<sp/>GetHWnd_win32();

<sp/>//<sp/>结束初始化窗口
<sp/><sp/>//<sp/>阻塞，直到目标窗口被关闭
<sp/><sp/><sp/><sp/>//<sp/>若传入句柄 nullptr，则等待所有窗口关闭
<sp/><sp/>void<sp/>init_end(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置：当窗口都被销毁时，自动退出程序
<sp/><sp/>void<sp/>AutoExit();

<sp/><sp/>//<sp/>是否还存在未销毁的绘图窗口
<sp/><sp/><sp/>bool<sp/>isAnyWindow();

<sp/><sp/><sp/>//<sp/>判断一窗口是否还存在（不含已被关闭的窗口）
<sp/><sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isAliveWindow(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取某窗口的图像指针
<sp/><sp/><sp/>IMAGE*<sp/>GetWindowImage(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>获取窗口画布指针
<sp/><sp/><sp/><sp/>Canvas*<sp/>GetWindowCanvas(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>绑定窗口画布指针
<sp/><sp/><sp/><sp/>//<sp/>绑定后，使用画布绘图时将自动开启任务，无需用户开启，但不会自动刷新屏幕
<sp/><sp/>//<sp/>绑定画布后，如在外部操作画布，则必须先启动窗口任务
<sp/>void<sp/>BindWindowCanvas(Canvas*<sp/>pCanvas,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>将绘制在 EasyX<sp/>中的内容显示到目标窗口上（任意窗口）
<sp/><sp/><sp/><sp/>void<sp/>FlushDrawingToWnd(IMAGE*<sp/>pImg,<sp/>HWND<sp/>hWnd);

<sp/><sp/><sp/>//<sp/>阻塞等待绘图任务完成
<sp/>//<sp/>如果传入句柄，则只有该句柄窗口是活动窗口时才等待
<sp/><sp/>void<sp/>WaitForTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的详细信息
<sp/><sp/>EasyWindow<sp/>GetWorkingWindow();

<sp/><sp/><sp/><sp/>//<sp/>等待当前任务完成并设置活动窗口，返回是否设置成功
<sp/>bool<sp/>SetWorkingWindow(HWND<sp/>hWnd);

<sp/>//<sp/>设置加速绘制跳过多少像素点
<sp/><sp/><sp/>//<sp/>此加速效果是有损的，加速效果与跳过的像素点数正相关。
<sp/><sp/>void<sp/>QuickDraw(UINT<sp/>nSkipPixels,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>获取全局绘制模式
<sp/><sp/>DrawMode<sp/>GetDrawMode();

<sp/><sp/><sp/>//<sp/>设置全局绘制模式
<sp/><sp/><sp/>void<sp/>SetDrawMode(DrawMode<sp/>mode);

<sp/><sp/>//<sp/>强制重绘绘图窗口（在<sp/>WM_PAINT<sp/>消息内绘图不需要使用此函数）
<sp/><sp/><sp/>void<sp/>EnforceRedraw(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>为当前活动窗口启动任务，返回是否启动成功（若已在任务中也返回 true）
<sp/>//<sp/>调用 EasyX<sp/>函数进行绘图或获取消息时，都应该先启动任务再进行调用。
<sp/>bool<sp/>BeginTask();

<sp/>//<sp/>终止当前任务，（可选）输出绘图缓冲
<sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/>//<sp/>判断当前是否有任务在进行
<sp/><sp/><sp/>//<sp/>若传入句柄，则额外判断它是否为活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isInTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>判断某窗口的大小是否改变
<sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_window_1ad945eb8c2be0269943ccc9a9ced7dbef" kindref="member">Redraw</ref>();</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_window_1a84d6746919ec44df9e79a50ec0f5bf8e" kindref="member">BeginTask</ref>();</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_window_1ab710116368877655a6952b868f54d9ad" kindref="member">EndTask</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flush<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_window_1ad66464fd4cc5a0f210b4acbc645c4a72" kindref="member">isInTask</ref>();</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_window_1a3571417b2cca37ba59b58353b46df055" kindref="member">isSizeChanged</ref>();</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_window_1a8dcb54ed226a3abccda09901ea6f21c3" kindref="member">CreateTray</ref>(LPCTSTR<sp/>lpszTrayName);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_window_1adeb07944de92d3aeca422dcd0630d847" kindref="member">DeleteTray</ref>();</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_window_1a12d12fc4af4caa31edaa980f2cbd833f" kindref="member">SetTrayMenu</ref>(HMENU<sp/>hMenu);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_window_1adda1b6ac64c9a624089fc21e4a15f435" kindref="member">SetTrayMenuProcFunc</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(*pFunc)(UINT));</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_window_1a1d436d306bd76438376d3792c3e9e15e" kindref="member">PreSetStyle</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>lStyle);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_window_1ac87bb5818c8497e2402d000980326ab8" kindref="member">PreSetPos</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_window_1ad46cd00add89b602ba94e631be60ddfd" kindref="member">GetStyle</ref>();</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_window_1ad710a0020b99a5db822742aa8c0396b5" kindref="member">SetStyle</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>lNewStyle);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_window_1a23ca186fccd1c0124e0e6c7b986c9b9c" kindref="member">GetExStyle</ref>();</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_window_1aabb61b1270b1f3b357dc81f53b896da0" kindref="member">SetExStyle</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>lNewExStyle);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POINT<sp/><ref refid="class_hi_easy_x_1_1_window_1a6fa87dcc06df061216bd413958634499" kindref="member">GetPos</ref>();</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIZE<sp/><ref refid="class_hi_easy_x_1_1_window_1ad57fa249de8c264354763593e82f69f5" kindref="member">GetWindowSize</ref>();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>获取整个窗口的大小</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_window_1a0dcb2609e0e68f1ac5bbec30d6454310" kindref="member">GetWindowWidth</ref>();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>获取整个窗口的宽度 
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetWindowHeight();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取整个窗口的高度

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetClientWidth();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取客户区宽度

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetClientHeight();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取客户区高度

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Move(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>MoveRel(int<sp/>dx,<sp/>int<sp/>dy);

<sp/><sp/><sp/><sp/><sp/>void<sp/>Resize(int<sp/>w,<sp/>int<sp/>h);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否为用户正在使用的窗口
<sp/><sp/><sp/><sp/><sp/>bool<sp/>isForegroundWindow();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExMessage<sp/>Get_Message(BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Get_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>Peek_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Flush_Message(BYTE<sp/>filter<sp/>=<sp/>-1);
<sp/><sp/>};

<sp/><sp/><sp/><sp/>////////////******<sp/>窗体相关函数<sp/>******////////////

<sp/><sp/><sp/><sp/>//<sp/>创建<sp/>Win32<sp/>绘图窗口（默认支持窗口双击消息）（跳过了 EasyX<sp/>原生窗口创建的步骤）
<sp/><sp/><sp/>//<sp/>w,<sp/>h<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口大小
<sp/>//<sp/>flag<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口样式标识
<sp/><sp/>//<sp/>lpszWndTitle<sp/><sp/><sp/><sp/><sp/>窗口标题
<sp/><sp/>//<sp/>WindowProcess<sp/><sp/><sp/><sp/>窗口消息处理函数的指针，为空表示使用默认消息处理函数（详见头文件中“窗口消息处理函数规范”）
<sp/>//<sp/>hParent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>父窗口句柄，为空则表示该窗口独立存在（若填写，该窗口将成为模态窗口）
<sp/><sp/><sp/><sp/>//
<sp/>//<sp/>注：若创建大量绘图窗口，请适量添加延时，否则会导致一些问题。
<sp/><sp/><sp/>HWND<sp/>initgraph_win32(
<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/>);

<sp/><sp/><sp/><sp/>//<sp/>关闭某一绘图窗口，若句柄为<sp/>nullptr<sp/>则关闭所有绘图窗口
<sp/><sp/>void<sp/>closegraph_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置某窗口的过程函数（传入空句柄可以标识当前活动窗口）
<sp/><sp/><sp/><sp/>void<sp/>SetWndProcFunc(HWND<sp/>hWnd,<sp/>WNDPROC<sp/>WindowProcess);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的句柄
<sp/>HWND<sp/>GetHWnd_win32();

<sp/>//<sp/>结束初始化窗口
<sp/><sp/>//<sp/>阻塞，直到目标窗口被关闭
<sp/><sp/><sp/><sp/>//<sp/>若传入句柄 nullptr，则等待所有窗口关闭
<sp/><sp/>void<sp/>init_end(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置：当窗口都被销毁时，自动退出程序
<sp/><sp/>void<sp/>AutoExit();

<sp/><sp/>//<sp/>是否还存在未销毁的绘图窗口
<sp/><sp/><sp/>bool<sp/>isAnyWindow();

<sp/><sp/><sp/>//<sp/>判断一窗口是否还存在（不含已被关闭的窗口）
<sp/><sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isAliveWindow(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取某窗口的图像指针
<sp/><sp/><sp/>IMAGE*<sp/>GetWindowImage(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>获取窗口画布指针
<sp/><sp/><sp/><sp/>Canvas*<sp/>GetWindowCanvas(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>绑定窗口画布指针
<sp/><sp/><sp/><sp/>//<sp/>绑定后，使用画布绘图时将自动开启任务，无需用户开启，但不会自动刷新屏幕
<sp/><sp/>//<sp/>绑定画布后，如在外部操作画布，则必须先启动窗口任务
<sp/>void<sp/>BindWindowCanvas(Canvas*<sp/>pCanvas,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>将绘制在 EasyX<sp/>中的内容显示到目标窗口上（任意窗口）
<sp/><sp/><sp/><sp/>void<sp/>FlushDrawingToWnd(IMAGE*<sp/>pImg,<sp/>HWND<sp/>hWnd);

<sp/><sp/><sp/>//<sp/>阻塞等待绘图任务完成
<sp/>//<sp/>如果传入句柄，则只有该句柄窗口是活动窗口时才等待
<sp/><sp/>void<sp/>WaitForTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的详细信息
<sp/><sp/>EasyWindow<sp/>GetWorkingWindow();

<sp/><sp/><sp/><sp/>//<sp/>等待当前任务完成并设置活动窗口，返回是否设置成功
<sp/>bool<sp/>SetWorkingWindow(HWND<sp/>hWnd);

<sp/>//<sp/>设置加速绘制跳过多少像素点
<sp/><sp/><sp/>//<sp/>此加速效果是有损的，加速效果与跳过的像素点数正相关。
<sp/><sp/>void<sp/>QuickDraw(UINT<sp/>nSkipPixels,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>获取全局绘制模式
<sp/><sp/>DrawMode<sp/>GetDrawMode();

<sp/><sp/><sp/>//<sp/>设置全局绘制模式
<sp/><sp/><sp/>void<sp/>SetDrawMode(DrawMode<sp/>mode);

<sp/><sp/>//<sp/>强制重绘绘图窗口（在<sp/>WM_PAINT<sp/>消息内绘图不需要使用此函数）
<sp/><sp/><sp/>void<sp/>EnforceRedraw(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>为当前活动窗口启动任务，返回是否启动成功（若已在任务中也返回 true）
<sp/>//<sp/>调用 EasyX<sp/>函数进行绘图或获取消息时，都应该先启动任务再进行调用。
<sp/>bool<sp/>BeginTask();

<sp/>//<sp/>终止当前任务，（可选）输出绘图缓冲
<sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/>//<sp/>判断当前是否有任务在进行
<sp/><sp/><sp/>//<sp/>若传入句柄，则额外判断它是否为活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isInTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>判断某窗口的大小是否改变
<sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_window_1a81485b82a4393de2a2c79580f27834f5" kindref="member">GetWindowHeight</ref>();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>获取整个窗口的高度 
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetClientWidth();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取客户区宽度

<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetClientHeight();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取客户区高度

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Move(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>MoveRel(int<sp/>dx,<sp/>int<sp/>dy);

<sp/><sp/><sp/><sp/><sp/>void<sp/>Resize(int<sp/>w,<sp/>int<sp/>h);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否为用户正在使用的窗口
<sp/><sp/><sp/><sp/><sp/>bool<sp/>isForegroundWindow();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExMessage<sp/>Get_Message(BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Get_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>Peek_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Flush_Message(BYTE<sp/>filter<sp/>=<sp/>-1);
<sp/><sp/>};

<sp/><sp/><sp/><sp/>////////////******<sp/>窗体相关函数<sp/>******////////////

<sp/><sp/><sp/><sp/>//<sp/>创建<sp/>Win32<sp/>绘图窗口（默认支持窗口双击消息）（跳过了 EasyX<sp/>原生窗口创建的步骤）
<sp/><sp/><sp/>//<sp/>w,<sp/>h<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口大小
<sp/>//<sp/>flag<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口样式标识
<sp/><sp/>//<sp/>lpszWndTitle<sp/><sp/><sp/><sp/><sp/>窗口标题
<sp/><sp/>//<sp/>WindowProcess<sp/><sp/><sp/><sp/>窗口消息处理函数的指针，为空表示使用默认消息处理函数（详见头文件中“窗口消息处理函数规范”）
<sp/>//<sp/>hParent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>父窗口句柄，为空则表示该窗口独立存在（若填写，该窗口将成为模态窗口）
<sp/><sp/><sp/><sp/>//
<sp/>//<sp/>注：若创建大量绘图窗口，请适量添加延时，否则会导致一些问题。
<sp/><sp/><sp/>HWND<sp/>initgraph_win32(
<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/>);

<sp/><sp/><sp/><sp/>//<sp/>关闭某一绘图窗口，若句柄为<sp/>nullptr<sp/>则关闭所有绘图窗口
<sp/><sp/>void<sp/>closegraph_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置某窗口的过程函数（传入空句柄可以标识当前活动窗口）
<sp/><sp/><sp/><sp/>void<sp/>SetWndProcFunc(HWND<sp/>hWnd,<sp/>WNDPROC<sp/>WindowProcess);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的句柄
<sp/>HWND<sp/>GetHWnd_win32();

<sp/>//<sp/>结束初始化窗口
<sp/><sp/>//<sp/>阻塞，直到目标窗口被关闭
<sp/><sp/><sp/><sp/>//<sp/>若传入句柄 nullptr，则等待所有窗口关闭
<sp/><sp/>void<sp/>init_end(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置：当窗口都被销毁时，自动退出程序
<sp/><sp/>void<sp/>AutoExit();

<sp/><sp/>//<sp/>是否还存在未销毁的绘图窗口
<sp/><sp/><sp/>bool<sp/>isAnyWindow();

<sp/><sp/><sp/>//<sp/>判断一窗口是否还存在（不含已被关闭的窗口）
<sp/><sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isAliveWindow(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取某窗口的图像指针
<sp/><sp/><sp/>IMAGE*<sp/>GetWindowImage(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>获取窗口画布指针
<sp/><sp/><sp/><sp/>Canvas*<sp/>GetWindowCanvas(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>绑定窗口画布指针
<sp/><sp/><sp/><sp/>//<sp/>绑定后，使用画布绘图时将自动开启任务，无需用户开启，但不会自动刷新屏幕
<sp/><sp/>//<sp/>绑定画布后，如在外部操作画布，则必须先启动窗口任务
<sp/>void<sp/>BindWindowCanvas(Canvas*<sp/>pCanvas,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>将绘制在 EasyX<sp/>中的内容显示到目标窗口上（任意窗口）
<sp/><sp/><sp/><sp/>void<sp/>FlushDrawingToWnd(IMAGE*<sp/>pImg,<sp/>HWND<sp/>hWnd);

<sp/><sp/><sp/>//<sp/>阻塞等待绘图任务完成
<sp/>//<sp/>如果传入句柄，则只有该句柄窗口是活动窗口时才等待
<sp/><sp/>void<sp/>WaitForTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的详细信息
<sp/><sp/>EasyWindow<sp/>GetWorkingWindow();

<sp/><sp/><sp/><sp/>//<sp/>等待当前任务完成并设置活动窗口，返回是否设置成功
<sp/>bool<sp/>SetWorkingWindow(HWND<sp/>hWnd);

<sp/>//<sp/>设置加速绘制跳过多少像素点
<sp/><sp/><sp/>//<sp/>此加速效果是有损的，加速效果与跳过的像素点数正相关。
<sp/><sp/>void<sp/>QuickDraw(UINT<sp/>nSkipPixels,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>获取全局绘制模式
<sp/><sp/>DrawMode<sp/>GetDrawMode();

<sp/><sp/><sp/>//<sp/>设置全局绘制模式
<sp/><sp/><sp/>void<sp/>SetDrawMode(DrawMode<sp/>mode);

<sp/><sp/>//<sp/>强制重绘绘图窗口（在<sp/>WM_PAINT<sp/>消息内绘图不需要使用此函数）
<sp/><sp/><sp/>void<sp/>EnforceRedraw(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>为当前活动窗口启动任务，返回是否启动成功（若已在任务中也返回 true）
<sp/>//<sp/>调用 EasyX<sp/>函数进行绘图或获取消息时，都应该先启动任务再进行调用。
<sp/>bool<sp/>BeginTask();

<sp/>//<sp/>终止当前任务，（可选）输出绘图缓冲
<sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/>//<sp/>判断当前是否有任务在进行
<sp/><sp/><sp/>//<sp/>若传入句柄，则额外判断它是否为活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isInTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>判断某窗口的大小是否改变
<sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_window_1a5760826117b8a1a6beda2c07370a1437" kindref="member">GetClientWidth</ref>();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>获取客户区宽度 
<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>GetClientHeight();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>获取客户区高度

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Move(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>MoveRel(int<sp/>dx,<sp/>int<sp/>dy);

<sp/><sp/><sp/><sp/><sp/>void<sp/>Resize(int<sp/>w,<sp/>int<sp/>h);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否为用户正在使用的窗口
<sp/><sp/><sp/><sp/><sp/>bool<sp/>isForegroundWindow();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExMessage<sp/>Get_Message(BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Get_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>Peek_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Flush_Message(BYTE<sp/>filter<sp/>=<sp/>-1);
<sp/><sp/>};

<sp/><sp/><sp/><sp/>////////////******<sp/>窗体相关函数<sp/>******////////////

<sp/><sp/><sp/><sp/>//<sp/>创建<sp/>Win32<sp/>绘图窗口（默认支持窗口双击消息）（跳过了 EasyX<sp/>原生窗口创建的步骤）
<sp/><sp/><sp/>//<sp/>w,<sp/>h<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口大小
<sp/>//<sp/>flag<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口样式标识
<sp/><sp/>//<sp/>lpszWndTitle<sp/><sp/><sp/><sp/><sp/>窗口标题
<sp/><sp/>//<sp/>WindowProcess<sp/><sp/><sp/><sp/>窗口消息处理函数的指针，为空表示使用默认消息处理函数（详见头文件中“窗口消息处理函数规范”）
<sp/>//<sp/>hParent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>父窗口句柄，为空则表示该窗口独立存在（若填写，该窗口将成为模态窗口）
<sp/><sp/><sp/><sp/>//
<sp/>//<sp/>注：若创建大量绘图窗口，请适量添加延时，否则会导致一些问题。
<sp/><sp/><sp/>HWND<sp/>initgraph_win32(
<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/>);

<sp/><sp/><sp/><sp/>//<sp/>关闭某一绘图窗口，若句柄为<sp/>nullptr<sp/>则关闭所有绘图窗口
<sp/><sp/>void<sp/>closegraph_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置某窗口的过程函数（传入空句柄可以标识当前活动窗口）
<sp/><sp/><sp/><sp/>void<sp/>SetWndProcFunc(HWND<sp/>hWnd,<sp/>WNDPROC<sp/>WindowProcess);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的句柄
<sp/>HWND<sp/>GetHWnd_win32();

<sp/>//<sp/>结束初始化窗口
<sp/><sp/>//<sp/>阻塞，直到目标窗口被关闭
<sp/><sp/><sp/><sp/>//<sp/>若传入句柄 nullptr，则等待所有窗口关闭
<sp/><sp/>void<sp/>init_end(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置：当窗口都被销毁时，自动退出程序
<sp/><sp/>void<sp/>AutoExit();

<sp/><sp/>//<sp/>是否还存在未销毁的绘图窗口
<sp/><sp/><sp/>bool<sp/>isAnyWindow();

<sp/><sp/><sp/>//<sp/>判断一窗口是否还存在（不含已被关闭的窗口）
<sp/><sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isAliveWindow(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取某窗口的图像指针
<sp/><sp/><sp/>IMAGE*<sp/>GetWindowImage(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>获取窗口画布指针
<sp/><sp/><sp/><sp/>Canvas*<sp/>GetWindowCanvas(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>绑定窗口画布指针
<sp/><sp/><sp/><sp/>//<sp/>绑定后，使用画布绘图时将自动开启任务，无需用户开启，但不会自动刷新屏幕
<sp/><sp/>//<sp/>绑定画布后，如在外部操作画布，则必须先启动窗口任务
<sp/>void<sp/>BindWindowCanvas(Canvas*<sp/>pCanvas,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>将绘制在 EasyX<sp/>中的内容显示到目标窗口上（任意窗口）
<sp/><sp/><sp/><sp/>void<sp/>FlushDrawingToWnd(IMAGE*<sp/>pImg,<sp/>HWND<sp/>hWnd);

<sp/><sp/><sp/>//<sp/>阻塞等待绘图任务完成
<sp/>//<sp/>如果传入句柄，则只有该句柄窗口是活动窗口时才等待
<sp/><sp/>void<sp/>WaitForTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的详细信息
<sp/><sp/>EasyWindow<sp/>GetWorkingWindow();

<sp/><sp/><sp/><sp/>//<sp/>等待当前任务完成并设置活动窗口，返回是否设置成功
<sp/>bool<sp/>SetWorkingWindow(HWND<sp/>hWnd);

<sp/>//<sp/>设置加速绘制跳过多少像素点
<sp/><sp/><sp/>//<sp/>此加速效果是有损的，加速效果与跳过的像素点数正相关。
<sp/><sp/>void<sp/>QuickDraw(UINT<sp/>nSkipPixels,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>获取全局绘制模式
<sp/><sp/>DrawMode<sp/>GetDrawMode();

<sp/><sp/><sp/>//<sp/>设置全局绘制模式
<sp/><sp/><sp/>void<sp/>SetDrawMode(DrawMode<sp/>mode);

<sp/><sp/>//<sp/>强制重绘绘图窗口（在<sp/>WM_PAINT<sp/>消息内绘图不需要使用此函数）
<sp/><sp/><sp/>void<sp/>EnforceRedraw(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>为当前活动窗口启动任务，返回是否启动成功（若已在任务中也返回 true）
<sp/>//<sp/>调用 EasyX<sp/>函数进行绘图或获取消息时，都应该先启动任务再进行调用。
<sp/>bool<sp/>BeginTask();

<sp/>//<sp/>终止当前任务，（可选）输出绘图缓冲
<sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/>//<sp/>判断当前是否有任务在进行
<sp/><sp/><sp/>//<sp/>若传入句柄，则额外判断它是否为活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isInTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>判断某窗口的大小是否改变
<sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_window_1a057b56651e72c4c74625a3ab489efd26" kindref="member">GetClientHeight</ref>();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>获取客户区高度 
<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Move(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>MoveRel(int<sp/>dx,<sp/>int<sp/>dy);

<sp/><sp/><sp/><sp/><sp/>void<sp/>Resize(int<sp/>w,<sp/>int<sp/>h);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>是否为用户正在使用的窗口
<sp/><sp/><sp/><sp/><sp/>bool<sp/>isForegroundWindow();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExMessage<sp/>Get_Message(BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Get_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>Peek_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Flush_Message(BYTE<sp/>filter<sp/>=<sp/>-1);
<sp/><sp/>};

<sp/><sp/><sp/><sp/>////////////******<sp/>窗体相关函数<sp/>******////////////

<sp/><sp/><sp/><sp/>//<sp/>创建<sp/>Win32<sp/>绘图窗口（默认支持窗口双击消息）（跳过了 EasyX<sp/>原生窗口创建的步骤）
<sp/><sp/><sp/>//<sp/>w,<sp/>h<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口大小
<sp/>//<sp/>flag<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口样式标识
<sp/><sp/>//<sp/>lpszWndTitle<sp/><sp/><sp/><sp/><sp/>窗口标题
<sp/><sp/>//<sp/>WindowProcess<sp/><sp/><sp/><sp/>窗口消息处理函数的指针，为空表示使用默认消息处理函数（详见头文件中“窗口消息处理函数规范”）
<sp/>//<sp/>hParent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>父窗口句柄，为空则表示该窗口独立存在（若填写，该窗口将成为模态窗口）
<sp/><sp/><sp/><sp/>//
<sp/>//<sp/>注：若创建大量绘图窗口，请适量添加延时，否则会导致一些问题。
<sp/><sp/><sp/>HWND<sp/>initgraph_win32(
<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/>);

<sp/><sp/><sp/><sp/>//<sp/>关闭某一绘图窗口，若句柄为<sp/>nullptr<sp/>则关闭所有绘图窗口
<sp/><sp/>void<sp/>closegraph_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置某窗口的过程函数（传入空句柄可以标识当前活动窗口）
<sp/><sp/><sp/><sp/>void<sp/>SetWndProcFunc(HWND<sp/>hWnd,<sp/>WNDPROC<sp/>WindowProcess);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的句柄
<sp/>HWND<sp/>GetHWnd_win32();

<sp/>//<sp/>结束初始化窗口
<sp/><sp/>//<sp/>阻塞，直到目标窗口被关闭
<sp/><sp/><sp/><sp/>//<sp/>若传入句柄 nullptr，则等待所有窗口关闭
<sp/><sp/>void<sp/>init_end(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置：当窗口都被销毁时，自动退出程序
<sp/><sp/>void<sp/>AutoExit();

<sp/><sp/>//<sp/>是否还存在未销毁的绘图窗口
<sp/><sp/><sp/>bool<sp/>isAnyWindow();

<sp/><sp/><sp/>//<sp/>判断一窗口是否还存在（不含已被关闭的窗口）
<sp/><sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isAliveWindow(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取某窗口的图像指针
<sp/><sp/><sp/>IMAGE*<sp/>GetWindowImage(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>获取窗口画布指针
<sp/><sp/><sp/><sp/>Canvas*<sp/>GetWindowCanvas(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>绑定窗口画布指针
<sp/><sp/><sp/><sp/>//<sp/>绑定后，使用画布绘图时将自动开启任务，无需用户开启，但不会自动刷新屏幕
<sp/><sp/>//<sp/>绑定画布后，如在外部操作画布，则必须先启动窗口任务
<sp/>void<sp/>BindWindowCanvas(Canvas*<sp/>pCanvas,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>将绘制在 EasyX<sp/>中的内容显示到目标窗口上（任意窗口）
<sp/><sp/><sp/><sp/>void<sp/>FlushDrawingToWnd(IMAGE*<sp/>pImg,<sp/>HWND<sp/>hWnd);

<sp/><sp/><sp/>//<sp/>阻塞等待绘图任务完成
<sp/>//<sp/>如果传入句柄，则只有该句柄窗口是活动窗口时才等待
<sp/><sp/>void<sp/>WaitForTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的详细信息
<sp/><sp/>EasyWindow<sp/>GetWorkingWindow();

<sp/><sp/><sp/><sp/>//<sp/>等待当前任务完成并设置活动窗口，返回是否设置成功
<sp/>bool<sp/>SetWorkingWindow(HWND<sp/>hWnd);

<sp/>//<sp/>设置加速绘制跳过多少像素点
<sp/><sp/><sp/>//<sp/>此加速效果是有损的，加速效果与跳过的像素点数正相关。
<sp/><sp/>void<sp/>QuickDraw(UINT<sp/>nSkipPixels,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>获取全局绘制模式
<sp/><sp/>DrawMode<sp/>GetDrawMode();

<sp/><sp/><sp/>//<sp/>设置全局绘制模式
<sp/><sp/><sp/>void<sp/>SetDrawMode(DrawMode<sp/>mode);

<sp/><sp/>//<sp/>强制重绘绘图窗口（在<sp/>WM_PAINT<sp/>消息内绘图不需要使用此函数）
<sp/><sp/><sp/>void<sp/>EnforceRedraw(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>为当前活动窗口启动任务，返回是否启动成功（若已在任务中也返回 true）
<sp/>//<sp/>调用 EasyX<sp/>函数进行绘图或获取消息时，都应该先启动任务再进行调用。
<sp/>bool<sp/>BeginTask();

<sp/>//<sp/>终止当前任务，（可选）输出绘图缓冲
<sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/>//<sp/>判断当前是否有任务在进行
<sp/><sp/><sp/>//<sp/>若传入句柄，则额外判断它是否为活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isInTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>判断某窗口的大小是否改变
<sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_window_1adc251bdc1e2063e5f59a1aed8879c52f" kindref="member">Move</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_window_1a790b32d87ee475bdaa30b2877c79e3c9" kindref="member">MoveRel</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dy);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_window_1adf83598ff93e76b6c2a0db5d63e544ad" kindref="member">Resize</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>是否为用户正在使用的窗口 <sp/><sp/><sp/><sp/><sp/>bool<sp/>isForegroundWindow();

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExMessage<sp/>Get_Message(BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Get_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>Peek_Message(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true);

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>Flush_Message(BYTE<sp/>filter<sp/>=<sp/>-1);
<sp/><sp/>};

<sp/><sp/><sp/><sp/>////////////******<sp/>窗体相关函数<sp/>******////////////

<sp/><sp/><sp/><sp/>//<sp/>创建<sp/>Win32<sp/>绘图窗口（默认支持窗口双击消息）（跳过了 EasyX<sp/>原生窗口创建的步骤）
<sp/><sp/><sp/>//<sp/>w,<sp/>h<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口大小
<sp/>//<sp/>flag<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口样式标识
<sp/><sp/>//<sp/>lpszWndTitle<sp/><sp/><sp/><sp/><sp/>窗口标题
<sp/><sp/>//<sp/>WindowProcess<sp/><sp/><sp/><sp/>窗口消息处理函数的指针，为空表示使用默认消息处理函数（详见头文件中“窗口消息处理函数规范”）
<sp/>//<sp/>hParent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>父窗口句柄，为空则表示该窗口独立存在（若填写，该窗口将成为模态窗口）
<sp/><sp/><sp/><sp/>//
<sp/>//<sp/>注：若创建大量绘图窗口，请适量添加延时，否则会导致一些问题。
<sp/><sp/><sp/>HWND<sp/>initgraph_win32(
<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/>);

<sp/><sp/><sp/><sp/>//<sp/>关闭某一绘图窗口，若句柄为<sp/>nullptr<sp/>则关闭所有绘图窗口
<sp/><sp/>void<sp/>closegraph_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置某窗口的过程函数（传入空句柄可以标识当前活动窗口）
<sp/><sp/><sp/><sp/>void<sp/>SetWndProcFunc(HWND<sp/>hWnd,<sp/>WNDPROC<sp/>WindowProcess);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的句柄
<sp/>HWND<sp/>GetHWnd_win32();

<sp/>//<sp/>结束初始化窗口
<sp/><sp/>//<sp/>阻塞，直到目标窗口被关闭
<sp/><sp/><sp/><sp/>//<sp/>若传入句柄 nullptr，则等待所有窗口关闭
<sp/><sp/>void<sp/>init_end(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置：当窗口都被销毁时，自动退出程序
<sp/><sp/>void<sp/>AutoExit();

<sp/><sp/>//<sp/>是否还存在未销毁的绘图窗口
<sp/><sp/><sp/>bool<sp/>isAnyWindow();

<sp/><sp/><sp/>//<sp/>判断一窗口是否还存在（不含已被关闭的窗口）
<sp/><sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isAliveWindow(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取某窗口的图像指针
<sp/><sp/><sp/>IMAGE*<sp/>GetWindowImage(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>获取窗口画布指针
<sp/><sp/><sp/><sp/>Canvas*<sp/>GetWindowCanvas(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>绑定窗口画布指针
<sp/><sp/><sp/><sp/>//<sp/>绑定后，使用画布绘图时将自动开启任务，无需用户开启，但不会自动刷新屏幕
<sp/><sp/>//<sp/>绑定画布后，如在外部操作画布，则必须先启动窗口任务
<sp/>void<sp/>BindWindowCanvas(Canvas*<sp/>pCanvas,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>将绘制在 EasyX<sp/>中的内容显示到目标窗口上（任意窗口）
<sp/><sp/><sp/><sp/>void<sp/>FlushDrawingToWnd(IMAGE*<sp/>pImg,<sp/>HWND<sp/>hWnd);

<sp/><sp/><sp/>//<sp/>阻塞等待绘图任务完成
<sp/>//<sp/>如果传入句柄，则只有该句柄窗口是活动窗口时才等待
<sp/><sp/>void<sp/>WaitForTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的详细信息
<sp/><sp/>EasyWindow<sp/>GetWorkingWindow();

<sp/><sp/><sp/><sp/>//<sp/>等待当前任务完成并设置活动窗口，返回是否设置成功
<sp/>bool<sp/>SetWorkingWindow(HWND<sp/>hWnd);

<sp/>//<sp/>设置加速绘制跳过多少像素点
<sp/><sp/><sp/>//<sp/>此加速效果是有损的，加速效果与跳过的像素点数正相关。
<sp/><sp/>void<sp/>QuickDraw(UINT<sp/>nSkipPixels,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>获取全局绘制模式
<sp/><sp/>DrawMode<sp/>GetDrawMode();

<sp/><sp/><sp/>//<sp/>设置全局绘制模式
<sp/><sp/><sp/>void<sp/>SetDrawMode(DrawMode<sp/>mode);

<sp/><sp/>//<sp/>强制重绘绘图窗口（在<sp/>WM_PAINT<sp/>消息内绘图不需要使用此函数）
<sp/><sp/><sp/>void<sp/>EnforceRedraw(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>为当前活动窗口启动任务，返回是否启动成功（若已在任务中也返回 true）
<sp/>//<sp/>调用 EasyX<sp/>函数进行绘图或获取消息时，都应该先启动任务再进行调用。
<sp/>bool<sp/>BeginTask();

<sp/>//<sp/>终止当前任务，（可选）输出绘图缓冲
<sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/>//<sp/>判断当前是否有任务在进行
<sp/><sp/><sp/>//<sp/>若传入句柄，则额外判断它是否为活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isInTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>判断某窗口的大小是否改变
<sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_window_1a071c67fa394f2b000301927684d11b83" kindref="member">isForegroundWindow</ref>();</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExMessage<sp/><ref refid="class_hi_easy_x_1_1_window_1a5bfee049a6182fca21b91319b58c3b40" kindref="member">Get_Message</ref>(BYTE<sp/>filter<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_window_1a5bfee049a6182fca21b91319b58c3b40" kindref="member">Get_Message</ref>(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_window_1a35cd9c53aa78567ff0534043959ca379" kindref="member">Peek_Message</ref>(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>removemsg<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hi_easy_x_1_1_window_1a7632803e146c97d92a21bf5fafe6dbd0" kindref="member">Flush_Message</ref>(BYTE<sp/>filter<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>创建<sp/>Win32<sp/>绘图窗口（默认支持窗口双击消息）（跳过了 EasyX<sp/>原生窗口创建的步骤）</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>w,<sp/>h<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口大小</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>flag<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>窗口样式标识</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lpszWndTitle<sp/><sp/><sp/><sp/><sp/>窗口标题 <sp/><sp/>//<sp/>WindowProcess<sp/><sp/><sp/><sp/>窗口消息处理函数的指针，为空表示使用默认消息处理函数（详见头文件中“窗口消息处理函数规范”）
<sp/>//<sp/>hParent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>父窗口句柄，为空则表示该窗口独立存在（若填写，该窗口将成为模态窗口）
<sp/><sp/><sp/><sp/>//
<sp/>//<sp/>注：若创建大量绘图窗口，请适量添加延时，否则会导致一些问题。
<sp/><sp/><sp/>HWND<sp/>initgraph_win32(
<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>w<sp/>=<sp/>640,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>h<sp/>=<sp/>480,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flag<sp/>=<sp/>EW_NORMAL,
<sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L&quot;&quot;,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/>nullptr,
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/>nullptr
<sp/>);

<sp/><sp/><sp/><sp/>//<sp/>关闭某一绘图窗口，若句柄为<sp/>nullptr<sp/>则关闭所有绘图窗口
<sp/><sp/>void<sp/>closegraph_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置某窗口的过程函数（传入空句柄可以标识当前活动窗口）
<sp/><sp/><sp/><sp/>void<sp/>SetWndProcFunc(HWND<sp/>hWnd,<sp/>WNDPROC<sp/>WindowProcess);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的句柄
<sp/>HWND<sp/>GetHWnd_win32();

<sp/>//<sp/>结束初始化窗口
<sp/><sp/>//<sp/>阻塞，直到目标窗口被关闭
<sp/><sp/><sp/><sp/>//<sp/>若传入句柄 nullptr，则等待所有窗口关闭
<sp/><sp/>void<sp/>init_end(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置：当窗口都被销毁时，自动退出程序
<sp/><sp/>void<sp/>AutoExit();

<sp/><sp/>//<sp/>是否还存在未销毁的绘图窗口
<sp/><sp/><sp/>bool<sp/>isAnyWindow();

<sp/><sp/><sp/>//<sp/>判断一窗口是否还存在（不含已被关闭的窗口）
<sp/><sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isAliveWindow(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取某窗口的图像指针
<sp/><sp/><sp/>IMAGE*<sp/>GetWindowImage(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>获取窗口画布指针
<sp/><sp/><sp/><sp/>Canvas*<sp/>GetWindowCanvas(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>绑定窗口画布指针
<sp/><sp/><sp/><sp/>//<sp/>绑定后，使用画布绘图时将自动开启任务，无需用户开启，但不会自动刷新屏幕
<sp/><sp/>//<sp/>绑定画布后，如在外部操作画布，则必须先启动窗口任务
<sp/>void<sp/>BindWindowCanvas(Canvas*<sp/>pCanvas,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>将绘制在 EasyX<sp/>中的内容显示到目标窗口上（任意窗口）
<sp/><sp/><sp/><sp/>void<sp/>FlushDrawingToWnd(IMAGE*<sp/>pImg,<sp/>HWND<sp/>hWnd);

<sp/><sp/><sp/>//<sp/>阻塞等待绘图任务完成
<sp/>//<sp/>如果传入句柄，则只有该句柄窗口是活动窗口时才等待
<sp/><sp/>void<sp/>WaitForTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的详细信息
<sp/><sp/>EasyWindow<sp/>GetWorkingWindow();

<sp/><sp/><sp/><sp/>//<sp/>等待当前任务完成并设置活动窗口，返回是否设置成功
<sp/>bool<sp/>SetWorkingWindow(HWND<sp/>hWnd);

<sp/>//<sp/>设置加速绘制跳过多少像素点
<sp/><sp/><sp/>//<sp/>此加速效果是有损的，加速效果与跳过的像素点数正相关。
<sp/><sp/>void<sp/>QuickDraw(UINT<sp/>nSkipPixels,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>获取全局绘制模式
<sp/><sp/>DrawMode<sp/>GetDrawMode();

<sp/><sp/><sp/>//<sp/>设置全局绘制模式
<sp/><sp/><sp/>void<sp/>SetDrawMode(DrawMode<sp/>mode);

<sp/><sp/>//<sp/>强制重绘绘图窗口（在<sp/>WM_PAINT<sp/>消息内绘图不需要使用此函数）
<sp/><sp/><sp/>void<sp/>EnforceRedraw(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>为当前活动窗口启动任务，返回是否启动成功（若已在任务中也返回 true）
<sp/>//<sp/>调用 EasyX<sp/>函数进行绘图或获取消息时，都应该先启动任务再进行调用。
<sp/>bool<sp/>BeginTask();

<sp/>//<sp/>终止当前任务，（可选）输出绘图缓冲
<sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/>//<sp/>判断当前是否有任务在进行
<sp/><sp/><sp/>//<sp/>若传入句柄，则额外判断它是否为活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isInTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>判断某窗口的大小是否改变
<sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>WindowProcess<sp/><sp/><sp/><sp/>窗口消息处理函数的指针，为空表示使用默认消息处理函数（详见头文件中“窗口消息处理函数规范”）</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hParent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>父窗口句柄，为空则表示该窗口独立存在（若填写，该窗口将成为模态窗口）</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>注：若创建大量绘图窗口，请适量添加延时，否则会导致一些问题。</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>HWND<sp/><ref refid="namespace_hi_easy_x_1a39a857bd99bbe509b37dedee8f290868" kindref="member">initgraph_win32</ref>(</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w<sp/>=<sp/>640,</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h<sp/>=<sp/>480,</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag<sp/>=<sp/><ref refid="_hi_window_8h_1aa08e357fa976894b15d6f5964abe597d" kindref="member">EW_NORMAL</ref>,</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCTSTR<sp/>lpszWndTitle<sp/>=<sp/>L</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WNDPROC<sp/>WindowProcess<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>hParent<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>关闭某一绘图窗口，若句柄为<sp/>nullptr<sp/>则关闭所有绘图窗口 <sp/><sp/>void<sp/>closegraph_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置某窗口的过程函数（传入空句柄可以标识当前活动窗口）
<sp/><sp/><sp/><sp/>void<sp/>SetWndProcFunc(HWND<sp/>hWnd,<sp/>WNDPROC<sp/>WindowProcess);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的句柄
<sp/>HWND<sp/>GetHWnd_win32();

<sp/>//<sp/>结束初始化窗口
<sp/><sp/>//<sp/>阻塞，直到目标窗口被关闭
<sp/><sp/><sp/><sp/>//<sp/>若传入句柄 nullptr，则等待所有窗口关闭
<sp/><sp/>void<sp/>init_end(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置：当窗口都被销毁时，自动退出程序
<sp/><sp/>void<sp/>AutoExit();

<sp/><sp/>//<sp/>是否还存在未销毁的绘图窗口
<sp/><sp/><sp/>bool<sp/>isAnyWindow();

<sp/><sp/><sp/>//<sp/>判断一窗口是否还存在（不含已被关闭的窗口）
<sp/><sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isAliveWindow(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取某窗口的图像指针
<sp/><sp/><sp/>IMAGE*<sp/>GetWindowImage(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>获取窗口画布指针
<sp/><sp/><sp/><sp/>Canvas*<sp/>GetWindowCanvas(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>绑定窗口画布指针
<sp/><sp/><sp/><sp/>//<sp/>绑定后，使用画布绘图时将自动开启任务，无需用户开启，但不会自动刷新屏幕
<sp/><sp/>//<sp/>绑定画布后，如在外部操作画布，则必须先启动窗口任务
<sp/>void<sp/>BindWindowCanvas(Canvas*<sp/>pCanvas,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>将绘制在 EasyX<sp/>中的内容显示到目标窗口上（任意窗口）
<sp/><sp/><sp/><sp/>void<sp/>FlushDrawingToWnd(IMAGE*<sp/>pImg,<sp/>HWND<sp/>hWnd);

<sp/><sp/><sp/>//<sp/>阻塞等待绘图任务完成
<sp/>//<sp/>如果传入句柄，则只有该句柄窗口是活动窗口时才等待
<sp/><sp/>void<sp/>WaitForTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的详细信息
<sp/><sp/>EasyWindow<sp/>GetWorkingWindow();

<sp/><sp/><sp/><sp/>//<sp/>等待当前任务完成并设置活动窗口，返回是否设置成功
<sp/>bool<sp/>SetWorkingWindow(HWND<sp/>hWnd);

<sp/>//<sp/>设置加速绘制跳过多少像素点
<sp/><sp/><sp/>//<sp/>此加速效果是有损的，加速效果与跳过的像素点数正相关。
<sp/><sp/>void<sp/>QuickDraw(UINT<sp/>nSkipPixels,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>获取全局绘制模式
<sp/><sp/>DrawMode<sp/>GetDrawMode();

<sp/><sp/><sp/>//<sp/>设置全局绘制模式
<sp/><sp/><sp/>void<sp/>SetDrawMode(DrawMode<sp/>mode);

<sp/><sp/>//<sp/>强制重绘绘图窗口（在<sp/>WM_PAINT<sp/>消息内绘图不需要使用此函数）
<sp/><sp/><sp/>void<sp/>EnforceRedraw(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>为当前活动窗口启动任务，返回是否启动成功（若已在任务中也返回 true）
<sp/>//<sp/>调用 EasyX<sp/>函数进行绘图或获取消息时，都应该先启动任务再进行调用。
<sp/>bool<sp/>BeginTask();

<sp/>//<sp/>终止当前任务，（可选）输出绘图缓冲
<sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/>//<sp/>判断当前是否有任务在进行
<sp/><sp/><sp/>//<sp/>若传入句柄，则额外判断它是否为活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isInTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>判断某窗口的大小是否改变
<sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_hi_easy_x_1a14d43cb89d29b6e59ee49bb47f07f01d" kindref="member">closegraph_win32</ref>(HWND<sp/>hWnd<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>设置某窗口的过程函数（传入空句柄可以标识当前活动窗口）</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_hi_easy_x_1a2f9ef900492c7d6a35545207973d4d39" kindref="member">SetWndProcFunc</ref>(HWND<sp/>hWnd,<sp/>WNDPROC<sp/>WindowProcess);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>得到当前绘图窗口的句柄 <sp/>HWND<sp/>GetHWnd_win32();

<sp/>//<sp/>结束初始化窗口
<sp/><sp/>//<sp/>阻塞，直到目标窗口被关闭
<sp/><sp/><sp/><sp/>//<sp/>若传入句柄 nullptr，则等待所有窗口关闭
<sp/><sp/>void<sp/>init_end(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置：当窗口都被销毁时，自动退出程序
<sp/><sp/>void<sp/>AutoExit();

<sp/><sp/>//<sp/>是否还存在未销毁的绘图窗口
<sp/><sp/><sp/>bool<sp/>isAnyWindow();

<sp/><sp/><sp/>//<sp/>判断一窗口是否还存在（不含已被关闭的窗口）
<sp/><sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isAliveWindow(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取某窗口的图像指针
<sp/><sp/><sp/>IMAGE*<sp/>GetWindowImage(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>获取窗口画布指针
<sp/><sp/><sp/><sp/>Canvas*<sp/>GetWindowCanvas(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>绑定窗口画布指针
<sp/><sp/><sp/><sp/>//<sp/>绑定后，使用画布绘图时将自动开启任务，无需用户开启，但不会自动刷新屏幕
<sp/><sp/>//<sp/>绑定画布后，如在外部操作画布，则必须先启动窗口任务
<sp/>void<sp/>BindWindowCanvas(Canvas*<sp/>pCanvas,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>将绘制在 EasyX<sp/>中的内容显示到目标窗口上（任意窗口）
<sp/><sp/><sp/><sp/>void<sp/>FlushDrawingToWnd(IMAGE*<sp/>pImg,<sp/>HWND<sp/>hWnd);

<sp/><sp/><sp/>//<sp/>阻塞等待绘图任务完成
<sp/>//<sp/>如果传入句柄，则只有该句柄窗口是活动窗口时才等待
<sp/><sp/>void<sp/>WaitForTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的详细信息
<sp/><sp/>EasyWindow<sp/>GetWorkingWindow();

<sp/><sp/><sp/><sp/>//<sp/>等待当前任务完成并设置活动窗口，返回是否设置成功
<sp/>bool<sp/>SetWorkingWindow(HWND<sp/>hWnd);

<sp/>//<sp/>设置加速绘制跳过多少像素点
<sp/><sp/><sp/>//<sp/>此加速效果是有损的，加速效果与跳过的像素点数正相关。
<sp/><sp/>void<sp/>QuickDraw(UINT<sp/>nSkipPixels,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>获取全局绘制模式
<sp/><sp/>DrawMode<sp/>GetDrawMode();

<sp/><sp/><sp/>//<sp/>设置全局绘制模式
<sp/><sp/><sp/>void<sp/>SetDrawMode(DrawMode<sp/>mode);

<sp/><sp/>//<sp/>强制重绘绘图窗口（在<sp/>WM_PAINT<sp/>消息内绘图不需要使用此函数）
<sp/><sp/><sp/>void<sp/>EnforceRedraw(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>为当前活动窗口启动任务，返回是否启动成功（若已在任务中也返回 true）
<sp/>//<sp/>调用 EasyX<sp/>函数进行绘图或获取消息时，都应该先启动任务再进行调用。
<sp/>bool<sp/>BeginTask();

<sp/>//<sp/>终止当前任务，（可选）输出绘图缓冲
<sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/>//<sp/>判断当前是否有任务在进行
<sp/><sp/><sp/>//<sp/>若传入句柄，则额外判断它是否为活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isInTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>判断某窗口的大小是否改变
<sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>HWND<sp/><ref refid="namespace_hi_easy_x_1a1c54c28e01a5009c735aa12dc8cad59c" kindref="member">GetHWnd_win32</ref>();</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>结束初始化窗口 <sp/><sp/>//<sp/>阻塞，直到目标窗口被关闭
<sp/><sp/><sp/><sp/>//<sp/>若传入句柄 nullptr，则等待所有窗口关闭
<sp/><sp/>void<sp/>init_end(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置：当窗口都被销毁时，自动退出程序
<sp/><sp/>void<sp/>AutoExit();

<sp/><sp/>//<sp/>是否还存在未销毁的绘图窗口
<sp/><sp/><sp/>bool<sp/>isAnyWindow();

<sp/><sp/><sp/>//<sp/>判断一窗口是否还存在（不含已被关闭的窗口）
<sp/><sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isAliveWindow(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取某窗口的图像指针
<sp/><sp/><sp/>IMAGE*<sp/>GetWindowImage(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>获取窗口画布指针
<sp/><sp/><sp/><sp/>Canvas*<sp/>GetWindowCanvas(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>绑定窗口画布指针
<sp/><sp/><sp/><sp/>//<sp/>绑定后，使用画布绘图时将自动开启任务，无需用户开启，但不会自动刷新屏幕
<sp/><sp/>//<sp/>绑定画布后，如在外部操作画布，则必须先启动窗口任务
<sp/>void<sp/>BindWindowCanvas(Canvas*<sp/>pCanvas,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>将绘制在 EasyX<sp/>中的内容显示到目标窗口上（任意窗口）
<sp/><sp/><sp/><sp/>void<sp/>FlushDrawingToWnd(IMAGE*<sp/>pImg,<sp/>HWND<sp/>hWnd);

<sp/><sp/><sp/>//<sp/>阻塞等待绘图任务完成
<sp/>//<sp/>如果传入句柄，则只有该句柄窗口是活动窗口时才等待
<sp/><sp/>void<sp/>WaitForTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的详细信息
<sp/><sp/>EasyWindow<sp/>GetWorkingWindow();

<sp/><sp/><sp/><sp/>//<sp/>等待当前任务完成并设置活动窗口，返回是否设置成功
<sp/>bool<sp/>SetWorkingWindow(HWND<sp/>hWnd);

<sp/>//<sp/>设置加速绘制跳过多少像素点
<sp/><sp/><sp/>//<sp/>此加速效果是有损的，加速效果与跳过的像素点数正相关。
<sp/><sp/>void<sp/>QuickDraw(UINT<sp/>nSkipPixels,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>获取全局绘制模式
<sp/><sp/>DrawMode<sp/>GetDrawMode();

<sp/><sp/><sp/>//<sp/>设置全局绘制模式
<sp/><sp/><sp/>void<sp/>SetDrawMode(DrawMode<sp/>mode);

<sp/><sp/>//<sp/>强制重绘绘图窗口（在<sp/>WM_PAINT<sp/>消息内绘图不需要使用此函数）
<sp/><sp/><sp/>void<sp/>EnforceRedraw(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>为当前活动窗口启动任务，返回是否启动成功（若已在任务中也返回 true）
<sp/>//<sp/>调用 EasyX<sp/>函数进行绘图或获取消息时，都应该先启动任务再进行调用。
<sp/>bool<sp/>BeginTask();

<sp/>//<sp/>终止当前任务，（可选）输出绘图缓冲
<sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/>//<sp/>判断当前是否有任务在进行
<sp/><sp/><sp/>//<sp/>若传入句柄，则额外判断它是否为活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isInTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>判断某窗口的大小是否改变
<sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>阻塞，直到目标窗口被关闭 <sp/><sp/><sp/><sp/>//<sp/>若传入句柄 nullptr，则等待所有窗口关闭
<sp/><sp/>void<sp/>init_end(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置：当窗口都被销毁时，自动退出程序
<sp/><sp/>void<sp/>AutoExit();

<sp/><sp/>//<sp/>是否还存在未销毁的绘图窗口
<sp/><sp/><sp/>bool<sp/>isAnyWindow();

<sp/><sp/><sp/>//<sp/>判断一窗口是否还存在（不含已被关闭的窗口）
<sp/><sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isAliveWindow(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取某窗口的图像指针
<sp/><sp/><sp/>IMAGE*<sp/>GetWindowImage(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>获取窗口画布指针
<sp/><sp/><sp/><sp/>Canvas*<sp/>GetWindowCanvas(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>绑定窗口画布指针
<sp/><sp/><sp/><sp/>//<sp/>绑定后，使用画布绘图时将自动开启任务，无需用户开启，但不会自动刷新屏幕
<sp/><sp/>//<sp/>绑定画布后，如在外部操作画布，则必须先启动窗口任务
<sp/>void<sp/>BindWindowCanvas(Canvas*<sp/>pCanvas,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>将绘制在 EasyX<sp/>中的内容显示到目标窗口上（任意窗口）
<sp/><sp/><sp/><sp/>void<sp/>FlushDrawingToWnd(IMAGE*<sp/>pImg,<sp/>HWND<sp/>hWnd);

<sp/><sp/><sp/>//<sp/>阻塞等待绘图任务完成
<sp/>//<sp/>如果传入句柄，则只有该句柄窗口是活动窗口时才等待
<sp/><sp/>void<sp/>WaitForTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的详细信息
<sp/><sp/>EasyWindow<sp/>GetWorkingWindow();

<sp/><sp/><sp/><sp/>//<sp/>等待当前任务完成并设置活动窗口，返回是否设置成功
<sp/>bool<sp/>SetWorkingWindow(HWND<sp/>hWnd);

<sp/>//<sp/>设置加速绘制跳过多少像素点
<sp/><sp/><sp/>//<sp/>此加速效果是有损的，加速效果与跳过的像素点数正相关。
<sp/><sp/>void<sp/>QuickDraw(UINT<sp/>nSkipPixels,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>获取全局绘制模式
<sp/><sp/>DrawMode<sp/>GetDrawMode();

<sp/><sp/><sp/>//<sp/>设置全局绘制模式
<sp/><sp/><sp/>void<sp/>SetDrawMode(DrawMode<sp/>mode);

<sp/><sp/>//<sp/>强制重绘绘图窗口（在<sp/>WM_PAINT<sp/>消息内绘图不需要使用此函数）
<sp/><sp/><sp/>void<sp/>EnforceRedraw(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>为当前活动窗口启动任务，返回是否启动成功（若已在任务中也返回 true）
<sp/>//<sp/>调用 EasyX<sp/>函数进行绘图或获取消息时，都应该先启动任务再进行调用。
<sp/>bool<sp/>BeginTask();

<sp/>//<sp/>终止当前任务，（可选）输出绘图缓冲
<sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/>//<sp/>判断当前是否有任务在进行
<sp/><sp/><sp/>//<sp/>若传入句柄，则额外判断它是否为活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isInTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>判断某窗口的大小是否改变
<sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>若传入句柄 nullptr，则等待所有窗口关闭 <sp/><sp/>void<sp/>init_end(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置：当窗口都被销毁时，自动退出程序
<sp/><sp/>void<sp/>AutoExit();

<sp/><sp/>//<sp/>是否还存在未销毁的绘图窗口
<sp/><sp/><sp/>bool<sp/>isAnyWindow();

<sp/><sp/><sp/>//<sp/>判断一窗口是否还存在（不含已被关闭的窗口）
<sp/><sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isAliveWindow(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取某窗口的图像指针
<sp/><sp/><sp/>IMAGE*<sp/>GetWindowImage(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>获取窗口画布指针
<sp/><sp/><sp/><sp/>Canvas*<sp/>GetWindowCanvas(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>绑定窗口画布指针
<sp/><sp/><sp/><sp/>//<sp/>绑定后，使用画布绘图时将自动开启任务，无需用户开启，但不会自动刷新屏幕
<sp/><sp/>//<sp/>绑定画布后，如在外部操作画布，则必须先启动窗口任务
<sp/>void<sp/>BindWindowCanvas(Canvas*<sp/>pCanvas,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>将绘制在 EasyX<sp/>中的内容显示到目标窗口上（任意窗口）
<sp/><sp/><sp/><sp/>void<sp/>FlushDrawingToWnd(IMAGE*<sp/>pImg,<sp/>HWND<sp/>hWnd);

<sp/><sp/><sp/>//<sp/>阻塞等待绘图任务完成
<sp/>//<sp/>如果传入句柄，则只有该句柄窗口是活动窗口时才等待
<sp/><sp/>void<sp/>WaitForTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的详细信息
<sp/><sp/>EasyWindow<sp/>GetWorkingWindow();

<sp/><sp/><sp/><sp/>//<sp/>等待当前任务完成并设置活动窗口，返回是否设置成功
<sp/>bool<sp/>SetWorkingWindow(HWND<sp/>hWnd);

<sp/>//<sp/>设置加速绘制跳过多少像素点
<sp/><sp/><sp/>//<sp/>此加速效果是有损的，加速效果与跳过的像素点数正相关。
<sp/><sp/>void<sp/>QuickDraw(UINT<sp/>nSkipPixels,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>获取全局绘制模式
<sp/><sp/>DrawMode<sp/>GetDrawMode();

<sp/><sp/><sp/>//<sp/>设置全局绘制模式
<sp/><sp/><sp/>void<sp/>SetDrawMode(DrawMode<sp/>mode);

<sp/><sp/>//<sp/>强制重绘绘图窗口（在<sp/>WM_PAINT<sp/>消息内绘图不需要使用此函数）
<sp/><sp/><sp/>void<sp/>EnforceRedraw(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>为当前活动窗口启动任务，返回是否启动成功（若已在任务中也返回 true）
<sp/>//<sp/>调用 EasyX<sp/>函数进行绘图或获取消息时，都应该先启动任务再进行调用。
<sp/>bool<sp/>BeginTask();

<sp/>//<sp/>终止当前任务，（可选）输出绘图缓冲
<sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/>//<sp/>判断当前是否有任务在进行
<sp/><sp/><sp/>//<sp/>若传入句柄，则额外判断它是否为活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isInTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>判断某窗口的大小是否改变
<sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_hi_easy_x_1a46e006040fc59669f3eaa4887ce3c5cf" kindref="member">init_end</ref>(HWND<sp/>hWnd<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>设置：当窗口都被销毁时，自动退出程序 <sp/><sp/>void<sp/>AutoExit();

<sp/><sp/>//<sp/>是否还存在未销毁的绘图窗口
<sp/><sp/><sp/>bool<sp/>isAnyWindow();

<sp/><sp/><sp/>//<sp/>判断一窗口是否还存在（不含已被关闭的窗口）
<sp/><sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isAliveWindow(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取某窗口的图像指针
<sp/><sp/><sp/>IMAGE*<sp/>GetWindowImage(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>获取窗口画布指针
<sp/><sp/><sp/><sp/>Canvas*<sp/>GetWindowCanvas(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>绑定窗口画布指针
<sp/><sp/><sp/><sp/>//<sp/>绑定后，使用画布绘图时将自动开启任务，无需用户开启，但不会自动刷新屏幕
<sp/><sp/>//<sp/>绑定画布后，如在外部操作画布，则必须先启动窗口任务
<sp/>void<sp/>BindWindowCanvas(Canvas*<sp/>pCanvas,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>将绘制在 EasyX<sp/>中的内容显示到目标窗口上（任意窗口）
<sp/><sp/><sp/><sp/>void<sp/>FlushDrawingToWnd(IMAGE*<sp/>pImg,<sp/>HWND<sp/>hWnd);

<sp/><sp/><sp/>//<sp/>阻塞等待绘图任务完成
<sp/>//<sp/>如果传入句柄，则只有该句柄窗口是活动窗口时才等待
<sp/><sp/>void<sp/>WaitForTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的详细信息
<sp/><sp/>EasyWindow<sp/>GetWorkingWindow();

<sp/><sp/><sp/><sp/>//<sp/>等待当前任务完成并设置活动窗口，返回是否设置成功
<sp/>bool<sp/>SetWorkingWindow(HWND<sp/>hWnd);

<sp/>//<sp/>设置加速绘制跳过多少像素点
<sp/><sp/><sp/>//<sp/>此加速效果是有损的，加速效果与跳过的像素点数正相关。
<sp/><sp/>void<sp/>QuickDraw(UINT<sp/>nSkipPixels,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>获取全局绘制模式
<sp/><sp/>DrawMode<sp/>GetDrawMode();

<sp/><sp/><sp/>//<sp/>设置全局绘制模式
<sp/><sp/><sp/>void<sp/>SetDrawMode(DrawMode<sp/>mode);

<sp/><sp/>//<sp/>强制重绘绘图窗口（在<sp/>WM_PAINT<sp/>消息内绘图不需要使用此函数）
<sp/><sp/><sp/>void<sp/>EnforceRedraw(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>为当前活动窗口启动任务，返回是否启动成功（若已在任务中也返回 true）
<sp/>//<sp/>调用 EasyX<sp/>函数进行绘图或获取消息时，都应该先启动任务再进行调用。
<sp/>bool<sp/>BeginTask();

<sp/>//<sp/>终止当前任务，（可选）输出绘图缓冲
<sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/>//<sp/>判断当前是否有任务在进行
<sp/><sp/><sp/>//<sp/>若传入句柄，则额外判断它是否为活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isInTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>判断某窗口的大小是否改变
<sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_hi_easy_x_1a28ee4b16feccc01e9cb795b384517217" kindref="member">AutoExit</ref>();</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>是否还存在未销毁的绘图窗口 <sp/><sp/><sp/>bool<sp/>isAnyWindow();

<sp/><sp/><sp/>//<sp/>判断一窗口是否还存在（不含已被关闭的窗口）
<sp/><sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isAliveWindow(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取某窗口的图像指针
<sp/><sp/><sp/>IMAGE*<sp/>GetWindowImage(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>获取窗口画布指针
<sp/><sp/><sp/><sp/>Canvas*<sp/>GetWindowCanvas(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>绑定窗口画布指针
<sp/><sp/><sp/><sp/>//<sp/>绑定后，使用画布绘图时将自动开启任务，无需用户开启，但不会自动刷新屏幕
<sp/><sp/>//<sp/>绑定画布后，如在外部操作画布，则必须先启动窗口任务
<sp/>void<sp/>BindWindowCanvas(Canvas*<sp/>pCanvas,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>将绘制在 EasyX<sp/>中的内容显示到目标窗口上（任意窗口）
<sp/><sp/><sp/><sp/>void<sp/>FlushDrawingToWnd(IMAGE*<sp/>pImg,<sp/>HWND<sp/>hWnd);

<sp/><sp/><sp/>//<sp/>阻塞等待绘图任务完成
<sp/>//<sp/>如果传入句柄，则只有该句柄窗口是活动窗口时才等待
<sp/><sp/>void<sp/>WaitForTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的详细信息
<sp/><sp/>EasyWindow<sp/>GetWorkingWindow();

<sp/><sp/><sp/><sp/>//<sp/>等待当前任务完成并设置活动窗口，返回是否设置成功
<sp/>bool<sp/>SetWorkingWindow(HWND<sp/>hWnd);

<sp/>//<sp/>设置加速绘制跳过多少像素点
<sp/><sp/><sp/>//<sp/>此加速效果是有损的，加速效果与跳过的像素点数正相关。
<sp/><sp/>void<sp/>QuickDraw(UINT<sp/>nSkipPixels,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>获取全局绘制模式
<sp/><sp/>DrawMode<sp/>GetDrawMode();

<sp/><sp/><sp/>//<sp/>设置全局绘制模式
<sp/><sp/><sp/>void<sp/>SetDrawMode(DrawMode<sp/>mode);

<sp/><sp/>//<sp/>强制重绘绘图窗口（在<sp/>WM_PAINT<sp/>消息内绘图不需要使用此函数）
<sp/><sp/><sp/>void<sp/>EnforceRedraw(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>为当前活动窗口启动任务，返回是否启动成功（若已在任务中也返回 true）
<sp/>//<sp/>调用 EasyX<sp/>函数进行绘图或获取消息时，都应该先启动任务再进行调用。
<sp/>bool<sp/>BeginTask();

<sp/>//<sp/>终止当前任务，（可选）输出绘图缓冲
<sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/>//<sp/>判断当前是否有任务在进行
<sp/><sp/><sp/>//<sp/>若传入句柄，则额外判断它是否为活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isInTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>判断某窗口的大小是否改变
<sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespace_hi_easy_x_1a319bb50ddd51052f27a797d2c835c7b1" kindref="member">isAnyWindow</ref>();</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>判断一窗口是否还存在（不含已被关闭的窗口）</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>传入空句柄可以标识当前活动窗口 <sp/><sp/><sp/><sp/>bool<sp/>isAliveWindow(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取某窗口的图像指针
<sp/><sp/><sp/>IMAGE*<sp/>GetWindowImage(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>获取窗口画布指针
<sp/><sp/><sp/><sp/>Canvas*<sp/>GetWindowCanvas(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>绑定窗口画布指针
<sp/><sp/><sp/><sp/>//<sp/>绑定后，使用画布绘图时将自动开启任务，无需用户开启，但不会自动刷新屏幕
<sp/><sp/>//<sp/>绑定画布后，如在外部操作画布，则必须先启动窗口任务
<sp/>void<sp/>BindWindowCanvas(Canvas*<sp/>pCanvas,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>将绘制在 EasyX<sp/>中的内容显示到目标窗口上（任意窗口）
<sp/><sp/><sp/><sp/>void<sp/>FlushDrawingToWnd(IMAGE*<sp/>pImg,<sp/>HWND<sp/>hWnd);

<sp/><sp/><sp/>//<sp/>阻塞等待绘图任务完成
<sp/>//<sp/>如果传入句柄，则只有该句柄窗口是活动窗口时才等待
<sp/><sp/>void<sp/>WaitForTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的详细信息
<sp/><sp/>EasyWindow<sp/>GetWorkingWindow();

<sp/><sp/><sp/><sp/>//<sp/>等待当前任务完成并设置活动窗口，返回是否设置成功
<sp/>bool<sp/>SetWorkingWindow(HWND<sp/>hWnd);

<sp/>//<sp/>设置加速绘制跳过多少像素点
<sp/><sp/><sp/>//<sp/>此加速效果是有损的，加速效果与跳过的像素点数正相关。
<sp/><sp/>void<sp/>QuickDraw(UINT<sp/>nSkipPixels,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>获取全局绘制模式
<sp/><sp/>DrawMode<sp/>GetDrawMode();

<sp/><sp/><sp/>//<sp/>设置全局绘制模式
<sp/><sp/><sp/>void<sp/>SetDrawMode(DrawMode<sp/>mode);

<sp/><sp/>//<sp/>强制重绘绘图窗口（在<sp/>WM_PAINT<sp/>消息内绘图不需要使用此函数）
<sp/><sp/><sp/>void<sp/>EnforceRedraw(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>为当前活动窗口启动任务，返回是否启动成功（若已在任务中也返回 true）
<sp/>//<sp/>调用 EasyX<sp/>函数进行绘图或获取消息时，都应该先启动任务再进行调用。
<sp/>bool<sp/>BeginTask();

<sp/>//<sp/>终止当前任务，（可选）输出绘图缓冲
<sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/>//<sp/>判断当前是否有任务在进行
<sp/><sp/><sp/>//<sp/>若传入句柄，则额外判断它是否为活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isInTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>判断某窗口的大小是否改变
<sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespace_hi_easy_x_1ab75e1092a2d436b351898820a8dc74d9" kindref="member">isAliveWindow</ref>(HWND<sp/>hWnd<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>获取某窗口的图像指针</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>IMAGE*<sp/><ref refid="namespace_hi_easy_x_1aef1fadd4f2841c24a1ec33326b6ba449" kindref="member">GetWindowImage</ref>(HWND<sp/>hWnd<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>获取窗口画布指针</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_hi_easy_x_1_1_canvas" kindref="compound">Canvas</ref>*<sp/><ref refid="namespace_hi_easy_x_1aa063a0ea96c7cebe8c74da824cb7ffcf" kindref="member">GetWindowCanvas</ref>(HWND<sp/>hWnd<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>绑定窗口画布指针</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>绑定后，使用画布绘图时将自动开启任务，无需用户开启，但不会自动刷新屏幕</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>绑定画布后，如在外部操作画布，则必须先启动窗口任务 <sp/>void<sp/>BindWindowCanvas(Canvas*<sp/>pCanvas,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>将绘制在 EasyX<sp/>中的内容显示到目标窗口上（任意窗口）
<sp/><sp/><sp/><sp/>void<sp/>FlushDrawingToWnd(IMAGE*<sp/>pImg,<sp/>HWND<sp/>hWnd);

<sp/><sp/><sp/>//<sp/>阻塞等待绘图任务完成
<sp/>//<sp/>如果传入句柄，则只有该句柄窗口是活动窗口时才等待
<sp/><sp/>void<sp/>WaitForTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的详细信息
<sp/><sp/>EasyWindow<sp/>GetWorkingWindow();

<sp/><sp/><sp/><sp/>//<sp/>等待当前任务完成并设置活动窗口，返回是否设置成功
<sp/>bool<sp/>SetWorkingWindow(HWND<sp/>hWnd);

<sp/>//<sp/>设置加速绘制跳过多少像素点
<sp/><sp/><sp/>//<sp/>此加速效果是有损的，加速效果与跳过的像素点数正相关。
<sp/><sp/>void<sp/>QuickDraw(UINT<sp/>nSkipPixels,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>获取全局绘制模式
<sp/><sp/>DrawMode<sp/>GetDrawMode();

<sp/><sp/><sp/>//<sp/>设置全局绘制模式
<sp/><sp/><sp/>void<sp/>SetDrawMode(DrawMode<sp/>mode);

<sp/><sp/>//<sp/>强制重绘绘图窗口（在<sp/>WM_PAINT<sp/>消息内绘图不需要使用此函数）
<sp/><sp/><sp/>void<sp/>EnforceRedraw(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>为当前活动窗口启动任务，返回是否启动成功（若已在任务中也返回 true）
<sp/>//<sp/>调用 EasyX<sp/>函数进行绘图或获取消息时，都应该先启动任务再进行调用。
<sp/>bool<sp/>BeginTask();

<sp/>//<sp/>终止当前任务，（可选）输出绘图缓冲
<sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/>//<sp/>判断当前是否有任务在进行
<sp/><sp/><sp/>//<sp/>若传入句柄，则额外判断它是否为活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isInTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>判断某窗口的大小是否改变
<sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_hi_easy_x_1a22942e051c7e8ff9a3cc97bf8d54794e" kindref="member">BindWindowCanvas</ref>(<ref refid="class_hi_easy_x_1_1_canvas" kindref="compound">Canvas</ref>*<sp/>pCanvas,<sp/>HWND<sp/>hWnd<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>将绘制在 EasyX<sp/>中的内容显示到目标窗口上（任意窗口）</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_hi_easy_x_1a563f8e51b3da33fffe4c9c21dca9d428" kindref="member">FlushDrawingToWnd</ref>(IMAGE*<sp/>pImg,<sp/>HWND<sp/>hWnd);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>阻塞等待绘图任务完成 <sp/>//<sp/>如果传入句柄，则只有该句柄窗口是活动窗口时才等待
<sp/><sp/>void<sp/>WaitForTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的详细信息
<sp/><sp/>EasyWindow<sp/>GetWorkingWindow();

<sp/><sp/><sp/><sp/>//<sp/>等待当前任务完成并设置活动窗口，返回是否设置成功
<sp/>bool<sp/>SetWorkingWindow(HWND<sp/>hWnd);

<sp/>//<sp/>设置加速绘制跳过多少像素点
<sp/><sp/><sp/>//<sp/>此加速效果是有损的，加速效果与跳过的像素点数正相关。
<sp/><sp/>void<sp/>QuickDraw(UINT<sp/>nSkipPixels,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>获取全局绘制模式
<sp/><sp/>DrawMode<sp/>GetDrawMode();

<sp/><sp/><sp/>//<sp/>设置全局绘制模式
<sp/><sp/><sp/>void<sp/>SetDrawMode(DrawMode<sp/>mode);

<sp/><sp/>//<sp/>强制重绘绘图窗口（在<sp/>WM_PAINT<sp/>消息内绘图不需要使用此函数）
<sp/><sp/><sp/>void<sp/>EnforceRedraw(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>为当前活动窗口启动任务，返回是否启动成功（若已在任务中也返回 true）
<sp/>//<sp/>调用 EasyX<sp/>函数进行绘图或获取消息时，都应该先启动任务再进行调用。
<sp/>bool<sp/>BeginTask();

<sp/>//<sp/>终止当前任务，（可选）输出绘图缓冲
<sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/>//<sp/>判断当前是否有任务在进行
<sp/><sp/><sp/>//<sp/>若传入句柄，则额外判断它是否为活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isInTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>判断某窗口的大小是否改变
<sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>如果传入句柄，则只有该句柄窗口是活动窗口时才等待 <sp/><sp/>void<sp/>WaitForTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>得到当前绘图窗口的详细信息
<sp/><sp/>EasyWindow<sp/>GetWorkingWindow();

<sp/><sp/><sp/><sp/>//<sp/>等待当前任务完成并设置活动窗口，返回是否设置成功
<sp/>bool<sp/>SetWorkingWindow(HWND<sp/>hWnd);

<sp/>//<sp/>设置加速绘制跳过多少像素点
<sp/><sp/><sp/>//<sp/>此加速效果是有损的，加速效果与跳过的像素点数正相关。
<sp/><sp/>void<sp/>QuickDraw(UINT<sp/>nSkipPixels,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>获取全局绘制模式
<sp/><sp/>DrawMode<sp/>GetDrawMode();

<sp/><sp/><sp/>//<sp/>设置全局绘制模式
<sp/><sp/><sp/>void<sp/>SetDrawMode(DrawMode<sp/>mode);

<sp/><sp/>//<sp/>强制重绘绘图窗口（在<sp/>WM_PAINT<sp/>消息内绘图不需要使用此函数）
<sp/><sp/><sp/>void<sp/>EnforceRedraw(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>为当前活动窗口启动任务，返回是否启动成功（若已在任务中也返回 true）
<sp/>//<sp/>调用 EasyX<sp/>函数进行绘图或获取消息时，都应该先启动任务再进行调用。
<sp/>bool<sp/>BeginTask();

<sp/>//<sp/>终止当前任务，（可选）输出绘图缓冲
<sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/>//<sp/>判断当前是否有任务在进行
<sp/><sp/><sp/>//<sp/>若传入句柄，则额外判断它是否为活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isInTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>判断某窗口的大小是否改变
<sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_hi_easy_x_1adb8ad6d9b9d1e044442d5985438dda1c" kindref="member">WaitForTask</ref>(HWND<sp/>hWnd<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>得到当前绘图窗口的详细信息</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_hi_easy_x_1_1_easy_window" kindref="compound">EasyWindow</ref><sp/><ref refid="namespace_hi_easy_x_1ae800610a5a5d75425ffb801404231bbb" kindref="member">GetWorkingWindow</ref>();</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>等待当前任务完成并设置活动窗口，返回是否设置成功</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespace_hi_easy_x_1abdbf556090a9b66992e10a2ce6030625" kindref="member">SetWorkingWindow</ref>(HWND<sp/>hWnd);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>设置加速绘制跳过多少像素点 <sp/><sp/><sp/>//<sp/>此加速效果是有损的，加速效果与跳过的像素点数正相关。
<sp/><sp/>void<sp/>QuickDraw(UINT<sp/>nSkipPixels,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>获取全局绘制模式
<sp/><sp/>DrawMode<sp/>GetDrawMode();

<sp/><sp/><sp/>//<sp/>设置全局绘制模式
<sp/><sp/><sp/>void<sp/>SetDrawMode(DrawMode<sp/>mode);

<sp/><sp/>//<sp/>强制重绘绘图窗口（在<sp/>WM_PAINT<sp/>消息内绘图不需要使用此函数）
<sp/><sp/><sp/>void<sp/>EnforceRedraw(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>为当前活动窗口启动任务，返回是否启动成功（若已在任务中也返回 true）
<sp/>//<sp/>调用 EasyX<sp/>函数进行绘图或获取消息时，都应该先启动任务再进行调用。
<sp/>bool<sp/>BeginTask();

<sp/>//<sp/>终止当前任务，（可选）输出绘图缓冲
<sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/>//<sp/>判断当前是否有任务在进行
<sp/><sp/><sp/>//<sp/>若传入句柄，则额外判断它是否为活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isInTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>判断某窗口的大小是否改变
<sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>此加速效果是有损的，加速效果与跳过的像素点数正相关。</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_hi_easy_x_1a29e90de4a3a2b193a80d1a56da557a92" kindref="member">QuickDraw</ref>(UINT<sp/>nSkipPixels,<sp/>HWND<sp/>hWnd<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>获取全局绘制模式</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_hi_easy_x_1aadd191826ef50747dda8a364644e7097" kindref="member">DrawMode</ref><sp/><ref refid="namespace_hi_easy_x_1aa2a189aa8623f48469fea3858ea72243" kindref="member">GetDrawMode</ref>();</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>设置全局绘制模式</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_hi_easy_x_1a4d02f8a1e56f0dddf577972bbd8d9392" kindref="member">SetDrawMode</ref>(<ref refid="namespace_hi_easy_x_1aadd191826ef50747dda8a364644e7097" kindref="member">DrawMode</ref><sp/>mode);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>强制重绘绘图窗口（在<sp/>WM_PAINT<sp/>消息内绘图不需要使用此函数）</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_hi_easy_x_1aa0c521889af1f43694a54158b4f2d209" kindref="member">EnforceRedraw</ref>(HWND<sp/>hWnd<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>为当前活动窗口启动任务，返回是否启动成功（若已在任务中也返回 true）</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>调用 EasyX<sp/>函数进行绘图或获取消息时，都应该先启动任务再进行调用。</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespace_hi_easy_x_1ad2be09f1a9241d3d9fcb8fe3f309fd9b" kindref="member">BeginTask</ref>();</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>终止当前任务，（可选）输出绘图缓冲 <sp/><sp/><sp/><sp/>void<sp/>EndTask(bool<sp/>flush<sp/>=<sp/>true);

<sp/><sp/>//<sp/>判断当前是否有任务在进行
<sp/><sp/><sp/>//<sp/>若传入句柄，则额外判断它是否为活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isInTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>判断某窗口的大小是否改变
<sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_hi_easy_x_1aa8e73888f951524c8b166f37aa5a85a3" kindref="member">EndTask</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flush<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>判断当前是否有任务在进行 <sp/><sp/><sp/>//<sp/>若传入句柄，则额外判断它是否为活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isInTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>判断某窗口的大小是否改变
<sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>若传入句柄，则额外判断它是否为活动窗口 <sp/><sp/><sp/><sp/>bool<sp/>isInTask(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>判断某窗口的大小是否改变
<sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespace_hi_easy_x_1aa19375362333b9d68879e7b88df0a4b7" kindref="member">isInTask</ref>(HWND<sp/>hWnd<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>判断某窗口的大小是否改变 <sp/>//<sp/>传入空句柄可以标识当前活动窗口
<sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>传入空句柄可以标识当前活动窗口 <sp/><sp/><sp/><sp/>bool<sp/>isWindowSizeChanged(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>为窗口创建一个托盘
<sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespace_hi_easy_x_1a633b4d6de4137de9bfc7b43f4df66260" kindref="member">isWindowSizeChanged</ref>(HWND<sp/>hWnd<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>为窗口创建一个托盘 <sp/><sp/><sp/><sp/>//<sp/>传入托盘提示文本
<sp/><sp/>//<sp/>注意：每个窗口仅能稳定占有一个托盘
<sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>传入托盘提示文本</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>注意：每个窗口仅能稳定占有一个托盘 <sp/><sp/><sp/><sp/>void<sp/>CreateTray(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口
<sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_hi_easy_x_1a768004588ac478fc4ec78fa86ad2d212" kindref="member">CreateTray</ref>(LPCTSTR<sp/>lpszTrayName,<sp/>HWND<sp/>hWnd<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>删除某窗口的托盘，传入空指针可以标识当前活动窗口 <sp/><sp/><sp/>void<sp/>DeleteTray(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>设置托盘菜单（允许在任何时候设置）
<sp/><sp/><sp/>void<sp/>SetTrayMenu(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>设置托盘菜单消息处理函数
<sp/>void<sp/>SetTrayMenuProcFunc(void(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>判断自定义程序图标的启用状态
<sp/><sp/><sp/>bool<sp/>GetCustomIconState();

<sp/><sp/><sp/><sp/>//<sp/>使用图标资源作为程序图标
<sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_hi_easy_x_1a5549e5fbc998894b219ecefd2cdb78d4" kindref="member">DeleteTray</ref>(HWND<sp/>hWnd<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>设置托盘菜单（允许在任何时候设置）</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_hi_easy_x_1ae683b24f5b07e0fde073c756104e5453" kindref="member">SetTrayMenu</ref>(HMENU<sp/>hMenu,<sp/>HWND<sp/>hWnd<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>设置托盘菜单消息处理函数</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_hi_easy_x_1aa451e61615d55f60bbcc2ec31c99f8a6" kindref="member">SetTrayMenuProcFunc</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(*pFunc)(UINT),<sp/>HWND<sp/>hWnd<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>判断自定义程序图标的启用状态</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespace_hi_easy_x_1aaade17c552443cad553fb19691dc8335" kindref="member">GetCustomIconState</ref>();</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>使用图标资源作为程序图标 <sp/><sp/>//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）
<sp/><sp/>//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标
<sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>参数传入图标资源<sp/>ID（大图标和小图标）</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>注：必须在第一次创建窗口前就调用该函数才能生效。默认情况下，程序将自绘 EasyX<sp/>程序图标 <sp/><sp/>void<sp/>SetCustomIcon(int<sp/>nIcon,<sp/>int<sp/>nIconSm);

<sp/><sp/><sp/>//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效
<sp/>//<sp/>注意：新窗口的所有样式都将被当前样式覆盖
<sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_hi_easy_x_1a17246af9b5eaf8176083d1bb31755036" kindref="member">SetCustomIcon</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nIcon,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nIconSm);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>在创建窗口前设置窗口样式，仅对此操作后首个新窗口生效</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>注意：新窗口的所有样式都将被当前样式覆盖 <sp/><sp/><sp/><sp/>void<sp/>PreSetWindowStyle(long<sp/>lStyle);

<sp/><sp/>//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效
<sp/>void<sp/>PreSetWindowPos(int<sp/>x,<sp/>int<sp/>y);

<sp/><sp/><sp/>//<sp/>设置当前窗口样式
<sp/>int<sp/>SetWindowStyle(long<sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>设置当前窗口扩展样式
<sp/><sp/><sp/>int<sp/>SetWindowExStyle(long<sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口位置
<sp/><sp/><sp/>POINT<sp/>GetWindowPos(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取窗口大小
<sp/><sp/><sp/>SIZE<sp/>GetWindowSize(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>移动窗口
<sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_hi_easy_x_1a233e933d28090253dcf2857190d9018b" kindref="member">PreSetWindowStyle</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>lStyle);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_hi_easy_x_1ad47076b9329e9b1050e1373e9d179791" kindref="member">PreSetWindowPos</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>设置当前窗口样式</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespace_hi_easy_x_1aca5460f44b6abbbffdbcea978080d2e0" kindref="member">SetWindowStyle</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>lNewStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>设置当前窗口扩展样式</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespace_hi_easy_x_1a4e2229772e327083fda1ac945815f51b" kindref="member">SetWindowExStyle</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>lNewExStyle,<sp/>HWND<sp/>hWnd<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>获取窗口位置</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>POINT<sp/><ref refid="namespace_hi_easy_x_1a551298b06fdced41937c132e903a5df1" kindref="member">GetWindowPos</ref>(HWND<sp/>hWnd<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>获取窗口大小</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>SIZE<sp/><ref refid="namespace_hi_easy_x_1a4568204d1ec8daa6d4a24f489e9e253a" kindref="member">GetWindowSize</ref>(HWND<sp/>hWnd<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>移动窗口 <sp/><sp/>void<sp/>MoveWindow(int<sp/>x,<sp/>int<sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>//<sp/>相对移动窗口
<sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_hi_easy_x_1a720782c6bf0d4421945e7b0b960d5f42" kindref="member">MoveWindow</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/>HWND<sp/>hWnd<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>相对移动窗口 <sp/><sp/><sp/><sp/>void<sp/>MoveWindowRel(int<sp/>dx,<sp/>int<sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>重设窗口大小
<sp/><sp/><sp/><sp/>void<sp/>ResizeWindow(int<sp/>w,<sp/>int<sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);


<sp/><sp/><sp/><sp/>////////////******<sp/>消息相关函数<sp/>******////////////

<sp/>////<sp/>ExMessage<sp/>式函数

<sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>ExMessage<sp/>getmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/><sp/>//<sp/>阻塞等待，直到获取到一个新消息
<sp/><sp/><sp/><sp/>void<sp/>getmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>获取一个消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>peekmessage_win32(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>bool<sp/>removemsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清除所有消息记录
<sp/><sp/>void<sp/>flushmessage_win32(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/><sp/>////<sp/>MOUSEMSG<sp/>式函数（兼容）

<sp/><sp/>//<sp/>检查是否存在鼠标消息
<sp/>bool<sp/>MouseHit_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>阻塞等待，直到获取到一个新的鼠标消息
<sp/>MOUSEMSG<sp/>GetMouseMsg_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>//<sp/>获取一个新的鼠标消息，立即返回是否获取成功
<sp/><sp/><sp/><sp/>bool<sp/>PeekMouseMsg_win32(MOUSEMSG*<sp/>pMsg,<sp/>bool<sp/>bRemoveMsg<sp/>=<sp/>true,<sp/>HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/>//<sp/>清空鼠标消息
<sp/>void<sp/>FlushMouseMsgBuffer_win32(HWND<sp/>hWnd<sp/>=<sp/>nullptr);

<sp/><sp/>////<sp/>转换

<sp/><sp/>//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage
<sp/><sp/><sp/><sp/>ExMessage<sp/>To_ExMessage(MOUSEMSG<sp/>msg);

<sp/>//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG
<sp/><sp/><sp/><sp/>MOUSEMSG<sp/>To_MouseMsg(ExMessage<sp/>msgEx);
}

////////////******<sp/>任务指令宏定义<sp/>******////////////

//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）
#define<sp/>BEGIN_TASK()\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\
<sp/><sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/>/*<sp/>此处强制要求加分号 */

//<sp/>启动一段（绘图）任务（指定目标绘图窗口）
#define<sp/>BEGIN_TASK_WND(hWnd)\
<sp/><sp/><sp/>/*<sp/>设置工作窗口时将自动等待任务 */\
<sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\
<sp/><sp/>{\
<sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\
<sp/><sp/><sp/><sp/><sp/>{(0)

//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）
#define<sp/>END_TASK()\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\
<sp/>}(0)

//<sp/>要求窗口重绘
#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_hi_easy_x_1a325db7c012fadf2793f3fd97f7ab190e" kindref="member">MoveWindowRel</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dy,<sp/>HWND<sp/>hWnd<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>重设窗口大小</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_hi_easy_x_1a8cb74a49183e10ece85a6321ead6a297" kindref="member">ResizeWindow</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/>HWND<sp/>hWnd<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>阻塞等待，直到获取到一个新消息</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>ExMessage<sp/><ref refid="namespace_hi_easy_x_1ad6e89c04f7d2348f669818bee558f251" kindref="member">getmessage_win32</ref>(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>阻塞等待，直到获取到一个新消息</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_hi_easy_x_1ad6e89c04f7d2348f669818bee558f251" kindref="member">getmessage_win32</ref>(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>获取一个消息，立即返回是否获取成功</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespace_hi_easy_x_1aeee44f2592fd20c7ed1afb147992fc43" kindref="member">peekmessage_win32</ref>(ExMessage*<sp/>msg,<sp/>BYTE<sp/>filter<sp/>=<sp/>-1,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>removemsg<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>HWND<sp/>hWnd<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>清除所有消息记录</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_hi_easy_x_1a22afa962f6630c209f3743c1eef93240" kindref="member">flushmessage_win32</ref>(BYTE<sp/>filter<sp/>=<sp/>-1,<sp/>HWND<sp/>hWnd<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>检查是否存在鼠标消息</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespace_hi_easy_x_1a54ab3d88f8cfc63af470d9f70ac667a9" kindref="member">MouseHit_win32</ref>(HWND<sp/>hWnd<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>阻塞等待，直到获取到一个新的鼠标消息</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>MOUSEMSG<sp/><ref refid="namespace_hi_easy_x_1aaa06c939dfd7628aea9fdb6bb485f264" kindref="member">GetMouseMsg_win32</ref>(HWND<sp/>hWnd<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>获取一个新的鼠标消息，立即返回是否获取成功</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespace_hi_easy_x_1a1bb16eb736f85fae74d4beb7dc7b77d4" kindref="member">PeekMouseMsg_win32</ref>(MOUSEMSG*<sp/>pMsg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bRemoveMsg<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>HWND<sp/>hWnd<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>清空鼠标消息</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_hi_easy_x_1a8deabadc5837351f0cc993002a12e61d" kindref="member">FlushMouseMsgBuffer_win32</ref>(HWND<sp/>hWnd<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MOUSEMSG<sp/>转<sp/>ExMessage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>ExMessage<sp/><ref refid="namespace_hi_easy_x_1a7a260c9691e3046c4b1a30c4cbcbc4b6" kindref="member">To_ExMessage</ref>(MOUSEMSG<sp/>msg);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ExMessage<sp/>转<sp/>MOUSEMSG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>MOUSEMSG<sp/><ref refid="namespace_hi_easy_x_1a155fe36f9caf548016c581a54ef300eb" kindref="member">To_MouseMsg</ref>(ExMessage<sp/>msgEx);</highlight></codeline>
<codeline lineno="456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="comment">//<sp/>启动一段（绘图）任务（绘制到当前绘图窗口）</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461" refid="_hi_window_8h_1ab23a70286e0ac0c9000b2279603a1d70" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BEGIN_TASK()\</highlight></codeline>
<codeline lineno="462"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::SetWorkingWindow(nullptr))\</highlight></codeline>
<codeline lineno="463"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{\</highlight></codeline>
<codeline lineno="464"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\</highlight></codeline>
<codeline lineno="465"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{(0)<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>此处强制要求加分号 */</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="comment">//<sp/>启动一段（绘图）任务（指定目标绘图窗口）</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468" refid="_hi_window_8h_1a1f391430f662d94ab71c9d502f72e86b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BEGIN_TASK_WND(hWnd)\</highlight></codeline>
<codeline lineno="469"><highlight class="preprocessor"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>设置工作窗口时将自动等待任务 */</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="470"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::SetWorkingWindow(hWnd))\</highlight></codeline>
<codeline lineno="471"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{\</highlight></codeline>
<codeline lineno="472"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(HiEasyX::BeginTask())\</highlight></codeline>
<codeline lineno="473"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="comment">//<sp/>结束一段（绘图）任务，并输出绘图缓存（须与<sp/>BEGIN_TASK<sp/>连用）</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476" refid="_hi_window_8h_1acfe8f2881bf3efdc4627b2f2d287f489" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>END_TASK()\</highlight></codeline>
<codeline lineno="477"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EndTask();\</highlight></codeline>
<codeline lineno="478"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="479"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="comment">//<sp/>要求窗口重绘 #define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()

////////////******<sp/>窗口样式宏定义<sp/>******////////////

//<sp/>是否允许某窗口改变大小
#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))

#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)

//<sp/>是否启用某窗口的系统菜单
#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))

#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)

//<sp/>是否启用当前窗口的工具栏样式
#define<sp/>EnableToolWindowStyle(state)<sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))

////////////******<sp/>键盘消息宏定义<sp/>******////////////

//<sp/>判断全局按键状态
#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)

//<sp/>判断当前活动窗口是否接受到某按键消息
#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))

////////////******<sp/>EasyX<sp/>原生函数的宏替换<sp/>******////////////

//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序
#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482" refid="_hi_window_8h_1a61051e5730386effb47800799b18fa78" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FLUSH_DRAW()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::EnforceRedraw()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="comment">//<sp/>是否允许某窗口改变大小</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487" refid="_hi_window_8h_1a07feaed93cedd3b3e3484b60ec025c54" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EnableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SIZEBOX<sp/>|<sp/>WS_MAXIMIZEBOX)<sp/>:\</highlight></codeline>
<codeline lineno="488"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SIZEBOX<sp/>&amp;<sp/>~WS_MAXIMIZEBOX))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490" refid="_hi_window_8h_1a0d110a7a9d3d85a5d3e1a2ce7955a633" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DisableResizing(hwnd,<sp/>state)<sp/><sp/><sp/><sp/>EnableResizing(hwnd,<sp/>!state)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="comment">//<sp/>是否启用某窗口的系统菜单</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493" refid="_hi_window_8h_1a9c0e47b8a17065c5528f716dcae29014" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EnableSystemMenu(hwnd,<sp/>state)<sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>|<sp/>WS_SYSMENU)<sp/>:\</highlight></codeline>
<codeline lineno="494"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowStyle(GetWindowStyle(hwnd)<sp/>&amp;<sp/>~WS_SYSMENU))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496" refid="_hi_window_8h_1abe7280b56ee37d9ebfa25a9824251348" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DisableSystemMenu(hwnd,<sp/>state)<sp/><sp/>EnableSystemMenu(hwnd,<sp/>!state)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="comment">//<sp/>是否启用当前窗口的工具栏样式</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499" refid="_hi_window_8h_1a71f27678a31970eda77c938332702a27" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EnableToolWindowStyle(state)<sp/><sp/><sp/><sp/>(state<sp/>?<sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>|<sp/>WS_EX_TOOLWINDOW)<sp/>:\</highlight></codeline>
<codeline lineno="500"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::SetWindowExStyle(GetWindowExStyle(HiEasyX::GetHWnd_win32())<sp/>&amp;<sp/>~WS_EX_TOOLWINDOW))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="comment">//<sp/>判断全局按键状态</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505" refid="_hi_window_8h_1a39ed1218cbe6649d63285616c639acb9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEY_DOWN(VK_NONAME)<sp/>((GetAsyncKeyState(VK_NONAME)<sp/>&amp;<sp/>0x8000)<sp/>?<sp/>1:0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="comment">//<sp/>判断当前活动窗口是否接受到某按键消息</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508" refid="_hi_window_8h_1a0a4a6911b56077a5b8285b55095911d0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEY_DOWN_WND(VK_NONAME)<sp/>(GetForegroundWindow()<sp/>==<sp/>HiEasyX::GetHWnd_win32()<sp/>&amp;&amp;<sp/>KEY_DOWN(VK_NONAME))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="comment">//<sp/>若使用<sp/>EasyX<sp/>原生函数创建窗口，则关闭窗口时自动退出程序 #define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()

#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32

//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义
#define<sp/>BeginBatchDraw()
#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()
#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()

#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32

#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32
#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32
#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32

#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32
#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32
#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32
#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513" refid="_hi_window_8h_1a4c09b71f211e2f8e29758ea49356232b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>initgraph(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::initgraph_win32(__VA_ARGS__);\</highlight></codeline>
<codeline lineno="514"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::AutoExit()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516" refid="_hi_window_8h_1ad9bb6730860f6ba4763370ad10eb7eb0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>closegraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::closegraph_win32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="comment">//<sp/>默认使用双缓冲，故 BeginBatchDraw<sp/>无意义</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519" refid="_hi_window_8h_1aeed98cb0cace45f4d56a99382c968bc4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BeginBatchDraw()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520" refid="_hi_window_8h_1a2959db99a44d0f584a876927a8eb99f8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FlushBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521" refid="_hi_window_8h_1a12d9f690479a4e9c13624d51bff8b11e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EndBatchDraw()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH_DRAW()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523" refid="_hi_window_8h_1a438d4c23c04ce43cd76de38c8fbbe92f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GetHWnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetHWnd_win32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525" refid="_hi_window_8h_1a2dabe3f34636fddeef2f698ea1e4e2c1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>getmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::getmessage_win32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526" refid="_hi_window_8h_1aba7e39ba456baa77d6ef5db677adbd31" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>peekmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::peekmessage_win32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527" refid="_hi_window_8h_1aa958fd853f11ce25149edbb4bcbe8908" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>flushmessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::flushmessage_win32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529" refid="_hi_window_8h_1a5af1652731768bcb10a6f74ec386630c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MouseHit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::MouseHit_win32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530" refid="_hi_window_8h_1ac50c0e0e941f879aa15e26b88242fa35" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GetMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::GetMouseMsg_win32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531" refid="_hi_window_8h_1a773d70a0163b6b01df079b92571e87b3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PeekMouseMsg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HiEasyX::PeekMouseMsg_win32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532" refid="_hi_window_8h_1ab1d19c665d3722a5969b65e5497c2d77" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FlushMouseMsgBuffer<sp/><sp/><sp/><sp/><sp/>HiEasyX::FlushMouseMsgBuffer_win32</highlight></codeline>
    </programlisting>
    <location file="E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.h"/>
  </compounddef>
</doxygen>
