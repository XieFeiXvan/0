.TH "E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.cpp" 3 "2023年 一月 13日 星期五" "Version Ver 0.3.0" "HiEasyX" \" -*- nroff -*-
.ad l
.nh
.SH NAME
E:/_MYC/_VS_Project/HiEasyX/HiEasyX/HiEasyX/HiWindow.cpp
.SH SYNOPSIS
.br
.PP
\fC#include 'HiWindow\&.h'\fP
.br
\fC#include 'HiMacro\&.h'\fP
.br
\fC#include 'HiIcon\&.h'\fP
.br
\fC#include 'HiStart\&.h'\fP
.br
\fC#include 'HiGdiplus\&.h'\fP
.br
\fC#include 'HiCanvas\&.h'\fP
.br
\fC#include 'HiSysGUI/SysControlBase\&.h'\fP
.br

.SS "命名空间"

.in +1c
.ti -1c
.RI " \fBHiEasyX\fP"
.br
.in -1c
.SS "宏定义"

.in +1c
.ti -1c
.RI "#define \fBMSG_RESERVE_SIZE\fP   100"
.br
.ti -1c
.RI "#define \fBSYSCTRL_RESERVE_SIZE\fP   100"
.br
.in -1c
.SS "函数"

.in +1c
.ti -1c
.RI "bool \fBHiEasyX::IsValidWindowIndex\fP (int index)"
.br
.ti -1c
.RI "bool \fBHiEasyX::IsFocusWindowExisted\fP ()"
.br
.ti -1c
.RI "EasyWindow & \fBHiEasyX::GetFocusWindow\fP ()"
.br
.ti -1c
.RI "int \fBHiEasyX::GetWindowIndex\fP (HWND hWnd)"
.br
.ti -1c
.RI "bool \fBHiEasyX::IsAnyWindow\fP ()"
.br
.RI "是否还存在未销毁的绘图窗口 "
.ti -1c
.RI "bool \fBHiEasyX::IsAliveWindow\fP (HWND hWnd=nullptr)"
.br
.RI "判断一窗口是否还存在（未被关闭） "
.ti -1c
.RI "bool \fBHiEasyX::IsAliveWindow\fP (int index)"
.br
.ti -1c
.RI "void \fBHiEasyX::WaitForProcessing\fP (int index)"
.br
.ti -1c
.RI "void \fBHiEasyX::CopyImageToHDC\fP (IMAGE *pImg, HDC hdc, RECT rct)"
.br
.ti -1c
.RI "void \fBHiEasyX::WaitForTask\fP (HWND hWnd=nullptr)"
.br
.RI "阻塞等待某窗口任务完成 "
.ti -1c
.RI "void \fBHiEasyX::FreeWindow\fP (int index)"
.br
.ti -1c
.RI "void \fBHiEasyX::closegraph_win32\fP (int index)"
.br
.ti -1c
.RI "void \fBHiEasyX::closegraph_win32\fP (HWND hWnd=nullptr)"
.br
.RI "关闭某一绘图窗口 "
.ti -1c
.RI "void \fBHiEasyX::SetWndProcFunc\fP (HWND hWnd, WNDPROC WindowProcess)"
.br
.RI "设置某窗口的过程函数 "
.ti -1c
.RI "IMAGE * \fBHiEasyX::GetWindowImage\fP (HWND hWnd=nullptr)"
.br
.RI "获取某窗口的图像指针 "
.ti -1c
.RI "Canvas * \fBHiEasyX::GetWindowCanvas\fP (HWND hWnd=nullptr)"
.br
.RI "获取窗口画布指针 "
.ti -1c
.RI "void \fBHiEasyX::BindWindowCanvas\fP (Canvas *pCanvas, HWND hWnd)"
.br
.ti -1c
.RI "void \fBHiEasyX::init_end\fP (HWND hWnd=nullptr)"
.br
.RI "初始化窗口结束后，可以用此函数阻塞等待目标窗口被关闭，然后函数返回 "
.ti -1c
.RI "void \fBHiEasyX::AutoExit\fP ()"
.br
.RI "设置：当窗口都被销毁时，自动退出程序 "
.ti -1c
.RI "HWND \fBHiEasyX::GetHWnd_win32\fP ()"
.br
.RI "得到当前活动绘图窗口的句柄 "
.ti -1c
.RI "EasyWindow \fBHiEasyX::GetWorkingWindow\fP ()"
.br
.RI "得到当前绘图窗口的详细信息 "
.ti -1c
.RI "bool \fBHiEasyX::SetWorkingWindow\fP (HWND hWnd)"
.br
.RI "等待当前任务完成并设置活动窗口 "
.ti -1c
.RI "void \fBHiEasyX::QuickDraw\fP (UINT nSkipPixels, HWND hWnd=nullptr)"
.br
.RI "设置加速绘制跳过多少像素点 "
.ti -1c
.RI "DrawMode \fBHiEasyX::GetDrawMode\fP ()"
.br
.RI "获取全局绘制模式 "
.ti -1c
.RI "void \fBHiEasyX::SetDrawMode\fP (DrawMode mode)"
.br
.RI "设置全局绘制模式 "
.ti -1c
.RI "void \fBHiEasyX::SendUserRedrawMsg\fP (HWND hWnd)"
.br
.ti -1c
.RI "void \fBHiEasyX::RedrawWindow\fP (HWND hWnd=nullptr)"
.br
.RI "通知重绘绘图窗口（在 WM_PAINT 消息内绘图不需要使用此函数） "
.ti -1c
.RI "void \fBHiEasyX::FlushDrawing\fP (int index, RECT rct={ 0 })"
.br
.ti -1c
.RI "void \fBHiEasyX::FlushDrawing\fP (RECT rct)"
.br
.ti -1c
.RI "void \fBHiEasyX::EnableAutoFlush\fP (bool enable)"
.br
.ti -1c
.RI "bool \fBHiEasyX::BeginTask\fP ()"
.br
.ti -1c
.RI "void \fBHiEasyX::EndTask\fP (bool flush=true)"
.br
.RI "终止当前窗口任务 "
.ti -1c
.RI "bool \fBHiEasyX::IsInTask\fP (HWND hWnd)"
.br
.ti -1c
.RI "void \fBHiEasyX::ResizeWindowImage\fP (int index, RECT rct)"
.br
.ti -1c
.RI "void \fBHiEasyX::ShowTray\fP (NOTIFYICONDATA *nid)"
.br
.ti -1c
.RI "void \fBHiEasyX::CreateTray\fP (LPCTSTR lpszTrayName, HWND hWnd)"
.br
.ti -1c
.RI "void \fBHiEasyX::DeleteTray\fP (HWND hWnd=nullptr)"
.br
.RI "删除某窗口的托盘 "
.ti -1c
.RI "void \fBHiEasyX::SetTrayMenu\fP (HMENU hMenu, HWND hWnd=nullptr)"
.br
.RI "设置托盘菜单（允许在任何时候设置） "
.ti -1c
.RI "void \fBHiEasyX::SetTrayMenuProcFunc\fP (void(*pFunc)(UINT), HWND hWnd=nullptr)"
.br
.RI "设置托盘菜单消息处理函数 "
.ti -1c
.RI "bool \fBHiEasyX::IsWindowSizeChanged\fP (HWND hWnd=nullptr)"
.br
.RI "判断某窗口的大小是否改变 "
.ti -1c
.RI "bool \fBHiEasyX::GetCustomIconState\fP ()"
.br
.RI "获取自定义程序图标的启用状态 "
.ti -1c
.RI "void \fBHiEasyX::SetCustomIcon\fP (LPCTSTR lpszIcon, LPCTSTR lpszIconSm)"
.br
.ti -1c
.RI "std::vector< ExMessage > & \fBHiEasyX::GetMsgVector\fP (HWND hWnd)"
.br
.ti -1c
.RI "void \fBHiEasyX::RemoveMessage\fP (HWND hWnd)"
.br
.ti -1c
.RI "void \fBHiEasyX::ClearMessage\fP (BYTE filter, HWND hWnd)"
.br
.ti -1c
.RI "bool \fBHiEasyX::IsNewMessage\fP (BYTE filter, HWND hWnd)"
.br
.ti -1c
.RI "ExMessage \fBHiEasyX::GetNextMessage\fP (BYTE filter, HWND hWnd)"
.br
.ti -1c
.RI "ExMessage \fBHiEasyX::getmessage_win32\fP (BYTE filter=\-1, HWND hWnd=nullptr)"
.br
.RI "阻塞等待，直到获取到一个新消息 "
.ti -1c
.RI "void \fBHiEasyX::getmessage_win32\fP (ExMessage *msg, BYTE filter=\-1, HWND hWnd=nullptr)"
.br
.RI "阻塞等待，直到获取到一个新消息 "
.ti -1c
.RI "bool \fBHiEasyX::peekmessage_win32\fP (ExMessage *msg, BYTE filter=\-1, bool removemsg=true, HWND hWnd=nullptr)"
.br
.RI "获取一个消息，立即返回是否获取成功 "
.ti -1c
.RI "void \fBHiEasyX::flushmessage_win32\fP (BYTE filter=\-1, HWND hWnd=nullptr)"
.br
.RI "清除所有消息记录 "
.ti -1c
.RI "bool \fBHiEasyX::MouseHit_win32\fP (HWND hWnd=nullptr)"
.br
.RI "检查是否存在鼠标消息 "
.ti -1c
.RI "MOUSEMSG \fBHiEasyX::GetMouseMsg_win32\fP (HWND hWnd=nullptr)"
.br
.RI "阻塞等待，直到获取到一个新的鼠标消息 "
.ti -1c
.RI "bool \fBHiEasyX::PeekMouseMsg_win32\fP (MOUSEMSG *pMsg, bool bRemoveMsg=true, HWND hWnd=nullptr)"
.br
.RI "获取一个新的鼠标消息，立即返回是否获取成功 "
.ti -1c
.RI "void \fBHiEasyX::FlushMouseMsgBuffer_win32\fP (HWND hWnd=nullptr)"
.br
.RI "清空鼠标消息 "
.ti -1c
.RI "ExMessage \fBHiEasyX::To_ExMessage\fP (MOUSEMSG msg)"
.br
.RI "MOUSEMSG 转 ExMessage "
.ti -1c
.RI "MOUSEMSG \fBHiEasyX::To_MouseMsg\fP (ExMessage msgEx)"
.br
.ti -1c
.RI "void \fBHiEasyX::PreSetWindowStyle\fP (long lStyle)"
.br
.ti -1c
.RI "void \fBHiEasyX::PreSetWindowStyleEx\fP (long lStyleEx)"
.br
.ti -1c
.RI "void \fBHiEasyX::PreSetWindowPos\fP (int x, int y)"
.br
.RI "在创建窗口前设置窗口位置，仅对此操作后首个新窗口生效 "
.ti -1c
.RI "void \fBHiEasyX::PreSetWindowShowState\fP (int nCmdShow)"
.br
.RI "在创建窗口前设置窗口显示状态，仅对此操作后首个新窗口生效 "
.ti -1c
.RI "int \fBHiEasyX::SetWindowStyle\fP (long lNewStyle, HWND hWnd=nullptr)"
.br
.RI "设置某窗口样式 "
.ti -1c
.RI "int \fBHiEasyX::SetWindowExStyle\fP (long lNewExStyle, HWND hWnd=nullptr)"
.br
.RI "设置某窗口扩展样式 "
.ti -1c
.RI "POINT \fBHiEasyX::GetWindowPos\fP (HWND hWnd=nullptr)"
.br
.RI "获取窗口位置 "
.ti -1c
.RI "SIZE \fBHiEasyX::GetWindowSize\fP (HWND hWnd=nullptr)"
.br
.RI "获取窗口大小 "
.ti -1c
.RI "void \fBHiEasyX::MoveWindow\fP (int x, int y, HWND hWnd=nullptr)"
.br
.RI "移动窗口 "
.ti -1c
.RI "void \fBHiEasyX::MoveWindowRel\fP (int dx, int dy, HWND hWnd=nullptr)"
.br
.RI "相对移动窗口 "
.ti -1c
.RI "void \fBHiEasyX::ResizeWindow\fP (int w, int h, HWND hWnd=nullptr)"
.br
.RI "重设窗口大小 "
.ti -1c
.RI "void \fBHiEasyX::SetWindowTitle\fP (LPCTSTR lpszTitle, HWND hWnd=nullptr)"
.br
.RI "设置窗口标题文本 "
.ti -1c
.RI "HICON \fBHiEasyX::GetDefaultAppIcon\fP ()"
.br
.ti -1c
.RI "void \fBHiEasyX::OnSize\fP (int indexWnd)"
.br
.ti -1c
.RI "void \fBHiEasyX::OnTray\fP (int indexWnd, LPARAM lParam)"
.br
.ti -1c
.RI "void \fBHiEasyX::OnTaskBarCreated\fP (int indexWnd)"
.br
.ti -1c
.RI "void \fBHiEasyX::RegisterExMessage\fP (int indexWnd, UINT msg, WPARAM wParam, LPARAM lParam)"
.br
.ti -1c
.RI "void \fBHiEasyX::OnPaint\fP (int indexWnd, HDC hdc)"
.br
.ti -1c
.RI "void \fBHiEasyX::OnMove\fP (HWND hWnd)"
.br
.ti -1c
.RI "void \fBHiEasyX::OnDestroy\fP (int indexWnd, WPARAM wParam)"
.br
.ti -1c
.RI "HWND \fBHiEasyX::OnSysCtrlCreate\fP (int indexWnd, WPARAM wParam, LPARAM lParam)"
.br
.ti -1c
.RI "LRESULT \fBHiEasyX::SysCtrlProc\fP (int indexWnd, UINT msg, WPARAM wParam, LPARAM lParam, bool &bRet)"
.br
.ti -1c
.RI "void \fBHiEasyX::OnCreate\fP (int indexWnd, HWND hWnd, LPARAM lParam)"
.br
.ti -1c
.RI "LRESULT CALLBACK \fBHiEasyX::WndProc\fP (HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)"
.br
.ti -1c
.RI "void \fBHiEasyX::RegisterWndClass\fP ()"
.br
.ti -1c
.RI "EasyWindow & \fBHiEasyX::InitWindowStruct\fP (EasyWindow &wnd, HWND hParent, int w, int h, WNDPROC WindowProcess)"
.br
.ti -1c
.RI "void \fBHiEasyX::InitWindow\fP (int w, int h, int flag, LPCTSTR lpszWndTitle, WNDPROC WindowProcess, HWND hParent, int *nDoneFlag, HWND *hWnd)"
.br
.ti -1c
.RI "HWND \fBHiEasyX::initgraph_win32\fP (int w, int h, int flag, LPCTSTR lpszWndTitle, WNDPROC WindowProcess, HWND hParent)"
.br
.in -1c
.SS "变量"

.in +1c
.ti -1c
.RI "WNDCLASSEX \fBHiEasyX::g_WndClassEx\fP"
.br
.RI "窗口类 "
.ti -1c
.RI "wchar_t \fBHiEasyX::g_lpszClassName\fP [] = L'HiEasyX'"
.br
.RI "窗口类名 "
.ti -1c
.RI "\fBScreenSize\fP \fBHiEasyX::g_screenSize\fP"
.br
.RI "显示器信息 "
.ti -1c
.RI "HWND \fBHiEasyX::g_hConsole\fP"
.br
.RI "控制台句柄 "
.ti -1c
.RI "HINSTANCE \fBHiEasyX::g_hInstance\fP = GetModuleHandle(0)"
.br
.RI "程序实例 "
.ti -1c
.RI "std::vector< EasyWindow > \fBHiEasyX::g_vecWindows\fP"
.br
.RI "窗口表（管理多窗口） "
.ti -1c
.RI "int \fBHiEasyX::g_nFocusWindowIndex\fP = \fBNO_WINDOW_INDEX\fP"
.br
.RI "当前操作焦点窗口索引 "
.ti -1c
.RI "bool \fBHiEasyX::g_isInTask\fP = false"
.br
.RI "标记处于任务中 "
.ti -1c
.RI "HICON \fBHiEasyX::g_hIconDefault\fP"
.br
.RI "默认程序图标 "
.ti -1c
.RI "LPCTSTR \fBHiEasyX::g_lpszCustomIcon\fP = nullptr"
.br
.RI "自定义程序图标资源，为空表示不使用 "
.ti -1c
.RI "LPCTSTR \fBHiEasyX::g_lpszCustomIconSm\fP = nullptr"
.br
.ti -1c
.RI "HICON \fBHiEasyX::g_hCustomIcon\fP"
.br
.RI "自定义程序图标 "
.ti -1c
.RI "HICON \fBHiEasyX::g_hCustomIconSm\fP"
.br
.ti -1c
.RI "bool \fBHiEasyX::g_isPreStyle\fP = false"
.br
.RI "是否预设窗口样式 "
.ti -1c
.RI "bool \fBHiEasyX::g_isPreStyleEx\fP = false"
.br
.RI "是否预设窗口扩展样式 "
.ti -1c
.RI "bool \fBHiEasyX::g_isPrePos\fP = false"
.br
.RI "是否预设窗口位置 "
.ti -1c
.RI "bool \fBHiEasyX::g_isPreShowState\fP = false"
.br
.RI "是否预设窗口显示状态 "
.ti -1c
.RI "long \fBHiEasyX::g_lPreStyle\fP"
.br
.RI "创建窗口前的预设样式 "
.ti -1c
.RI "long \fBHiEasyX::g_lPreStyleEx\fP"
.br
.RI "创建窗口前的预设扩展样式 "
.ti -1c
.RI "POINT \fBHiEasyX::g_pPrePos\fP"
.br
.RI "创建窗口前的预设窗口位置 "
.ti -1c
.RI "int \fBHiEasyX::g_nPreCmdShow\fP"
.br
.RI "创建窗口前的预设显示状态 "
.ti -1c
.RI "DrawMode \fBHiEasyX::g_fDrawMode\fP = DM_Normal"
.br
.RI "全局绘制模式 "
.ti -1c
.RI "bool \fBHiEasyX::g_bAutoFlush\fP = true"
.br
.RI "是否自动刷新双缓冲 "
.ti -1c
.RI "UINT \fBHiEasyX::g_uWM_TASKBARCREATED\fP"
.br
.RI "系统任务栏消息代码 "
.in -1c
.SH "宏定义说明"
.PP 
.SS "#define MSG_RESERVE_SIZE   100"

.PP
在文件 HiWindow\&.cpp 第 12 行定义\&.
.SS "#define SYSCTRL_RESERVE_SIZE   100"

.PP
在文件 HiWindow\&.cpp 第 15 行定义\&.
.SH "作者"
.PP 
由 Doyxgen 通过分析 HiEasyX 的 源代码自动生成\&.
